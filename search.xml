<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>更适合开发者的知识管理方案</title>
      <link href="/2020/01/05/%E6%9B%B4%E9%80%82%E5%90%88%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88/"/>
      <url>/2020/01/05/%E6%9B%B4%E9%80%82%E5%90%88%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<p>年底了，不少开发者都开始做年终总结，总结一年来学习的各种知识点，年初目标完成了多少，明年又要计划做什么？期间可能要翻翻自己的笔记、代码、开发文档！看着满满的知识体系，内心应该都是十分有成就感的！  </p><p>我之前一直是使用有道云笔记的 Markdown 来总结知识的，个人感觉就是两个字“好用”，小而美的字体，兼容大部分 Markdown 平台（简书、Github、Hexo）的渲染样式，实时预览，跨平台，分享，导入导出等！配合一个 Chrome 浏览器插件，完全可以解决我的<strong>基本</strong>需求！  </p><p>对于记笔记而言，它已经足够优秀了。但是，对于开发者而言，做笔记固然重要，因为这是经验的累积，更重要的是做笔记的意义，使自己受惠，在阅读，检索笔记上，大多数云笔记都做的不好，有的甚至出现笔记丢失的情况！</p><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h4><p>我有一个博客，经常整理一些东西发在上面，我一般是直接在有道云笔记中复制出来，因为笔记头部信息中没有类似于  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 更适合开发者的知识管理方案</span><br><span class="line">categories: [Markdown]</span><br><span class="line">tags: [Markdown,VNote,PicGo,OneIndex,OneDrive,Arch Linux]</span><br><span class="line">date: 2020-01-05 03:22:26</span><br></pre></td></tr></table></figure><p>这样的模板，所以每次都要生成一遍，再粘贴内容，稍微修改一下，否则 <code>Hexo</code> 不会识别和分类  </p><p>我经常记录一些代码段，这对程序员来说很正常，谁没有存过一些 <code>Spring</code> 的配置呢（手动滑稽）？通常大的代码段下去，会占用大量的可视空间，鼠标滚轮就要没停，所以我会在 Markdown 中插入 <code>details</code> 标签来收缩一些内容  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>收缩标题<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line">内容描述。。。</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有时候写一些<span style="color:#ff0000;">注意事项</span>，可能还需要在标签中添加 <code>style=&quot;color:#ff0000&quot;</code> 这样的颜色样式，方便观看，那么就要手写很多重复的操作  </p><p>有时候，我需要在文档中插入一些图片，我一般会使用 Chrome 中的微博图床插件，唯一缺点是我得登录一下微博才能使用（原谅我太懒），后来我用了 <code>PicGo</code> 配 <code>Github</code> ，感觉还不错，借助 Github 的无限存储，也不用怕资源丢失，就是上传慢了点（敲碎狗头），所以后面基本上是使用的 PicGo 中的 <code>SM.MS</code> 图床  </p><p>我的第一篇博客比较长，就是这个<a href="https://www.teaper.dev/2019/05/19/archlinux-installation-instructions/">【ArchLinux搭建Java开发环境】</a>，统计了下，三万多字吧！里面涉及到各种资源，安装包，依赖包，有下载地址的附地址，没有下载地址的提供地址，用过百度网盘，老是失效啥的，太狗了，Google Driver 啥的国内人有看不到，虽然里面有翻墙教程，翻墙工具又没有，后来用了个 <a href="https://eu.static.mega.co.nz/" rel="external nofollow noopener noreferrer" target="_blank">MEGAsync</a> 网盘，感觉也还不错，用来同步和分享一些文件  </p><p>写好的笔记和博客，不只是分享，我自己有时候也会看，比如好多关于 Linux 的配置，那些脚本，命令啥的，没必要记的长条命令，或者几个月都用不到一次的命令，电脑一生只配置一次的命令，比如  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span>        <span class="comment">#查看日志，以后直接输入 git lg 即可</span></span><br></pre></td></tr></table></figure><p>这样少用又好用的东西，怎么能不收藏一下，万一找不到了呢！（多可惜）  </p><details><summary style="color:#ff0000;">想知道我刚才怎么十秒钟找到这个长命令的么?</summary><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105044215.png" alt></p><p>直接高级检索文件夹，精确到文件的 394 行，找到匹配项（就问你六不六）</p></details>基本是可以说解决了看笔记，找笔记，整理笔记的大难题！  <h4 id="安装-PicGo"><a href="#安装-PicGo" class="headerlink" title="安装 PicGo"></a>安装 PicGo</h4><p>这个比较容易，windows 用户直接上<a href="https://github.com/Molunerfinn/PicGo/releases" rel="external nofollow noopener noreferrer" target="_blank">下载页</a>下载即可，然后配置 Github 可以看我博客<a href="https://www.teaper.dev/2019/06/01/picgoimgs/">【图床工具PicGo+Github】</a>，将 Github 图床设置为默认图床，并且在 PicGo 开启 Mini 窗口置顶和上传提示即可  </p><p>使用的时候，直接用系统截图到剪贴板快捷键，然后右击 Mini 窗口，选择剪贴板图片上传即可  </p><h4 id="安装-Onedrive"><a href="#安装-Onedrive" class="headerlink" title="安装 Onedrive"></a>安装 Onedrive</h4><p>windows 用户直接在微软商城就有下载，注册账号啥的，这个应该不需要教！这里主要讲下 Arch Linux 的安装，其他的 Linux 用户可以直接看<a href="https://github.com/skilion/onedrive" rel="external nofollow noopener noreferrer" target="_blank">项目文档</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S curl sqlite dlang    <span class="comment">#安装这三个东西</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/skilion/onedrive.git    <span class="comment">#克隆项目到本地</span></span><br><span class="line"><span class="built_in">cd</span> onedrive    <span class="comment">#进入项目文件夹</span></span><br><span class="line">make  <span class="comment">#编译</span></span><br><span class="line">sudo make install    <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>安装成功之后，你会发现这个是没有客户端的，也就是说它没有图形界面，你在开始菜单中找不到它的，所以直接在终端启动  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onedrive    <span class="comment">#运行</span></span><br></pre></td></tr></table></figure><p>由于是首次运行，会出现一段非常长的链接，然后提示你回车提交链接；这时候在浏览器中打开终端中这个链接，然后接受 Onedrive 的授权，授权成功会跳转到一个空白页面，将空白页面地址栏的链接复制，粘贴到终端提示中，回车即可  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105050812.png" alt></p><p>像这样，之后它下载一些配置，并且在 <code>～/</code> 目录创建一个 <code>OneDrive</code> 文件夹，并且同步一写数据和配置信息，将它们下载到本地  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl --user <span class="built_in">enable</span> onedrive    <span class="comment">#开机自启 Onedrive 同步</span></span><br><span class="line">systemctl --user start onedrive</span><br><span class="line">systemctl --user status onedrive    <span class="comment">#查看运行状态</span></span><br></pre></td></tr></table></figure><h4 id="搭建-OneIndex"><a href="#搭建-OneIndex" class="headerlink" title="搭建 OneIndex"></a>搭建 OneIndex</h4><p><a href="https://github.com/donwa/oneindex" rel="external nofollow noopener noreferrer" target="_blank">OneIndex</a> 主要是给 Onedrive 提供一个网页的下载页面，这样我们至于要将文章中用到的安装包放在 <code>~/OneDrive</code> 文件夹下，就可以自动上传到你的网盘中，然后给指定的文件夹提供一个网页版的访问页面，可以直接点击文件即可下载  </p><p><a href="https://ftp.teaper.dev/" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105053005.png" alt></a></p><p>类似于 163 源的那种 FTP 文件服务器效果；安装方法也很简单，去 <a href="https://my.vultr.com/" rel="external nofollow noopener noreferrer" target="_blank">Vultr</a> 准备一台 Debian 系服务器<span style="color:#ff0000;">（Ubuntu、Debian 都可以，我是 Debian 10）</span>，配置好 <code>SSH</code> 公钥后使用命令登录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@139.180.202.71</span><br></pre></td></tr></table></figure><p>首次会提示存储秘钥，输入 <code>yes</code> 回车即可登录上去  </p><h5 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h5><p>首先需要安装下 <code>Docker</code> 容器，这里直接参照<a href="https://docs.docker.com/install/linux/docker-ce/debian/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">apt update <span class="comment"># 检查源更新</span></span><br><span class="line">sudo apt install docker.io <span class="comment"># 安装docker</span></span><br></pre></td></tr></table></figure><p>安装成功可以运行 <code>docker --version</code> 查看版本及 <code>docker ps</code> 查看容器（一般为空）  </p><p>然后就可以正式安装 <code>OneIndex</code> 容器了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name oneindex -p 8080:80 --restart=always -v ~/oneindex/config:/var/www/html/config -v ~/oneindex/cache:/var/www/html/cache -e REFRESH_TOKEN=<span class="string">'0 * * * *'</span> -e REFRESH_CACHE=<span class="string">'*/10 * * * *'</span> setzero/oneindex    <span class="comment">#直接运行OneIndex容器</span></span><br></pre></td></tr></table></figure><p>运行成功可使用 <code>docker ps</code>查看运行状态  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@pixiv:~<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                          NAMES</span><br><span class="line">06e8135dc8f9        setzero/oneindex    <span class="string">"/docker-entrypoint.…"</span>   43 hours ago        Up 43 hours         0.0.0.0:8080-&gt;80/tcp, 9000/tcp   oneindex</span><br></pre></td></tr></table></figure><p>如果后期你想停止容器和删除容器可以用以下两个命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker stop oneindex    <span class="comment">#停止</span></span><br><span class="line">docker rm -v oneindex    <span class="comment">#删除</span></span><br></pre></td></tr></table></figure><h5 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h5><p>刚好我在 <a href="https://account.godaddy.com/products/" rel="external nofollow noopener noreferrer" target="_blank">Godaddy</a> 有个域名，所以我就直接使用它去解析一条 <code>A</code> 记录到 <code>139.180.202.71</code> 服务器  </p><table><thead><tr><th>类型</th><th>名称</th><th>值</th><th>TTL</th></tr></thead><tbody><tr><td>A</td><td>ftp</td><td>139.180.202.71</td><td>1小时</td></tr></tbody></table><p>然后可以 <code>ping ftp.teaper.dev</code> 看看解析生效没有  </p><details><summary style="color:#ff0000;">注意：如果你的主机是 Vultr 的主机的话，是无法解析到服务器去的</summary><p>这时候就需要先在 Vultr 创建一个 Domain </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200106031945.png" alt></p><p>并且将 Godaddy 中的 DNS 解析记录复制到这个 Domain 中  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200106032051.png" alt></p><p>最后在 Godaddy 中修改域名服务器为 Vultr 的 <code>ns1.vultr.com</code> 和 <code>ns2.vultr.com</code></p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200106032212.png" alt></p></details><h5 id="安装-Caddy"><a href="#安装-Caddy" class="headerlink" title="安装 Caddy"></a>安装 Caddy</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo curl https://getcaddy.com | bash -s personal <span class="comment"># 安装Caddy</span></span><br><span class="line"><span class="built_in">which</span> caddy <span class="comment"># 检查caddy是否安装成功，若成功则输出/usr/local/bin/caddy</span></span><br></pre></td></tr></table></figure><p>Caddy 的使用需要配置 Caddyfile，且需要一个文件夹放置 SSL 证书。以下代码功能是创建 Caddy 运行所需的文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/caddy                      <span class="comment"># 在指定目录创建 caddy 文件夹</span></span><br><span class="line">sudo touch /etc/caddy/Caddyfile            <span class="comment"># 创建 Caddyfile 文件，用于稍后的配置</span></span><br><span class="line">sudo chown -R root:www-data /etc/caddy     <span class="comment"># 文件夹权限设置</span></span><br><span class="line">sudo mkdir /etc/ssl/caddy                  <span class="comment"># 创建文件夹，存放 ssl 证书</span></span><br><span class="line">sudo chown -R www-data:root /etc/ssl/caddy <span class="comment"># 文件夹权限设置</span></span><br><span class="line">sudo chmod 0770 /etc/ssl/caddy             <span class="comment"># 文件夹权限设置</span></span><br></pre></td></tr></table></figure><p>设置 Caddy 令其开启自启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -s https://raw.githubusercontent.com/mholt/caddy/master/dist/init/linux-systemd/caddy.service -o /etc/systemd/system/caddy.service   <span class="comment"># 从 Github 下载 systemd 配置文件</span></span><br><span class="line">sudo systemctl daemon-reload         <span class="comment"># 重新加载 systemd 配置</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> caddy.service  <span class="comment"># 设置 Caddy 服务自启动</span></span><br><span class="line">sudo systemctl status caddy.service  <span class="comment"># 查看 Caddy 状态，现在应该是 not run 状态</span></span><br></pre></td></tr></table></figure><p>配置 Caddyfile 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">"ftp.teaper.dev &#123;</span></span><br><span class="line"><span class="string"> gzip</span></span><br><span class="line"><span class="string"> tls www@teaper.dev</span></span><br><span class="line"><span class="string"> proxy / http://127.0.0.1:8080</span></span><br><span class="line"><span class="string">&#125;"</span> &gt; /etc/caddy/Caddyfile       <span class="comment"># 请修改代码后全选复制，这个不要一行一行地复制粘贴</span></span><br></pre></td></tr></table></figure><p>这里你们主要替换掉 <code>ftp.teaper.dev</code> 和 <code>www@teaper.dev</code> 即可，端口 <code>8080</code> 是和 <code>docker ps</code> 中保持一致的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart caddy.service <span class="comment"># 重启 Caddy 服务</span></span><br></pre></td></tr></table></figure><p>查看一下运行状态，如果显示和我这个一样，应该就已经实现 HTTPS 访问了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">root@pixiv:~<span class="comment"># systemctl status caddy.service    #查看运行状态</span></span><br><span class="line">● caddy.service - Caddy HTTP/2 web server</span><br><span class="line">   Loaded: loaded (/etc/systemd/system/caddy.service; enabled; vendor preset: en</span><br><span class="line">   Active: active (running) since Mon 2020-01-06 03:09:26 CST; 9s ago</span><br><span class="line">     Docs: https://caddyserver.com/docs</span><br><span class="line"> Main PID: 3059 (caddy)</span><br><span class="line">    Tasks: 6 (<span class="built_in">limit</span>: 1149)</span><br><span class="line">   Memory: 4.6M</span><br><span class="line">   CGroup: /system.slice/caddy.service</span><br><span class="line">           └─3059 /usr/<span class="built_in">local</span>/bin/caddy -<span class="built_in">log</span> stdout -<span class="built_in">log</span>-timestamps=<span class="literal">false</span> -agree=</span><br><span class="line"></span><br><span class="line">Jan 06 03:09:26 pixiv systemd[1]: Started Caddy HTTP/2 web server.</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: [INFO] Caddy version: v1.0.4</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: Activating privacy features... [INFO][cache:0</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: <span class="keyword">done</span>.</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: Serving HTTP on port 80</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: http://ftp.teaper.dev</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: [INFO] Serving http://ftp.teaper.dev</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: Serving HTTPS on port 443</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: https://ftp.teaper.dev</span><br><span class="line">Jan 06 03:09:26 pixiv caddy[3059]: [INFO] Serving https://ftp.teaper.dev</span><br></pre></td></tr></table></figure><h5 id="后续部署"><a href="#后续部署" class="headerlink" title="后续部署"></a>后续部署</h5><p>配置成功之后就可以在浏览器打开域名网址开始部署，像这样 <a href="https://ftp.teaper.dev" rel="external nofollow noopener noreferrer" target="_blank">https://ftp.teaper.dev</a>  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105060324.png" alt></p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105060407.png" alt></p><p>这里点击蓝色的<strong>「获取应用ID和机密」</strong>，会跳转到 Onedrive 的官网，获取 <code>client_id</code> 和<code>client_secret</code>  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105060636.png" alt></p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105060656.png" alt></p><p>将 OneDrive 那边获取到的 <code>client_id</code> 和<code>client_secret</code> 配置到 <code>OneIndex</code> 中（图二），确定无误后点“下一步”绑定账号，然后会提示授权啥的，最后提示安装成功  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105061112.png" alt></p><p>接下来就是配置 <code>OneIndex</code> 后台，打开 <a href="https://ftp.teaper.dev/admin" rel="external nofollow noopener noreferrer" target="_blank">https://ftp.teaper.dev/admin</a>  ，输入初始密码 <code>oneindex</code> </p><ul><li><p>基本设置：网站名称、网站主题 <code>nexmoe</code>、OneDrive 起始目录 <code>/share/</code> （没有就创建一个）</p></li><li><p>页面缓存：本地同步上传文件之后，如果 <a href="https://ftp.teaper.dev" rel="external nofollow noopener noreferrer" target="_blank">https://ftp.teaper.dev</a> 没有刷新文件列表，可以点一下重建缓存</p></li><li><p>修改密码：这个不用多说了吧！</p><p>到这里基本也就结束了，如果我们要分享一个文件给别人，只需要把文件放在 <code>～/OneDrive/share</code> 文件夹中，他会自动上传到 OneDrive 中，并且你打开 <a href="https://ftp.teaper.dev" rel="external nofollow noopener noreferrer" target="_blank">https://ftp.teaper.dev</a> 可以看到文件，右击获取文件的<a href="https://ftp.teaper.dev/ssr/electron-ssr-0.2.6.pacman" rel="external nofollow noopener noreferrer" target="_blank">下载地址</a> ，将其插入到你的 Markdown 中即可  </p></li></ul><h4 id="安装-VNote"><a href="#安装-VNote" class="headerlink" title="安装 VNote"></a>安装 VNote</h4><p>最后就是我们的主角 <a href="https://tamlok.github.io/vnote/zh_cn/#!downloads.md" rel="external nofollow noopener noreferrer" target="_blank">VNote</a> 上场了，windows 用户直接去 <a href="https://github.com/tamlok/vnote/releases" rel="external nofollow noopener noreferrer" target="_blank">GitHub releases</a> 下载安装包即可  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S vnote-git    <span class="comment">#ArchLinux 安装</span></span><br></pre></td></tr></table></figure><p>首次打开会提示需要创建一个文件夹，这里就选择 <code>~/OneDrive/开发经验</code> ，因为我们希望自己的笔记可以同步到云服务器上，让它自己保存嘛！</p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/Screenshot%20from%202020-01-04%2010-43-35.png" alt></p><p>首先介绍下布局，最上面是菜单栏，这没啥好说的；其次是工具栏，除了常用 Markdown 样式按钮之外，有三个非常好用的东西  </p><ul><li>灵犀页（Ctrl+Alt+L）：可以用来打草稿，比如想写又不知道写什么的时候</li><li>快速访问（Ctrl+Alt+I）：可以右击文档设置，快速访问只能设置一个文档文件</li><li>通用入口（Ctrl+G）：比高级搜索还方便的工具，输入 <code>qArchlinux</code>可以在全部笔记中搜索名字带 <code>Archlinux</code>的文件夹或笔记；输入 <code>agit</code>可以在全部笔记中搜索带 <code>git</code>内容的笔记；第一个字母是搜索选项，后接搜索内容，基本上可以做到搜到即打开，打开及定位<span style="color:#ff0000;">（吹爆）</span></li></ul><p>左边是导航栏，分为两块，上半部分显示 <code>开发经验</code> 文件夹下的所有子文件夹<span style="color:#ff0000;">（注意：文件不显示）</span>；下半部分显示文件夹中的文件，你要单击 <code>~/OneDrive/开发经验</code>下的子文件夹才会有出现，导航栏在编写文档过程中可以隐藏<span style="color:#ff0000;">（快捷键：Ctrl+E，E）</span>  </p><p>中间是编辑区，右击文件夹新建笔记的时候打开，打开之后可以使用 Markdown 自由书写，同样可以使用一个快捷键 <code>Ctrl+E，I</code> 打开一个预览面板  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105065004.png" alt></p><p>左边是工具栏和高级搜索栏，工具栏可以看文章大纲、添加和使用片段、小推车。文章大纲就会看文件标题结构的，片段是一些常用的内容，配合幻词可以插入你想要的东西，可以点击 <code>+</code> 添加三个片段 <code>details</code>、<code>details-red</code>、<code>span-red</code>，类型选择纯文本，例如：  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>$$@@<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span> <span class="attr">style</span>=<span class="string">"color:#ff0000;"</span>&gt;</span>$$@@<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:#ff0000;"</span>&gt;</span>$$@@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样我每次需要使用的时候，只需要双击片段名称就可以在文本中插入这些标签，也可以选中文字后再双击片段名称，它会插入标签，并把 <code>$$@@</code> 替换为你选中的文本  </p><p>小推车的话，就类似于购物车，在导航栏右击笔记，添加到小推车，就会出现在这个小推车列表，结算方式就是文件菜单 -&gt; 导出，选择导出笔记下拉中的小推车，这个好处就是你可以批量导出你想要的文章，而且导出格式可以选择 <code>PDF</code> 等，也算是个非常赞的小功能吧！  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/20200105070544.png" alt></p><p>左边的搜索模块是高级搜索 ，普通的编辑区搜索是 <code>Ctrl+F</code>，高级搜索是 <code>Ctrl+Alt+F</code>，可以检索到 <code>~/OneDrive/开发经验</code>及其同级文件夹，甚至是电脑根目录 <code>/</code> ；一般普通高级检索就好了，当然还可以正则匹配，模糊查询什么的可以选择，检索过程也提供了日志输出面板<span style="color:#ff0000;">（我一般不开）</span>  </p><p>最底下是状态栏，会显示当前文档的行列字数信息，在旁边有个添加标签选项<span style="color:#ff0000;">（我喜欢）</span>，我一般保持和 <code>Hexo</code> 的一致，添加标签后，就可以在导航栏左边的标签列表中快速分类选择  </p><p>最后一个就是我开头讲的模板，我 <code>Hexo</code> 需要的那种格式开头，这个在右击文件夹 -&gt; 新建笔记，在弹出的快捷菜单中有个模板选项，点击右边的文件夹图标，手动创建两个 <code>Markdown</code> 文件，<code>note.md</code>和 <code>blog.md</code>，内容如下  </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">## &lt;center&gt;%no%&lt;/center&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: %no%</span><br><span class="line">categories: [categories]</span><br><span class="line">tags: [tag1,tag2]</span><br><span class="line">date: %yyyy%-%MM%-%dd% %time%</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在新建笔记的时候可以选择套用哪个模板，他会自动将文件名替换到 <code>%no%</code> 的位置，还有一些时间的替换，更多参数可以看<a href="https://tamlok.github.io/vnote/zh_cn/#!docs/%E7%94%A8%E6%88%B7/%E5%B9%BB%E8%AF%8D.md" rel="external nofollow noopener noreferrer" target="_blank">官方文档的幻词</a>  </p><p>最后，如果你和我一样拥有一个 <code>Hexo</code> 博客的话，可以直接将文件夹地址设置为 <code>~/OneDrive/hexoblog/source/_posts/开发经验</code> ，三位一体武魂融合技<span style="color:#ff0000;">（手动狗头）</span>  </p><details><summary style="color:#ff0000;">常见问题：无法读取目录文件夹或者目录结构不正确</summary><p>VNote 在每个文件夹下都使用了一个 <code>_vnote.json</code> 用来存储目录结构，如果该文件不存在，就会提示重新修复，如果存在，但是里面的 <code>json</code> 配置出错，就会读取不出文件目录，除了 <code>_vnote.json</code>之外，也在每个文件夹下创建了一个 <code>_v_recycle_bin</code> 文件夹，用来存放在 VNote 中被删除的文件，在编辑区右击文件标题选择回收站可以看到所有被删除的文件</p></details>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> Markdown </tag>
            
            <tag> PicGo </tag>
            
            <tag> VNote </tag>
            
            <tag> OneIndex </tag>
            
            <tag> OneDrive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过年抢票 12306 走起</title>
      <link href="/2019/12/25/12306/"/>
      <url>/2019/12/25/12306/</url>
      
        <content type="html"><![CDATA[<p>每年恰逢国庆或新年，Github 的这个项目都会火，今天正好有时间，从头到尾带大家详细走两遍吧（本地预售+服务器捡漏）！  </p><ul><li>本机系统：Archlinux</li><li>服务器系统：Ubuntu 19.04</li><li>项目地址：<a href="https://github.com/testerSunshine/12306" rel="external nofollow noopener noreferrer" target="_blank">testerSunshine/12306</a></li><li>git 版本：2.24.1</li><li>python 版本：3.8.0</li><li>docker 版本：19.03.5-ce</li><li>docker-compose 版本：1.25.1-rc1</li><li>视频教程：<a href="https://www.bilibili.com/video/av80673498#reply2210912155" rel="external nofollow noopener noreferrer" target="_blank">哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li></ul><h4 id="安装Docker容器"><a href="#安装Docker容器" class="headerlink" title="安装Docker容器"></a>安装Docker容器</h4><p>安装 docker 我这里写了两种，一种本地 Archlinux 系统的，一种 Ubuntu 服务器的，看你是怎么选择，我是首先本地找个有票的目的地去抢，抢到票的话再搭建服务器捡漏</p><details><summary>本地系统</summary><p><a href="https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" rel="external nofollow noopener noreferrer" target="_blank">Arch Linux Docker</a>提供了两个版本，二选一喽（我选一）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S docker    <span class="comment">#稳定版</span></span><br><span class="line">yaourt -S docker-git    <span class="comment">#开发版</span></span><br></pre></td></tr></table></figure><p>启动Docker服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><p>安装完成后，运行下面的命令，验证是否安装成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version     <span class="comment">#由于还没把docker用户加入用户组，所以运行docker命令需要加sudo</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">sudo docker info</span><br></pre></td></tr></table></figure><p><code>Docker</code>需要用户具有<code>sudo</code>权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入<code>Docker</code>用户组(系统重启后生效)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span>   <span class="comment">#自动创建docker用户并加入到用户组</span></span><br><span class="line">cat /etc/group  <span class="comment">#查看文件中有没有出现docker</span></span><br></pre></td></tr></table></figure><p>列出本机的镜像  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image ls     <span class="comment">#列出本机的所有image文件</span></span><br><span class="line">docker images       <span class="comment">#列出本机的所有image文件 (等同于docker image ls)</span></span><br></pre></td></tr></table></figure><p>想设置你自己的存储驱动选项和<code>docker</code>源，编辑 <code>/etc/docker/daemon.json</code> (如果不存在就自己创建)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/docker/daemon.json      #创建daemon.json文件</span><br><span class="line">#内容如下</span><br><span class="line">&#123;</span><br><span class="line">&quot;storage-driver&quot;: &quot;overlay2&quot;,   #存储驱动选项</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]    #网易163源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他源如下：  </p><blockquote><p>阿里源：<a href="https://pee6w651.mirror.aliyuncs.com" rel="external nofollow noopener noreferrer" target="_blank">https://pee6w651.mirror.aliyuncs.com</a><br>网易163源：<a href="http://hub-mirror.c.163.com" rel="external nofollow noopener noreferrer" target="_blank">http://hub-mirror.c.163.com</a><br>docker中国区源：<a href="https://registry.docker-cn.com" rel="external nofollow noopener noreferrer" target="_blank">https://registry.docker-cn.com</a><br>中国科技大学：<a href="https://docker.mirrors.ustc.edu.cn" rel="external nofollow noopener noreferrer" target="_blank">https://docker.mirrors.ustc.edu.cn</a>  </p></blockquote><p>修改重新启动<code>docker</code>服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>测试docker</strong><br>从远程仓库<a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">docker hub</a><code>pull</code>一个镜像到本地仓库<code>/var/lib/docker</code>，以<a href="https://hub.docker.com/_/hello-world" rel="external nofollow noopener noreferrer" target="_blank">hello-world</a>为例  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world     <span class="comment">#pull一个镜像</span></span><br><span class="line">docker images     <span class="comment">#查看本地镜像</span></span><br><span class="line">docker [container] run hello-world    <span class="comment">#运行hello-world镜像(本地仓库没有镜像，会自动运行远程仓库中的)</span></span><br></pre></td></tr></table></figure><p><code>hello-world</code>镜像运行之后输出一大段文本，然后进程会自动停止，有的镜像不会自动停止(例如：<code>Ubuntu</code>系统<code>ubuntu bash</code>)，这时候就需要手动杀死进程<code>docker container kill &lt;CONTAINER ID&gt;</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash  <span class="comment">#使用bash运行ubuntu镜像</span></span><br></pre></td></tr></table></figure><p>再打开一个终端窗口，查看容器运行情况  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls     <span class="comment">#列出本机正在运行的容器</span></span><br><span class="line">docker ps   <span class="comment">#列出本机正在运行的容器，等效于 docker container ls</span></span><br><span class="line">docker container ls --all     <span class="comment">#列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">docker ps --all   <span class="comment">##列出本机所有容器，包括终止运行的容器，等效于 docker container ls --all</span></span><br></pre></td></tr></table></figure><p>可以看到以下内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集装箱ID           图像                命令                   创建               状态                端口                名称</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">dadf7d24b756        ubuntu              <span class="string">"bash"</span>              6 seconds ago       Up 5 seconds                            hungry_stallman</span><br></pre></td></tr></table></figure><p>手动杀死<code>ubuntu</code>进程  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [container] <span class="built_in">kill</span> dadf7d24b756    <span class="comment">#dadf7d24b756是上面查出的CONTAINER ID</span></span><br></pre></td></tr></table></figure><p>杀死进程，容器还在，如果容器也不要了，可以删除  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --all     <span class="comment">#列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">docker [container] rm &lt;CONTAINER ID&gt;...      <span class="comment">#删除指定容器</span></span><br></pre></td></tr></table></figure><p>容器是运行镜像之后产生的，你可以理解为镜像是个压缩包，容器就是解压出来的文件夹，如果还要把本地镜像也删除，可以  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm &lt;REPOSITORY&gt;...     <span class="comment">#根据镜像名称删除image文件</span></span><br><span class="line">docker rmi &lt;IMAGE ID&gt;...     <span class="comment">#根据镜像id删除image文件</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：删除镜像之前，必须把该镜像的所有容器删除（包括正在运行的容器和停止使用的容器）才能删除镜像，否则会报错</span>  </p></details><details><summary>Ubuntu 服务器</summary><p>安装 docker 容器，服务器是 ubuntu 19.04，直接安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ssh root@55.66.77.88    <span class="comment">#ssh 登录</span></span><br><span class="line">curl https://get.docker.com | bash  <span class="comment">#下载</span></span><br><span class="line">sudo apt install docker.io      <span class="comment">#安装 docker</span></span><br><span class="line">docker --version    <span class="comment">#查看docker 版本</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></details><h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><p><a href="https://github.com/docker/compose/releases" rel="external nofollow noopener noreferrer" target="_blank">Compose</a> 是用于定义和运行多容器 Docker 应用程序的工具。通过 Compose，您可以使用 YAML 文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务。要了解有关 Compose 的所有功能的更多信息，请参阅<a href="https://github.com/docker/docker.github.io/blob/master/compose/index.md#features" rel="external nofollow noopener noreferrer" target="_blank">功能列表</a>，这个不管是本地系统还是服务器都是一样安装的 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment">#使用 root 账号</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose  <span class="comment">#直接下载docker-compose文件到/usr/local/bin</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose  <span class="comment">#授权</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出root</span></span><br><span class="line">docker-compose --version    <span class="comment">#查看docker-compose版本</span></span><br></pre></td></tr></table></figure><h4 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h4><p>把 <a href="https://github.com/testerSunshine/12306" rel="external nofollow noopener noreferrer" target="_blank">testerSunshine/12306</a> 克隆到本地电脑或服务器  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/testerSunshine/12306.git</span><br><span class="line"><span class="built_in">cd</span> 12306    <span class="comment">#进入文件夹</span></span><br><span class="line">vim TickerConfig.py   <span class="comment">#编辑配置文件</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>配置文件 <a href="https://github.com/testerSunshine/12306/blob/master/TickerConfig.py" rel="external nofollow noopener noreferrer" target="_blank">TickerConfig.py</a> 中需要填写一些基本的参数，要我们按情况修改，这里我提供两种配置方案</p><details><summary>本机：刷票+本地打码+预售</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># 关于软件使用配置说明，一定要看！！！</span></span><br><span class="line"><span class="comment"># ps: 如果是候补车票，需要通过人证一致性核验的用户及激活的“铁路畅行”会员可以提交候补需求，请您按照操作说明在铁路12306app.上完成人证核验</span></span><br><span class="line"><span class="comment"># 关于候补了之后是否还能继续捡漏的问题在此说明： 软件为全自动候补加捡漏，如果软件候补成功则会停止抢票，发出邮件通知，但是不会影响你继续捡漏，</span></span><br><span class="line"><span class="comment"># 如果这个时候捡漏捡到的话，也是可以付款成功的，也就是说，捡漏+候补，可以最大程度提升抢票成功率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷票模式：1=刷票 2=候补+刷票</span></span><br><span class="line">TICKET_TYPE = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出发日期(list) "2018-01-06", "2018-01-07"</span></span><br><span class="line">STATION_DATES = [</span><br><span class="line">    <span class="string">"2020-01-23"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填入需要购买的车次(list)，"G1353"</span></span><br><span class="line"><span class="comment"># 修改车次填入规则，注：(以前设置的车次逻辑不变)，如果车次填入为空，那么就是当日乘车所有车次都纳入筛选返回</span></span><br><span class="line"><span class="comment"># 不填车次是整个list为空才算，如果不是为空，依然会判断车次的，这种是错误的写法 [""], 正确的写法 []</span></span><br><span class="line">STATION_TRAINS = [<span class="string">"D2357"</span>,<span class="string">"D6581"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出发城市，比如深圳北，就填深圳就搜得到</span></span><br><span class="line">FROM_STATION = <span class="string">"赣州"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 到达城市 比如深圳北，就填深圳就搜得到</span></span><br><span class="line">TO_STATION = <span class="string">"于都"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 座位(list) 多个座位ex:</span></span><br><span class="line"><span class="comment"># "商务座",</span></span><br><span class="line"><span class="comment"># "一等座",</span></span><br><span class="line"><span class="comment"># "二等座",</span></span><br><span class="line"><span class="comment"># "特等座",</span></span><br><span class="line"><span class="comment"># "软卧",</span></span><br><span class="line"><span class="comment"># "硬卧",</span></span><br><span class="line"><span class="comment"># "硬座",</span></span><br><span class="line"><span class="comment"># "无座",</span></span><br><span class="line"><span class="comment"># "动卧",</span></span><br><span class="line">SET_TYPE = [<span class="string">"一等座"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当余票小于乘车人，如果选择优先提交，则删减联系人和余票数一致在提交</span></span><br><span class="line"><span class="comment"># bool</span></span><br><span class="line">IS_MORE_TICKET = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘车人(list) 多个乘车人ex:</span></span><br><span class="line"><span class="comment"># "张三",</span></span><br><span class="line"><span class="comment"># "李四"</span></span><br><span class="line">TICKET_PEOPLES = [<span class="string">"张三"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12306登录账号</span></span><br><span class="line">USER = <span class="string">"teaper"</span></span><br><span class="line">PWD = <span class="string">"zdfvgh5g6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入小黑屋时间默认为5分钟，此功能为了防止僵尸票导致一直下单不成功错过正常的票</span></span><br><span class="line">TICKET_BLACK_LIST_TIME = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动打码</span></span><br><span class="line">IS_AUTO_CODE = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置2本地自动打码，需要配置tensorflow和keras库，3为云打码，由于云打码服务器资源有限(为2h4C的cpu服务器)，请不要恶意请求，不然只能关闭服务器</span></span><br><span class="line"><span class="comment"># ps: 请不要一直依赖云服务器资源，在此向所有提供服务器同学表示感谢</span></span><br><span class="line">AUTO_CODE_TYPE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处设置云打码服务器地址，如果有自建的服务器，可以自行更改</span></span><br><span class="line">HOST = <span class="string">"captcha:80"</span></span><br><span class="line">REQ_URL = <span class="string">"/verify/base64/"</span></span><br><span class="line">HTTP_TYPE = <span class="string">"http"</span></span><br><span class="line"><span class="comment"># HOST="12306.yinaoxiong.cn" #备用服务器稳定性较差</span></span><br><span class="line"><span class="comment"># REQ_URL="/verify/base64/"</span></span><br><span class="line"><span class="comment"># HTTP_TYPE="https"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  邮箱配置，如果抢票成功，将通过邮件配置通知给您</span></span><br><span class="line"><span class="comment">#  列举163</span></span><br><span class="line"><span class="comment">#  email: "xxx@163.com"</span></span><br><span class="line"><span class="comment">#  notice_email_list: "123@qq.com"</span></span><br><span class="line"><span class="comment">#  username: "xxxxx"</span></span><br><span class="line"><span class="comment">#  password: "xxxxx</span></span><br><span class="line"><span class="comment">#  host: "smtp.163.com"</span></span><br><span class="line"><span class="comment">#  列举qq  ，qq设置比较复杂，需要在邮箱--&gt;账户--&gt;开启smtp服务，取得授权码==邮箱登录密码</span></span><br><span class="line"><span class="comment">#  email: "xxx@qq.com"</span></span><br><span class="line"><span class="comment">#  notice_email_list: "123@qq.com"</span></span><br><span class="line"><span class="comment">#  username: "xxxxx"</span></span><br><span class="line"><span class="comment">#  password: "授权码"</span></span><br><span class="line"><span class="comment">#  host: "smtp.qq.com"</span></span><br><span class="line">EMAIL_CONF = &#123;</span><br><span class="line">    <span class="string">"IS_MAIL"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"notice_email_list"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"sjfkf3fg"</span>,</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"smtp.exmail.qq.com"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启 server酱 微信提醒， 使用前需要前往 http://sc.ftqq.com/3.version 扫码绑定获取 SECRET 并关注获得抢票结果通知的公众号</span></span><br><span class="line">SERVER_CHAN_CONF = &#123;</span><br><span class="line">    <span class="string">"is_server_chan"</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">"secret"</span>: <span class="string">"SCU71142T22f940ddgh34f9f369dc6d75e0072465f9e6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启cdn查询，可以更快的检测票票 1为开启，2为关闭</span></span><br><span class="line">IS_CDN = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下单接口分为两种，1 模拟网页自动捡漏下单（不稳定），2 模拟车次后面的购票按钮下单（稳如老狗）</span></span><br><span class="line">ORDER_TYPE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下单模式 1 为预售，整点刷新，刷新间隔0.1-0.5S, 然后会校验时间，比如12点的预售，那脚本就会在12.00整检票，刷新订单</span></span><br><span class="line"><span class="comment">#         2 是捡漏，捡漏的刷新间隔时间为0.5-3秒，时间间隔长，不容易封ip</span></span><br><span class="line">ORDER_MODEL = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启代理, 0代表关闭， 1表示开始</span></span><br><span class="line"><span class="comment"># 开启此功能的时候请确保代理ip是否可用，在测试放里面经过充分的测试，再开启此功能，不然可能会耽误你购票的宝贵时间</span></span><br><span class="line"><span class="comment"># 使用方法：</span></span><br><span class="line"><span class="comment"># 1、在agency/proxy_list列表下填入代理ip</span></span><br><span class="line"><span class="comment"># 2、测试UnitTest/TestAll/testProxy 测试代理是否可以用</span></span><br><span class="line"><span class="comment"># 3、开启代理ip</span></span><br><span class="line">IS_PROXY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预售放票时间, 如果是捡漏模式，可以忽略此操作</span></span><br><span class="line">OPEN_TIME = <span class="string">"12:59:57"</span></span><br><span class="line"><span class="comment"># 1=使用selenium获取devicesID</span></span><br><span class="line"><span class="comment"># 2=使用网页端/otn/HttpZF/logdevice获取devicesId，这个接口的算法目前可能有点问题，如果登录一直302的请改为配置1</span></span><br><span class="line"><span class="comment"># 3=自己打开浏览器在headers-Cookies中抓取RAIL_DEVICEID和RAIL_EXPIRATION，这个就不用配置selenium</span></span><br><span class="line">COOKIE_TYPE = <span class="number">3</span></span><br><span class="line"><span class="comment"># 如果COOKIE_TYPE=1，则需配置chromeDriver路径,下载地址http://chromedriver.storage.googleapis.com/index.html</span></span><br><span class="line"><span class="comment"># chromedriver配置版本只要和chrome的大版本匹配就行</span></span><br><span class="line">CHROME_PATH = <span class="string">"/opt/google/chrome/google-chrome"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了docker37 准备的环境变量，windows环境可以不用管这个参数</span></span><br><span class="line">CHROME_CHROME_PATH = <span class="string">"/opt/google/chrome/google-chrome"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果COOKIE_TYPE=3, 则需配置RAIL_EXPIRATION、RAIL_DEVICEID的值</span></span><br><span class="line">RAIL_EXPIRATION = <span class="string">"1577394287684"</span></span><br><span class="line">RAIL_DEVICEID = <span class="string">"VbwdRQJ8tWqbACs-rCEMSKgU-juNgkqdJQ7j9Nt6KMrrS8RBJotuRdyPyS1WS1fkJY6sw7NDpxkMEL7ScTEGLvytNL_IVT_QKEOT_5tBCs71_WeR3Jp3bwHIBoIieVcrI9yKWPHqR36oXpvq4J1p2BEubXmBricl"</span></span><br><span class="line"><span class="comment"># RAIL_EXPIRATION = "1577034533293"</span></span><br><span class="line"><span class="comment"># RAIL_DEVICEID = "CDno29Erc_Pf3FSXb4dzq-Op64EhWrsi5yUZKVIKR1MAfYo2qFlCeXD8VkexY7_1qg-ClV-fE8j9jgVlPZxRh3wVc54qLe_5A8sdr62qZx4B22JPF8lFCjpgTKZ5ODW90HJd5tiQsJ1KR9nOqHRxHj1FT5LEIwfw"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1=&gt;为一直随机ua,2-&gt;只启动的时候随机一次ua</span></span><br><span class="line">RANDOM_AGENT = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">PASSENGER_TICKER_STR = &#123;</span><br><span class="line">    <span class="string">'一等座'</span>: <span class="string">'M'</span>,</span><br><span class="line">    <span class="string">'特等座'</span>: <span class="string">'P'</span>,</span><br><span class="line">    <span class="string">'二等座'</span>: <span class="string">'O'</span>,</span><br><span class="line">    <span class="string">'商务座'</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">'硬座'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'无座'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'软座'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'软卧'</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">'硬卧'</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保护12306官网请求频率，设置随机请求时间，原则为5分钟不大于80次</span></span><br><span class="line"><span class="comment"># 最大间隔请求时间</span></span><br><span class="line">MAX_TIME = <span class="number">3</span></span><br><span class="line"><span class="comment"># 最小间隔请求时间</span></span><br><span class="line">MIN_TIME = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件版本</span></span><br><span class="line">RE_VERSION = <span class="string">"1.2.004"</span></span><br></pre></td></tr></table></figure></details><details><summary>服务器：候补+刷票+本地打码+捡漏</summary><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding=utf-8 -*-</span></span><br><span class="line"><span class="comment"># 关于软件使用配置说明，一定要看！！！</span></span><br><span class="line"><span class="comment"># ps: 如果是候补车票，需要通过人证一致性核验的用户及激活的“铁路畅行”会员可以提交候补需求，请您按照操作说明在铁路12306app.上完成人证核验</span></span><br><span class="line"><span class="comment"># 关于候补了之后是否还能继续捡漏的问题在此说明： 软件为全自动候补加捡漏，如果软件候补成功则会停止抢票，发出邮件通知，但是不会影响你继续捡漏，</span></span><br><span class="line"><span class="comment"># 如果这个时候捡漏捡到的话，也是可以付款成功的，也就是说，捡漏+候补，可以最大程度提升抢票成功率</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 刷票模式：1=刷票 2=候补+刷票</span></span><br><span class="line">TICKET_TYPE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 出发日期(list) "2018-01-06", "2018-01-07"</span></span><br><span class="line">STATION_DATES = [</span><br><span class="line">    <span class="string">"2020-01-23"</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 填入需要购买的车次(list)，"G1353"</span></span><br><span class="line"><span class="comment"># 修改车次填入规则，注：(以前设置的车次逻辑不变)，如果车次填入为空，那么就是当日乘车所有车次都纳入筛选返回</span></span><br><span class="line"><span class="comment"># 不填车次是整个list为空才算，如果不是为空，依然会判断车次的，这种是错误的写法 [""], 正确的写法 []</span></span><br><span class="line">STATION_TRAINS = [<span class="string">"D2357"</span>,<span class="string">"D6581"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 出发城市，比如深圳北，就填深圳就搜得到</span></span><br><span class="line">FROM_STATION = <span class="string">"赣州"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 到达城市 比如深圳北，就填深圳就搜得到</span></span><br><span class="line">TO_STATION = <span class="string">"于都"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 座位(list) 多个座位ex:</span></span><br><span class="line"><span class="comment"># "商务座",</span></span><br><span class="line"><span class="comment"># "一等座",</span></span><br><span class="line"><span class="comment"># "二等座",</span></span><br><span class="line"><span class="comment"># "特等座",</span></span><br><span class="line"><span class="comment"># "软卧",</span></span><br><span class="line"><span class="comment"># "硬卧",</span></span><br><span class="line"><span class="comment"># "硬座",</span></span><br><span class="line"><span class="comment"># "无座",</span></span><br><span class="line"><span class="comment"># "动卧",</span></span><br><span class="line">SET_TYPE = [<span class="string">"一等座"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当余票小于乘车人，如果选择优先提交，则删减联系人和余票数一致在提交</span></span><br><span class="line"><span class="comment"># bool</span></span><br><span class="line">IS_MORE_TICKET = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘车人(list) 多个乘车人ex:</span></span><br><span class="line"><span class="comment"># "张三",</span></span><br><span class="line"><span class="comment"># "李四"</span></span><br><span class="line">TICKET_PEOPLES = [<span class="string">"张三"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 12306登录账号</span></span><br><span class="line">USER = <span class="string">"teaper"</span></span><br><span class="line">PWD = <span class="string">"zdfvgh5g6"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加入小黑屋时间默认为5分钟，此功能为了防止僵尸票导致一直下单不成功错过正常的票</span></span><br><span class="line">TICKET_BLACK_LIST_TIME = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动打码</span></span><br><span class="line">IS_AUTO_CODE = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置2本地自动打码，需要配置tensorflow和keras库，3为云打码，由于云打码服务器资源有限(为2h4C的cpu服务器)，请不要恶意请求，不然只能关闭服务器</span></span><br><span class="line"><span class="comment"># ps: 请不要一直依赖云服务器资源，在此向所有提供服务器同学表示感谢</span></span><br><span class="line">AUTO_CODE_TYPE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此处设置云打码服务器地址，如果有自建的服务器，可以自行更改</span></span><br><span class="line">HOST = <span class="string">"captcha:80"</span></span><br><span class="line">REQ_URL = <span class="string">"/verify/base64/"</span></span><br><span class="line">HTTP_TYPE = <span class="string">"http"</span></span><br><span class="line"><span class="comment"># HOST="12306.yinaoxiong.cn" #备用服务器稳定性较差</span></span><br><span class="line"><span class="comment"># REQ_URL="/verify/base64/"</span></span><br><span class="line"><span class="comment"># HTTP_TYPE="https"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  邮箱配置，如果抢票成功，将通过邮件配置通知给您</span></span><br><span class="line"><span class="comment">#  列举163</span></span><br><span class="line"><span class="comment">#  email: "xxx@163.com"</span></span><br><span class="line"><span class="comment">#  notice_email_list: "123@qq.com"</span></span><br><span class="line"><span class="comment">#  username: "xxxxx"</span></span><br><span class="line"><span class="comment">#  password: "xxxxx</span></span><br><span class="line"><span class="comment">#  host: "smtp.163.com"</span></span><br><span class="line"><span class="comment">#  列举qq  ，qq设置比较复杂，需要在邮箱--&gt;账户--&gt;开启smtp服务，取得授权码==邮箱登录密码</span></span><br><span class="line"><span class="comment">#  email: "xxx@qq.com"</span></span><br><span class="line"><span class="comment">#  notice_email_list: "123@qq.com"</span></span><br><span class="line"><span class="comment">#  username: "xxxxx"</span></span><br><span class="line"><span class="comment">#  password: "授权码"</span></span><br><span class="line"><span class="comment">#  host: "smtp.qq.com"</span></span><br><span class="line">EMAIL_CONF = &#123;</span><br><span class="line">    <span class="string">"IS_MAIL"</span>: <span class="literal">True</span>,</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"notice_email_list"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"username"</span>: <span class="string">"www@teaper.dev"</span>,</span><br><span class="line">    <span class="string">"password"</span>: <span class="string">"sjfkf3fg"</span>,</span><br><span class="line">    <span class="string">"host"</span>: <span class="string">"smtp.exmail.qq.com"</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启 server酱 微信提醒， 使用前需要前往 http://sc.ftqq.com/3.version 扫码绑定获取 SECRET 并关注获得抢票结果通知的公众号</span></span><br><span class="line">SERVER_CHAN_CONF = &#123;</span><br><span class="line">    <span class="string">"is_server_chan"</span>: <span class="literal">False</span>,</span><br><span class="line">    <span class="string">"secret"</span>: <span class="string">"SCU71142T22f940ddgh34f9f369dc6d75e0072465f9e6"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启cdn查询，可以更快的检测票票 1为开启，2为关闭</span></span><br><span class="line">IS_CDN = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下单接口分为两种，1 模拟网页自动捡漏下单（不稳定），2 模拟车次后面的购票按钮下单（稳如老狗）</span></span><br><span class="line">ORDER_TYPE = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下单模式 1 为预售，整点刷新，刷新间隔0.1-0.5S, 然后会校验时间，比如12点的预售，那脚本就会在12.00整检票，刷新订单</span></span><br><span class="line"><span class="comment">#         2 是捡漏，捡漏的刷新间隔时间为0.5-3秒，时间间隔长，不容易封ip</span></span><br><span class="line">ORDER_MODEL = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否开启代理, 0代表关闭， 1表示开始</span></span><br><span class="line"><span class="comment"># 开启此功能的时候请确保代理ip是否可用，在测试放里面经过充分的测试，再开启此功能，不然可能会耽误你购票的宝贵时间</span></span><br><span class="line"><span class="comment"># 使用方法：</span></span><br><span class="line"><span class="comment"># 1、在agency/proxy_list列表下填入代理ip</span></span><br><span class="line"><span class="comment"># 2、测试UnitTest/TestAll/testProxy 测试代理是否可以用</span></span><br><span class="line"><span class="comment"># 3、开启代理ip</span></span><br><span class="line">IS_PROXY = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预售放票时间, 如果是捡漏模式，可以忽略此操作</span></span><br><span class="line">OPEN_TIME = <span class="string">"12:59:57"</span></span><br><span class="line"><span class="comment"># 1=使用selenium获取devicesID</span></span><br><span class="line"><span class="comment"># 2=使用网页端/otn/HttpZF/logdevice获取devicesId，这个接口的算法目前可能有点问题，如果登录一直302的请改为配置1</span></span><br><span class="line"><span class="comment"># 3=自己打开浏览器在headers-Cookies中抓取RAIL_DEVICEID和RAIL_EXPIRATION，这个就不用配置selenium</span></span><br><span class="line">COOKIE_TYPE = <span class="number">3</span></span><br><span class="line"><span class="comment"># 如果COOKIE_TYPE=1，则需配置chromeDriver路径,下载地址http://chromedriver.storage.googleapis.com/index.html</span></span><br><span class="line"><span class="comment"># chromedriver配置版本只要和chrome的大版本匹配就行</span></span><br><span class="line">CHROME_PATH = <span class="string">"/opt/google/chrome/google-chrome"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为了docker37 准备的环境变量，windows环境可以不用管这个参数</span></span><br><span class="line">CHROME_CHROME_PATH = <span class="string">"/opt/google/chrome/google-chrome"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果COOKIE_TYPE=3, 则需配置RAIL_EXPIRATION、RAIL_DEVICEID的值</span></span><br><span class="line">RAIL_EXPIRATION = <span class="string">"1577394287684"</span></span><br><span class="line">RAIL_DEVICEID = <span class="string">"VbwdRQJ8tWqbACs-rCEMSKgU-juNgkqdJQ7j9Nt6KMrrS8RBJotuRdyPyS1WS1fkJY6sw7NDpxkMEL7ScTEGLvytNL_IVT_QKEOT_5tBCs71_WeR3Jp3bwHIBoIieVcrI9yKWPHqR36oXpvq4J1p2BEubXmBricl"</span></span><br><span class="line"><span class="comment"># RAIL_EXPIRATION = "1577034533293"</span></span><br><span class="line"><span class="comment"># RAIL_DEVICEID = "CDno29Erc_Pf3FSXb4dzq-Op64EhWrsi5yUZKVIKR1MAfYo2qFlCeXD8VkexY7_1qg-ClV-fE8j9jgVlPZxRh3wVc54qLe_5A8sdr62qZx4B22JPF8lFCjpgTKZ5ODW90HJd5tiQsJ1KR9nOqHRxHj1FT5LEIwfw"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1=&gt;为一直随机ua,2-&gt;只启动的时候随机一次ua</span></span><br><span class="line">RANDOM_AGENT = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">PASSENGER_TICKER_STR = &#123;</span><br><span class="line">    <span class="string">'一等座'</span>: <span class="string">'M'</span>,</span><br><span class="line">    <span class="string">'特等座'</span>: <span class="string">'P'</span>,</span><br><span class="line">    <span class="string">'二等座'</span>: <span class="string">'O'</span>,</span><br><span class="line">    <span class="string">'商务座'</span>: <span class="number">9</span>,</span><br><span class="line">    <span class="string">'硬座'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'无座'</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">'软座'</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">'软卧'</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="string">'硬卧'</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保护12306官网请求频率，设置随机请求时间，原则为5分钟不大于80次</span></span><br><span class="line"><span class="comment"># 最大间隔请求时间</span></span><br><span class="line">MAX_TIME = <span class="number">3</span></span><br><span class="line"><span class="comment"># 最小间隔请求时间</span></span><br><span class="line">MIN_TIME = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 软件版本</span></span><br><span class="line">RE_VERSION = <span class="string">"1.2.004"</span></span><br></pre></td></tr></table></figure></details><h5 id="这里重点注意以下地方："><a href="#这里重点注意以下地方：" class="headerlink" title="这里重点注意以下地方："></a>这里重点注意以下地方：</h5><p><strong>刷票模式</strong>：尽量选择第 2 种<code>候补+刷票</code><br><strong>出发时间</strong>：这个就是买的哪天的车<br><strong>购买的车次</strong>：参数是一个集合，可以选则多个车次去抢，增加概率，多个车次的出发城市保持一致，别一个是广州，一个是广州东<br><strong>出发城市</strong>：地名和 12306 保持一致，这没啥好说的<br><strong>到达城市</strong>：地名和 12306 保持一致，这没啥好说的<br><strong>座位</strong>：一般选择<code>硬座</code>，动车选择二等座<br><strong>乘车人</strong>：暂时填一个，别填太多<br><strong>12306登录账号</strong>：12306 账号密码，建议使用浏览器登录一遍，确保正确<br><strong>打码方式</strong>：本地打码 <code>AUTO_CODE_TYPE = 2</code>、<code>HOST = &quot;captcha:80&quot;</code>，云打码 <code>AUTO_CODE_TYPE = 3</code>、<code>HOST = &quot;120.77.154.140:8000&quot;</code>，云打码服务器有限，不是自己搭建的不推荐使用，官方提供的云打码文件，不需要再添加到 12306 项目根目录，里面已经有了<br><strong>邮箱配置</strong>：直接参照它注释中的邮箱，由于我的是域名邮箱，所以我的配置不同<br><strong>server酱</strong>：前往<a href="http://sc.ftqq.com/3.version" rel="external nofollow noopener noreferrer" target="_blank">server酱</a>扫码绑定获取 <code>SECRET</code> 并关注<strong>获得抢票结果通知的公众号</strong><br><strong>下单模式</strong>：预售 <code>RDER_MODEL = 1</code>；捡漏 <code>RDER_MODEL = 2</code>，预售模式记得一定要填写预售时间<br><strong>预售放票时间</strong>：预售模式下，直接用 <code>OPEN_TIME = &quot;12:59:57&quot;</code>，建议时间提前几秒，捡漏模式不做修改<br><strong>COOKIE_TYPE</strong>：一般选择第三个，需配置 <code>RAIL_EXPIRATION</code>、<code>RAIL_DEVICEID</code>  的值  </p><ul><li><strong>RAIL_EXPIRATION</strong>：打开<a href="https://kyfw.12306.cn/otn/leftTicket/init?linktypeid=dc" rel="external nofollow noopener noreferrer" target="_blank">12306</a>并且登录成功后，右击浏览器选择<strong>检查元素</strong>，在 <code>Application</code> -&gt; <code>Cookies</code> -&gt; Name/Value 中可以找到对应的值  </li><li><strong>RAIL_DEVICEID</strong>：获取方式同上  </li></ul><p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1ga94bkpwaqj30v707yjsz.jpg" alt="Screenshot from 2019-12-25 17-55-23.png"> </p><p>填写无误后保存修改后的 <code>TickerConfig.py</code> 文件</p><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><ul><li>开始抢票：<code>docker-compose up --build -d</code></li><li>查看抢票log: <code>docker logs --follow ticket</code></li><li>停止抢票：<code>docker-compose down</code></li></ul><p><span style="color:#ff0000">注意：上面三个命令，一定要在 12306 开源项目的根目录运行</span><br>配置完 <code>TickerConfig.py</code> 文件之后就可以运行<strong>开始抢票</strong>命令了，如果运行日志没报错的话，就可以运行<strong>查看抢票log</strong>命令查看进度，不出意外的话，首先是加入 CDN ,检查 Cookie ，设置打码，登录账号，然后才开始抢票，如果一切顺利的话，日志输出如下</p><details><summary>查看抢票日志</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">当前配置：</span><br><span class="line">出发站：广州东</span><br><span class="line">到达站：赣州</span><br><span class="line">车次: K675,T219</span><br><span class="line">乘车日期：2020-01-20</span><br><span class="line">坐席：硬座</span><br><span class="line">是否有票优先提交：True</span><br><span class="line">乘车人：[<span class="string">'张三'</span>]</span><br><span class="line">刷新间隔: 随机(1-3S)</span><br><span class="line">僵尸票关小黑屋时长: 5</span><br><span class="line">下单接口: 2</span><br><span class="line">下单模式: 2</span><br><span class="line">预售踩点时间:12:59:57</span><br><span class="line">**************************************************</span><br><span class="line">cookie获取中</span><br><span class="line">需要验证码</span><br><span class="line">下载验证码...</span><br><span class="line">下载验证码成功</span><br><span class="line">Corrupt JPEG data: 15 extraneous bytes before marker 0xd9</span><br><span class="line">无需加载模型model.v2.0.h5</span><br><span class="line">题目为[<span class="string">'红酒'</span>]</span><br><span class="line">1 铃铛</span><br><span class="line">2 茶盅</span><br><span class="line">3 红酒</span><br><span class="line">4 手掌印</span><br><span class="line">5 铃铛</span><br><span class="line">6 红酒</span><br><span class="line">7 茶盅</span><br><span class="line">8 路灯</span><br><span class="line">验证码识别坐标为184,77,112,149</span><br><span class="line">184,77,112,149</span><br><span class="line">验证码通过,开始登录..</span><br><span class="line">登录成功</span><br><span class="line">欢迎 肖思成 登录</span><br><span class="line">车次：T3091 出发站：广州东 到达站：赣州 历时：08:14 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：-- 软座：-- 硬座：无 无座：无 预订</span><br><span class="line">车次：Z112 出发站：广州东 到达站：赣州 历时：05:07 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：无 预订</span><br><span class="line">车次：K675 出发站：广州东 到达站：赣州 历时：06:58 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：无 预订</span><br><span class="line">车次：T219 出发站：广州东 到达站：赣州 历时：06:40 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：无 预订</span><br><span class="line">车次：K729 出发站：广州东 到达站：赣州 历时：99:59 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：-- 软座：-- 硬座：-- 无座：-- 列车运行图调整,暂停发售</span><br><span class="line">车次：T170 出发站：广州东 到达站：赣州 历时：05:10 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：无 预订</span><br><span class="line">车次：T155 出发站：广州东 到达站：赣州 历时：06:22 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：9 预订</span><br><span class="line">车次：K795 出发站：广州东 到达站：赣州 历时：07:25 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：有 预订</span><br><span class="line">车次：K85 出发站：广州东 到达站：赣州 历时：06:53 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：1 预订</span><br><span class="line">车次：K210 出发站：广州东 到达站：赣州 历时：04:46 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：无 硬座：无 无座：无 预订</span><br><span class="line">车次：K1666 出发站：广州东 到达站：赣州 历时：08:47 商务/特等座：-- 一等座：-- 二等座：-- 动卧：-- 硬卧：无 软座：-- 硬座：无 无座：有 预订</span><br><span class="line">正在第1次查询 停留时间：2.81 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：925.563 183.134.42.158</span><br><span class="line">广州东-赣州 车次坐席查询为空，查询url: https://kyfw.12306.cn/otn/leftTicket/queryZ?leftTicketDTO.train_date=2020-01-20&amp;leftTicketDTO.from_station=GGQ&amp;leftTicketDTO.to_station=GZG&amp;purpose_codes=ADULT, 可以手动查询是否有票</span><br><span class="line">正在第2次查询 停留时间：1.1 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：18.326 112.47.56.174</span><br><span class="line">正在第3次查询 停留时间：1.12 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：936.732 111.161.122.67</span><br><span class="line">正在第4次查询 停留时间：1.43 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：426.435 112.28.196.251</span><br><span class="line">正在第5次查询 停留时间：1.19 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：526.847 42.81.144.180</span><br><span class="line">正在第6次查询 停留时间：1.53 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：901.608 223.111.18.161</span><br><span class="line">正在第7次查询 停留时间：1.53 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：612.251 116.77.75.147</span><br><span class="line">正在第8次查询 停留时间：1.09 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：797.085 183.134.42.158</span><br><span class="line">正在第9次查询 停留时间：1.42 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：553.276 42.81.144.179</span><br><span class="line">正在第10次查询 停留时间：2.74 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：335.643 14.204.185.123</span><br><span class="line">正在第11次查询 停留时间：1.96 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：463.363 223.86.219.66</span><br></pre></td></tr></table></figure><p>如果抢到票了，将会邮件通知 30 分钟内前去 12306 付款，可以网页，也可以 App 中找未完成订单  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1ga95ddoy3nj30lh05kdgq.jpg" alt="Screenshot from 2019-12-25 18-32-04.png"></p></details><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><details><summary style="color:#ff0000">启动抢票命令直接报 python 代码错误</summary><p>这种一看就是 <code>TickerConfig.py</code> 文件参数配置的有问题，建议检查清楚再运行</p></details><details><summary style="color:#ff0000">抢票 log 一直提示 302 状态码</summary><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">正在第46次查询 停留时间：1.17 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：534.931 113.5.80.33</span><br><span class="line">url: /otn/leftTicket/queryZ?leftTicketDTO.train_date=2020-01-20&amp;leftTicketDTO.from_station=GGQ&amp;leftTicketDTO.to_station=GZG&amp;purpose_codes=ADULT返回参数为空, 接口状态码: 302</span><br><span class="line">广州东-赣州 车次坐席查询为空，查询url: https://kyfw.12306.cn/otn/leftTicket/queryZ?leftTicketDTO.train_date=2020-01-20&amp;leftTicketDTO.from_station=GGQ&amp;leftTicketDTO.to_station=GZG&amp;purpose_codes=ADULT, 可以手动查询是否有票</span><br><span class="line">正在第47次查询 停留时间：2.82 乘车日期: 2020-01-20 车次：K675,T219 下单无票 无候补机会 耗时：597.988 183.222.97.164</span><br><span class="line">url: /otn/leftTicket/queryZ?leftTicketDTO.train_date=2020-01-20&amp;leftTicketDTO.from_station=GGQ&amp;leftTicketDTO.to_station=GZG&amp;purpose_codes=ADULT返回参数为空, 接口状态码: 302</span><br><span class="line">广州东-赣州 车次坐席查询为空，查询url: https://kyfw.12306.cn/otn/leftTicket/queryZ?leftTicketDTO.train_date=2020-01-20&amp;leftTicketDTO.from_station=GGQ&amp;leftTicketDTO.to_station=GZG&amp;purpose_codes=ADULT, 可以手动查询是否有票</span><br></pre></td></tr></table></figure><p>这种情况就是服务器被 12306 识别出刷票，你的请求被转发到了别的地方，建议运行<strong>停止抢票</strong>命令，休息一下，过段时间再启动命令抢票</p></details><details><summary style="color:#ff0000">运行开始抢票命令，有依赖下载失败</summary><p>这种情况一般发生在国内服务器上，如果是本地电脑的话，建议翻下墙，服务器的话，做下代理或换下源，如果还是下载中断之类的，重新运行开始抢票命令，直到依赖下载下来为止<span style="color:#ff0000">（博主本地电脑也中断了好多次）</span></p></details>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> Docker </tag>
            
            <tag> 12306 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>清理 Slack 空间</title>
      <link href="/2019/11/09/slack-delete/"/>
      <url>/2019/11/09/slack-delete/</url>
      
        <content type="html"><![CDATA[<p><a href="https://nut-edu.slack.com/plans?ui_step=27&ui_element=11" rel="external nofollow noopener noreferrer" target="_blank">Slack</a> 免费版工作区存储只有 5GB，一不小心就满了，特别是有大量图文信息发送之后！<br>那么我们通过一个 Python3 脚本来实现批量文件清理，创建一个 <code>slack_delete.py</code> 文件，内容如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">reader = codecs.getreader(<span class="string">"utf-8"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在这里获取 Token 信息: https://api.slack.com/custom-integrations/legacy-tokens</span></span><br><span class="line">token = <span class="string">''</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置它仅删除该用户的文件。 如果您不是管理员，则非常方便。</span></span><br><span class="line">member_id= <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件列表的参数。 此处提供更多信息： https://api.slack.com/methods/files.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除早于此的文件：</span></span><br><span class="line">days = <span class="number">30</span></span><br><span class="line">ts_to = int(time.time()) - days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多少？（最大值为1000，否则默认为100）</span></span><br><span class="line">count = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要删除的文件类型，all 是全部</span></span><br><span class="line">types = <span class="string">'all'</span></span><br><span class="line"><span class="comment"># types = 'spaces,snippets,images,gdocs,zips,pdfs'</span></span><br><span class="line"><span class="comment"># types = 'zips'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_files</span><span class="params">(user= <span class="string">''</span>)</span>:</span></span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">'token'</span>: token,</span><br><span class="line">        <span class="string">'ts_to'</span>: ts_to,</span><br><span class="line">        <span class="string">'count'</span>: count,</span><br><span class="line">        <span class="string">'types'</span>: types,</span><br><span class="line">        <span class="string">'user'</span>: user,</span><br><span class="line">    &#125;</span><br><span class="line">    uri = <span class="string">'https://slack.com/api/files.list'</span></span><br><span class="line">    response = reader(urlopen(uri + <span class="string">'?'</span> + urlencode(params)))</span><br><span class="line">    <span class="keyword">return</span> json.load(response)[<span class="string">'files'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">greater_mb</span><span class="params">(file, mb)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> file[<span class="string">'size'</span>] / <span class="number">1000000</span> &gt;= mb</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">smaller_mb</span><span class="params">(file, mb)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> file[<span class="string">'size'</span>] / <span class="number">1000000</span> &lt; mb</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filter_by_size</span><span class="params">(files, greater_or_smaller, mb)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [file <span class="keyword">for</span> file <span class="keyword">in</span> files <span class="keyword">if</span> greater_or_smaller(file, mb)]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">info</span><span class="params">(file)</span>:</span></span><br><span class="line">    order = [<span class="string">'Title'</span>, <span class="string">'Name'</span>, <span class="string">'Created'</span>, <span class="string">'Size'</span>, <span class="string">'Filetype'</span>,</span><br><span class="line">             <span class="string">'Comment'</span>, <span class="string">'Permalink'</span>, <span class="string">'Download'</span>, <span class="string">'User'</span>, <span class="string">'Channels'</span>]</span><br><span class="line">    info = &#123;</span><br><span class="line">        <span class="string">'Title'</span>: file[<span class="string">'title'</span>],</span><br><span class="line">        <span class="string">'Name'</span>: file[<span class="string">'name'</span>],</span><br><span class="line">        <span class="string">'Created'</span>: datetime.datetime.utcfromtimestamp(file[<span class="string">'created'</span>]).strftime(<span class="string">'%B %d, %Y %H:%M:%S'</span>),</span><br><span class="line">        <span class="string">'Size'</span>: str(file[<span class="string">'size'</span>] / <span class="number">1000000</span>) + <span class="string">' MB'</span>,</span><br><span class="line">        <span class="string">'Filetype'</span>: file[<span class="string">'filetype'</span>],</span><br><span class="line">        <span class="string">'Comment'</span>: file[<span class="string">'initial_comment'</span>] <span class="keyword">if</span> <span class="string">'initial_comment'</span> <span class="keyword">in</span> file <span class="keyword">else</span> <span class="string">''</span>,</span><br><span class="line">        <span class="string">'Permalink'</span>: file[<span class="string">'permalink'</span>],</span><br><span class="line">        <span class="string">'Download'</span>: file[<span class="string">'url_private'</span>],</span><br><span class="line">        <span class="string">'User'</span>: file[<span class="string">'user'</span>],</span><br><span class="line">        <span class="string">'Channels'</span>: file[<span class="string">'channels'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> OrderedDict((key, info[key]) <span class="keyword">for</span> key <span class="keyword">in</span> order)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_files</span><span class="params">(files)</span>:</span></span><br><span class="line">    num_files = len(files)</span><br><span class="line">    file_ids = map(<span class="keyword">lambda</span> f: f[<span class="string">'id'</span>], files)</span><br><span class="line">    print(<span class="string">'Deleting %i files'</span>%num_files)</span><br><span class="line">    <span class="keyword">for</span> index, file_id <span class="keyword">in</span> enumerate(file_ids):</span><br><span class="line">        params = &#123;</span><br><span class="line">            <span class="string">'token'</span>: token,</span><br><span class="line">            <span class="string">'file'</span>: file_id</span><br><span class="line">        &#125;</span><br><span class="line">        uri = <span class="string">'https://slack.com/api/files.delete'</span></span><br><span class="line">        response = reader(urlopen(uri + <span class="string">'?'</span> + urlencode(params)))</span><br><span class="line">        print((index + <span class="number">1</span>, <span class="string">"of"</span>, num_files, <span class="string">"-"</span>,</span><br><span class="line">               file_id, json.load(response)[<span class="string">'ok'</span>]))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Retrieving files older than %s days'</span>%(days))   </span><br><span class="line">   </span><br><span class="line">files = list_files(member_id)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Total %i files'</span>%len(files))</span><br><span class="line"></span><br><span class="line">files = filter_by_size(files, greater_mb, <span class="number">50</span>)   <span class="comment">#匹配 50 M的文件</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'Match size %i files'</span>%len(files))</span><br><span class="line"></span><br><span class="line"><span class="comment">#delete_files(files)  # 已注释掉，因此您不会意外运行它</span></span><br></pre></td></tr></table></figure><p>这个脚本直接是不能的，需要修改一些参数，首先是 Slack 工作区的令牌，在 <a href="https://api.slack.com/custom-integrations/legacy-tokens" rel="external nofollow noopener noreferrer" target="_blank">https://api.slack.com/custom-integrations/legacy-tokens</a> 中创建一个 <code>Token</code>，复制过来，粘贴到脚本里</p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g7mk6m8jvhj30hw05xt93.jpg" alt>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">token = <span class="string">'xoxp-613920254549-603568988866-784157202429-b1cc470bc0a1d54248687a87dbb6a7ac'</span></span><br></pre></td></tr></table></figure><p>设置删除多少天之前的文件，默认 30 天之前  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">days = 30</span><br></pre></td></tr></table></figure><p>选择要删除的类型，一般就是 <code>All</code> 全部，当然还有 <code>spaces</code>、<code>snippets</code>、<code>images</code>、<code>gdocs</code>、<code>zips</code>、<code>pdfs</code> 这些类型，我主要是清理图文信息，所以基本是清理图片，那就选择 <code>images</code>  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">types = <span class="string">'images'</span></span><br></pre></td></tr></table></figure><p>匹配的要删除的文件大小是多大，默认 50 M 以上  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">files = filter_by_size(files, greater_mb, 0)       <span class="comment">#建议改成 0</span></span><br></pre></td></tr></table></figure><p>然后就是运行此脚本了，由于我是工作区所有者，所以我可以删除我和其他人的图片，如果你不是管理员，那就只能删除自己文件<br>我是 Linux 系统，默认 Python 3 的版本，所以直接用命令运行脚本即可，Windows 用户请看<a href="http://stackoverflow.com/a/1527012/662761" rel="external nofollow noopener noreferrer" target="_blank">【运行python代码的指南】</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">python3 slack_delete.py     <span class="comment">#运行命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------输出日志------------------</span></span><br><span class="line">Retrieving files older than 30 days  <span class="comment">#检索超过30天的文件</span></span><br><span class="line">Total 73 files      <span class="comment">#共4个文件</span></span><br><span class="line">Match size 73 files     <span class="comment">#匹配大73个文件</span></span><br><span class="line">Deleting 73 files       <span class="comment">#删除73个文件</span></span><br><span class="line">(1, <span class="string">'of'</span>, 73, <span class="string">'-'</span>, <span class="string">'FQ77N7YHK'</span>, True)</span><br><span class="line">(2, <span class="string">'of'</span>, 73, <span class="string">'-'</span>, <span class="string">'FQ8RCPV8V'</span>, True)</span><br><span class="line">(3, <span class="string">'of'</span>, 73, <span class="string">'-'</span>, <span class="string">'FQ94SHE3H'</span>, True)</span><br><span class="line">(4, <span class="string">'of'</span>, 73, <span class="string">'-'</span>, <span class="string">'FPQBV1G93'</span>, True)</span><br><span class="line">(5, <span class="string">'of'</span>, 73, <span class="string">'-'</span>, <span class="string">'FQ5PXFMP1'</span>, True)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>确认无误之后，取消最后一行的注释，再运行一下脚本</p>]]></content>
      
      
      <categories>
          
          <category> Slack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Slack </tag>
            
            <tag> Python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为 Slack 工作区添加自动邀请</title>
      <link href="/2019/11/09/slack-Slackipy/"/>
      <url>/2019/11/09/slack-Slackipy/</url>
      
        <content type="html"><![CDATA[<p><a href="https://slack.com/intl/en-cn/" rel="external nofollow noopener noreferrer" target="_blank">Slack</a> 是国外一个非常有名的团队协作神器，国内的钉钉，企业微信都或多或少受其启发。有不少开发朋友都知道 <a href="https://telegram.org/" rel="external nofollow noopener noreferrer" target="_blank">Telegram</a>，我也加入了不少优秀的电报群，由于电报群没有人数限制，不像 QQ 群最高两千人，而且匿名聊天，随来随走，世界通用，不少电报群少则千人，多则万人；技术氛围比某些培育机构 QQ 群好太多，很容易见到技术大佬！</p><p>但是电报群不适合团队协作，顶多作为一个极致的交流工具，而不能作为协作工具</p><ul><li>Telegram 需要翻墙才能访问，这就阻止了大部分初级开发人员</li><li>Telegram 需要搭建很多机器人才能实现诸如打卡、订阅、监控、投票等功能</li><li>Telegram 没有群空间，不能存放文件、素材等</li><li>Telegram 无法让开发人员、运维人员、产品经理等各不同职位的人协作</li></ul><p>但是这些 Slack 都可以做到，有很多大学的社团是建立在 QQ 群、微信群上的，一个活动一个群，几十个群下去看不到头，群成员不知道其他群的存在，每次都需要管理员去拉人，效率之低，令人乍舌！  </p><p>那么有了 Slack，QQ、微信就可以丢了，安全性和 Telegram 一样高、也不用担心聊天记录像 QQ、微信一样被监管，没有群成员上限、而且拥有比 Telegram 更优秀的机器人集成，基本国外大部分工具都可以使用，还能监控 github 的团队项目、甚至持续集成服务器状态！</p><p>Slack 作为国外的软件，我个人觉得有两个问题不太友好</p><ul><li>界面是英文的，英文不好的朋友比较抵触，但是多看几遍就熟悉了</li><li>团队工具，想加入需要通过邮箱联系工作区所有者，然后管理者发送邀请链接，这就限制了只能在交友圈使用</li></ul><h4 id="那么我们要解决的就是第二个问题"><a href="#那么我们要解决的就是第二个问题" class="headerlink" title="那么我们要解决的就是第二个问题"></a>那么我们要解决的就是第二个问题</h4><p><a href="https://github.com/avinassh/slackipy" rel="external nofollow noopener noreferrer" target="_blank">Slackipy</a> 是一个小型 Web 服务器，可帮助您自动执行对 Slack 团队的用户邀请，让其可以像电报群一样自愿加入，不需要每次向管理员提供邮箱，然后管理员去邀请</p><p><strong>第一步：</strong> 注册并且登录 <a href="https://dashboard.heroku.com/apps" rel="external nofollow noopener noreferrer" target="_blank">Heroku</a> 平台，新用户会显示 <code>Create new app</code>，在这里创建 <code>Slackipy</code> App 是免费的  </p><p><strong>第二步：</strong> 打开 <code>github</code> 上的 <a href="https://github.com/avinassh/slackipy" rel="external nofollow noopener noreferrer" target="_blank">Slackipy</a> 项目，在它的 <code>README.md</code> 文件中有搭建方法，我么就使用最简单的 <code>Heroku</code> 方式，点击 <code>README.md</code> 中的这个图标  </p><p><a href="https://heroku.com/deploy?template=https://github.com/avinassh/slackipy/tree/master" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://camo.githubusercontent.com/83b0e95b38892b49184e07ad572c94c8038323fb/68747470733a2f2f7777772e6865726f6b7563646e2e636f6d2f6465706c6f792f627574746f6e2e737667" alt></a></p><p>会自动跳转到已经登录的 <code>Heroku</code> 用户页面，并且打开一个创建 <code>app</code> 页面，需要填写以下信息：</p><ul><li><strong>App name：</strong> 搭建的项目名称，一般用工作区的名字，搭建成功会作为 <code>herokuapp.com</code> 的二级域名前缀（示例：<code>nut-edu</code>）</li><li><strong>FLASK_SECRET_KEY：</strong> 任意长度字符串，随便输入几十个26字母配合数字即可</li><li><strong>SLACK_API_TOKEN：</strong> Slack 工作区的令牌，在 <a href="https://api.slack.com/custom-integrations/legacy-tokens" rel="external nofollow noopener noreferrer" target="_blank">https://api.slack.com/custom-integrations/legacy-tokens</a> 中创建一个 <code>Token</code>，复制过来</li></ul><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g7mk6m8jvhj30hw05xt93.jpg" alt="Screenshot from 2019-10-04 22-55-21.png"><br><span style="color:#ff0000">注意：创建 Token 成功之后，会在工作区的 App Manage 中出现一个名字为 <code>Slack API Tester</code> 的 App，注意删除 App 的时候不要把它删除了，否则 Token 也会自动被删除</span></p><ul><li><strong>SLACK_TEAM_ID：</strong> 你的 Slack 工作区名称（示例：<code>nut-edu</code>）</li></ul><p>输入完成单击 <code>Deploy app</code> 开始安装，安装完成点击 <code>view</code> 按钮打开页面 <a href="https://nut-edu.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">https://nut-edu.herokuapp.com/</a> 观察效果  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g8rx3n4j12j30ok0bf3z0.jpg" alt="Screenshot from 2019-11-09 17-30-36.png"></p><p>出现页面之后就可以把<a href="https://nut-edu.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">链接</a>分享给其他人，想进入工作区的，只需要在 <a href="https://nut-edu.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank">https://nut-edu.herokuapp.com/</a> 填入邮箱，然后填入的邮箱会收到验证信息，点击验证信息中的链接，新建密码、确认密码，就可以一并注册 Slack 账号并加入工作区！  </p><blockquote><p>如果想加入我们打卡学习编程的朋友，欢迎点击下图加入我们的 Slack 工作区</p></blockquote><p><a href="https://nut-edu.herokuapp.com/" rel="external nofollow noopener noreferrer" target="_blank"><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g8rx6cd76cj31hc0u0ajf.jpg" alt="Screenshot from 2019-11-09 16-50-26.png"></a></p><p>建议 Slack 移动端 APP 和<a href>电脑版客户端</a>一起食用，更爽！</p>]]></content>
      
      
      <categories>
          
          <category> Slack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Slack </tag>
            
            <tag> Slackipy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IntelliJ IDEA 完美配置</title>
      <link href="/2019/08/18/ideasettings/"/>
      <url>/2019/08/18/ideasettings/</url>
      
        <content type="html"><![CDATA[<p>IntelliJ IDEA 官网提供了两个版本，完整版（Ultimate）和社区版（Community）；其中完整版需要付费，社区版免费，但是功能被阉割，我这里就以<span style="color:#B900ff;"> ArchLinux 完整版 </span>为例，对其进行<a href="https://www.jetbrains.com/help/idea/installation-guide.html" rel="external nofollow noopener noreferrer" target="_blank">配置</a>  </p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>Windows/Mac 用户直接进入<a href="https://www.jetbrains.com/idea/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>下载安装包进行安装<br>ArchLinux/Manjaro 用户使用<a href="https://aur.archlinux.org/packages/intellij-idea-ultimate-edition/" rel="external nofollow noopener noreferrer" target="_blank">AUR</a>源安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S intellij-idea-ultimate-edition    <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：安装之前，Java 运行环境是预先配置好的，这个我就不累赘了，重点将放在 IntelliJ IDEA 的配置上</span>  </p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>下载成功之后执行运行程序，会进入安装页面<br>点击 <code>next</code> 下一步，选择 <code>Do not import settings</code> 单选按钮，点击 <code>ok</code><br>阅读条款，将滑块拉到最下面，点击 <code>Accept</code> 接受<br>选择你喜欢的 UI 主题，点击 <code>Next:Desktop Entry</code><br>选择启动方式，点击 <code>Next:Launcher Script</code><br>自定义一个路径，一般默认即可，点击 <code>Next:Default plugins</code><br>然后会进入一个功能选择界面，去勾选你需要的功能模块  </p><ul><li><strong>Java Frameworks</strong>：Hibernate、Spring、Struts、JavaEE、Velocity</li><li><strong>Build Tools</strong>：Maven</li><li><strong>Web Developent</strong>：HTML、JavaScript、CSS</li><li><strong>Version Controls</strong>：Git、GitHub</li><li><strong>Test Tools</strong>：JUnit</li><li><strong>Application Servers</strong>：Tomcat and TomEE</li><li><strong>Clouds</strong>：DisableAll (一个都不勾)</li><li><strong>Swing</strong>：Disable</li><li><strong>Android</strong>：Disable</li><li><strong>Other Tools</strong>：UML</li></ul><p>选择完记得重新点开确认一遍，有时候它会自己改回去，确认之后点击 <code>Next:Featured plugins</code><br>等待安装完成就可以点击 <code>Start using IntelliJ IDEA</code> 启动啦！  </p><h4 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h4><p>启动之后，如果是完整版，会提示需要许可协议，我的建议是去淘宝买一个号，一年才 15 元<span style="color:#ff0099;">（+微信：wobupeilianai）</span>，而且软件更新不用担心破解失效，大学生的话可以通过校园邮箱去申请，有点麻烦！  </p><p>不舍得花钱的，就只能通过 <a href="http://idea.lanyus.com/" rel="external nofollow noopener noreferrer" target="_blank">idea.lanyus.com</a> 去获取一个破解码  </p><blockquote><p>注意：激活前清除hosts中屏蔽域名, 激活后请将“0.0.0.0 account.jetbrains.com”及“0.0.0.0 <a href="http://www.jetbrains.com”添加到hosts文件中" rel="external nofollow noopener noreferrer" target="_blank">www.jetbrains.com”添加到hosts文件中</a></p></blockquote><h4 id="配置编辑器"><a href="#配置编辑器" class="headerlink" title="配置编辑器"></a>配置编辑器</h4><p>安装成功之后我们可以启动一下，随便创建个项目，打开之后会发现它的字体不太好看，然后我个人喜欢<a href="https://github.com/ChrisRM/material-theme-jetbrains" rel="external nofollow noopener noreferrer" target="_blank">material-theme-jetbrains</a>的 UI 主题，安装方式也很简单   </p><p>在菜单 File -&gt; Settings -&gt; Plugin 中输入 <code>theme ui</code>，找到 <code>Material Theme UI Plugin</code> 进行安装即可  </p><ul><li>Appearance&amp;Behavior -&gt; Material Theme：选择 <code>Atom one Dark</code> 或者其他主题</li><li>Appearance&amp;Behavior -&gt; Appearance：字体（<strong>Open sans</strong>），字号<strong>15</strong>，勾选 <strong>show memory indicator</strong> 显示内存使用情况</li><li>Editor -&gt; Font：字体（<strong>MonoSpaced</strong>），字号<strong>15</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Color Scheme -&gt; Color Scheme Font：字体（<strong>MonoSpaced</strong>），字号<strong>15</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Color Scheme -&gt; Console Font：字体（<strong>MonoSpaced</strong>），字号<strong>13</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Code Style -&gt; Java 中，选中 Wrapping and Braces 选项卡，在 Keep when reformatting 中勾选 <strong>Ensure rigth margin is not exceeded</strong> 实现代码自动换行</li><li>Editor -&gt; General -&gt; Auto Import 勾选 <strong>Add unambiguous imports on the fly</strong> 和 <strong>Optimize imports on the fly</strong> 实现自动导包和组织包结构</li><li>Editor -&gt; General -&gt; Code Completion 中，取消勾选 <strong>Match case</strong> 实现代码提示不区分大小写</li><li>Editor -&gt; General -&gt; Appearance 中勾选 <strong>Show line numbers</strong> 复选框显示行号</li><li>Editor –&gt; General –&gt; Editor Tabs 中勾选 <strong>Mark modified(×)</strong>  复选框，可以将修改过的文件标星，取消勾选 <strong>Show tabs in one row</strong> 实现多行 Tab</li><li>File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Compiler 中勾选 <code>Builder project automatically</code> 复选框，组合键 <code>Shift+Ctrl+Alt+/</code>，选择 <code>Registry</code> ，勾选 <code>compiler.automake.allow.when.app.running</code> 。可以解决静态资源更新需要重启项目的问题</li></ul><p>UI 主题选择 File -&gt; Settings -&gt; Plugins，MarketPlace 选项卡，搜 Material Theme UI 安装即可或者使用<a href="https://blog.jetbrains.com/idea/2019/03/brighten-up-your-day-add-color-to-intellij-idea/" rel="external nofollow noopener noreferrer" target="_blank">自定义 UI 主题 Gray</a> <span style="color:#E98B2A">（也可以在 Plugins 选项卡点击右边设置 -&gt; Install plugin from disk -&gt; 你下载的 jar 包文件）</span></p><p><span style="color:#ff0000;">注意：上面的 MonoSpaced 字体是个人安装的，Windows 用户没有可以想办法去下载，或者换成别的字体也可以，这里就仁者见仁智者见智了</span>  </p><h4 id="注释模板"><a href="#注释模板" class="headerlink" title="注释模板"></a>注释模板</h4><p>IDEA 自带的注释模板不是太好用，所以需要我们自己配置一下<br>打开 File -&gt; settings -&gt; Editor -&gt; File and Code Templates -&gt; File 选项卡，可以看到所有常用的文件模板，先介绍几个配置参数  </p><ul><li><span style="color:#2EA9DF;">${NAME}</span>：获取类名</li><li><span style="color:#2EA9DF;">${USER}</span>：获取系统用户名</li><li><span style="color:#2EA9DF;">${DATE}</span>：获取创建日期</li><li><span style="color:#2EA9DF;">${TIME}</span>：获取创建时间</li><li><span style="color:#2EA9DF;">${PROJECT_NAME}</span>：获取项目名</li><li><span style="color:#2EA9DF;">TODO</span>：代办事项的标记，一般生成类或方法都需要添加描述</li></ul><p>将 Class 文件和 Interface 文件，替换以下模板  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#if ($&#123;PACKAGE_NAME&#125; &amp;&amp; $&#123;PACKAGE_NAME&#125; != &quot;&quot;)package $&#123;PACKAGE_NAME&#125;;#end</span><br><span class="line">#parse(&quot;File Header.java&quot;)</span><br><span class="line">/**</span><br><span class="line">  * Copyright(C) $&#123;DATE&#125; $&#123;TIME&#125; 广州××网络科技有限公司 Inc.ALL Rights Reserved.</span><br><span class="line">  *</span><br><span class="line">  * @ClassName $&#123;NAME&#125;</span><br><span class="line">  * @Description TODO</span><br><span class="line">  * @Author $&#123;USER&#125;</span><br><span class="line">  * @Date $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line">  * @Version v1.0</span><br><span class="line">  */</span><br><span class="line">public class $&#123;NAME&#125; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="jdk-版本"><a href="#jdk-版本" class="headerlink" title="jdk 版本"></a>jdk 版本</h4><p>点击 File -&gt; Other Settings -&gt; Structure for New Projects 菜单，在弹出的窗口中的 <span style="color:#ff0000;"><no sdk></no></span> 中选择你要用的 jdk 版本  </p><p>如果没有可选项，可以在下面一个 <code>SDKs</code> 选项卡点击 <code>+</code> 手动添加  </p><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p>这个是刚需，也就是说，只有你打开 java Web 项目的时候需要去单独给某个项目配置服务器。点击右上角工具栏的 <code>Edit Configurations...</code> 下拉菜单，在弹出的窗口中点击左上角 <code>+</code> 号，选择 Tomcat Server -&gt; Local 即可，然后配置基本信息，一般用默认的即可  </p><h4 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h4><p>电脑安装好 Maven 后，在 File -&gt; Settings -&gt; Build,Execution,Deployment -&gt; Build Tools -&gt; Maven 下设置 Maven 配置文件位置和本地仓库地址，由于我是使用默认地址，所以 User settings file 是 <code>/home/teaper/.m2/settings.xml</code>；Local repository 地址是 <code>/home/teaper/.m2/repository</code>   </p><p><span style="color:#ff0000;">注意：这里的 <code>teaper</code> 是我的系统用户名，<code>/home/teaper</code> 就是我的主页目录，也就是 Linux中的 <code>~/</code> 目录，<code>.m2</code> 是 Maven 的隐藏目录</span>  </p><blockquote><p><span style="color:#0089A7;">常见问题：在使用 Maven 的部署项目的过程中，当我们修改 pom.xml 文件，导致没有自动导入 jar 包，或 jar 包出现错误</span>  </p></blockquote><p>解决方案如下：</p><ul><li>手动删除 File -&gt; Project Structure… -&gt; Project Settings -&gt; Libraries 中的内容  </li><li>在右侧的 Maven Project 的试图里 clean 一下，删除之前编译过的文件  </li><li>项目右键 -&gt; Maven -&gt; Reimport，不出意外，此时发现依赖已经建立  </li></ul><h4 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h4><p>对于从 Eclipse 转 IDEA 的用户，第一不适应的就是原来使用的 Eclipse 快捷键都不能正常使用，所以可以在 File -&gt; Settings -&gt; Keymap 选项卡中，在 Keymap 下拉列表中选择 <code>Eclipse</code> ，然后会有一些快捷键冲突，需要在 Keymap 选项卡里的列表中设置一下  </p><ul><li>Keymap -&gt; Main menu -&gt; Code -&gt; Completion -&gt; Basic 修改为 <strong>Ctrl+Alt+Enter</strong>  </li><li>Keymap -&gt; Main menu -&gt; Edit -&gt; Find 修改 Find… 和 Replace… 分别改为 <strong>Ctrl+F</strong> 和 <strong>Ctrl+R</strong></li><li>Keymap -&gt; Editor Actions -&gt; Complete Current Statement 修改为 <strong>Ctrl+</strong></li></ul><p>保存时把冲突的快捷键 Remove 掉即可。当然，最好还是使用原汁原味的，多使用，多看看，总会熟悉的   </p><h4 id="配置浏览器"><a href="#配置浏览器" class="headerlink" title="配置浏览器"></a>配置浏览器</h4><p><strong>谷歌浏览器</strong>  </p><ul><li>在 chrome 地址栏输入 <code>chrome://version/</code> 回车，找到页面中的 <code>Command Line    ：</code> 对应的启动脚本地址 <code>/opt/google/chrome/google-chrome</code> ，将其复制</li><li>点击 IDEA 菜单 File -&gt; Settings -&gt; Tools -&gt; Web Browsers 选项卡中，将上面的地址粘到 path 栏中  </li></ul><p><strong>火狐浏览器</strong></p><ul><li>使用 <code>gedit /usr/share/applications/firefox.desktop</code> 命令编辑火狐浏览器快捷方式，找到里面的 Exec 对应的启动地址 <code>/usr/lib/firefox/firefox</code> ，将其复制</li><li>同上，粘贴到 火狐浏览器的 path 栏中即可</li></ul><p><strong>欧朋浏览器</strong>  </p><ul><li>欧朋浏览器至于要安装了即可，path 栏默认 <code>opera</code> 即可</li></ul><h4 id="配置-git-amp-github"><a href="#配置-git-amp-github" class="headerlink" title="配置 git &amp; github"></a>配置 git &amp; github</h4><p>在 File -&gt; settings -&gt; Version Control -&gt; git 选项卡中点击 <code>Test</code> 按钮确定git可用，然后在下面一个 github 选项卡中登录你自己的账号  </p><p><span style="color:#F94465;">如何从github导入工程项目到 IDEA中？</span><br>点击 File -&gt; New -&gt; Project from version control -&gt; git 菜单，在弹出的询问框中输入 github 项目的 URL 地址，选择 <code>New Windows</code> 新窗口打开项目  </p><h4 id="配置-DTD-文件"><a href="#配置-DTD-文件" class="headerlink" title="配置 DTD 文件"></a>配置 DTD 文件</h4><p>用过 MyBatis 的用户都知道，创建 xml 太麻烦，所以需要一个好用的模板来帮助我们快速开发，那么 IDEA 中如何配置 MyBatis 的 DTD 呢？  </p><p>在 File -&gt; settings -&gt; Languages &amp; Frameworks -&gt; Schemas and DTDs 选项卡中，点击右上角的 <code>+</code> 添加以下两个 DTD 文件，File 地址可以通过双击 Project Schemas 中的对应 <code>.dtd</code> 文件自动设置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># config.xml 文件</span></span><br><span class="line">URI：http://mybatis.org/dtd/mybatis-3-config.dtd</span><br><span class="line"></span><br><span class="line"><span class="comment"># mapper.xml 文件</span></span><br><span class="line">URI：http://mybatis.org/dtd/mybatis-3-mapper.dtd</span><br></pre></td></tr></table></figure><h4 id="Lombok-插件"><a href="#Lombok-插件" class="headerlink" title="Lombok 插件"></a>Lombok 插件</h4><p>这个<a href="https://github.com/mplushnikov/lombok-intellij-plugin" rel="external nofollow noopener noreferrer" target="_blank">插件</a>是用注解来简化我们频繁的 get、set 操作的，在 File -&gt; Settings -&gt; Plugins 窗口中直接搜 <code>lombok</code>，点击 <code>install</code> 安装即可  </p><p>首先引入 jar 包 <code>lombok-plugin-xxxx.jar</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用以下注解：</p><ul><li><strong>@Data</strong>：注解在类上，将类提供的所有属性都添加 <code>get</code>、<code>set</code> 方法，并添加 <code>equals</code>、<code>canEquals</code>、<code>hashCode</code>、<code>toString</code> 方法</li><li><strong>@Setter</strong>：注解在类上，为所有属性添加 <code>set</code> 方法、注解在属性上为该属性提供 <code>set</code> 方法</li><li><strong>@Getter</strong>：注解在类上，为所有的属性添加 <code>get</code> 方法、注解在属性上为该属性提供 <code>get</code> 方法</li><li><strong>@NotNull</strong>：在参数中使用时，如果调用时传了 <code>null</code> 值，就会抛出空指针异常</li><li><strong>@Synchronized</strong>：用于方法，可以锁定指定的对象，如果不指定，则默认创建一个对象锁定</li><li><strong>@Log</strong>：作用于类，创建一个 <code>log</code> 属性</li><li><strong>@Builder</strong>：使用builder模式创建对象</li><li><strong>@NoArgsConstructor</strong>：创建一个无参构造函数</li><li><strong>@AllArgsConstructor</strong>：创建一个全参构造函数,替代 <code>@Autowired</code> 构造注入,多个 <code>bean</code> 注入时更加清晰</li><li><strong>@ToString</strong>：创建一个toString方法</li><li><strong>@Accessors(chain = true)</strong>：使用链式设置属性，set方法返回的是this对象</li><li><strong>@RequiredArgsConstructor</strong>：创建对象。例：在class上添加 <code>@RequiredArgsConstructor(staticName = &quot;of&quot;)</code> 会创建生成一个静态方法</li><li><strong>@UtilityClass</strong>:工具类再也不用定义static的方法了，直接就可以Class.Method 使用</li><li><strong>@ExtensionMethod</strong>:设置父类</li><li><strong>@FieldDefaults</strong>：设置属性的使用范围，如private、public等，也可以设置属性是否被final修饰</li><li><strong>@SneakyThrows</strong></li><li><strong>@EqualsAndHashCode</strong>：重写equals和hashcode方法</li><li><strong>@Cleanup</strong>: 清理流对象,不用手动去关闭流</li></ul><h4 id="阿里巴巴代码规范插件"><a href="#阿里巴巴代码规范插件" class="headerlink" title="阿里巴巴代码规范插件"></a>阿里巴巴代码规范插件</h4><p>这个插件是用来规范我们的代码格式的，格式不符合规范会出现中文提示，在 File -&gt; Settings -&gt; Plugins 窗口中直接搜 <code>Alibaba Java Coding Guidelines</code>，点击 install 安装即可<br><span style="color:#ff0000">注意：如果无法搜索到插件，建议在 Plugins 窗口右上角齿轮图标上配置 HTTP Proxy ,至于如何翻墙，请参照我另一篇博客<a href="https://www.teaper.dev/2019/06/02/v2ray/">学习利器V2ray了解一下</a></span>  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/Screenshot%20from%202020-01-07%2010-15-47.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VPS主机搭建Telegram机器人</title>
      <link href="/2019/07/16/telegrambots/"/>
      <url>/2019/07/16/telegrambots/</url>
      
        <content type="html"><![CDATA[<p>之前我搭建过 SSR / V2ray ，在 <a href="https://my.vultr.com/" rel="external nofollow noopener noreferrer" target="_blank">vultr</a> 还有一个VPS主机闲置着，刚好最近想搞个 <a href="https://telegram.org/" rel="external nofollow noopener noreferrer" target="_blank">Telegram</a> 机器人，思来想去，还是决创建个 <a href="https://zh.wikipedia.org/zh/RSS" rel="external nofollow noopener noreferrer" target="_blank">RSS</a> 订阅的机器人，帮助订阅网络专栏，顺便同步到电报群里!  </p><blockquote><p>如果还不了解RSS，推荐——<a href="http://www.ruanyifeng.com/blog/2006/01/rss.html" rel="external nofollow noopener noreferrer" target="_blank">【如何使用RSS - 阮一峰的网络日志】</a>  </p></blockquote><h4 id="BotFather"><a href="#BotFather" class="headerlink" title="BotFather"></a>BotFather</h4><p>Telegram 中管理所有机器人的用户叫 <code>BotFather</code> ，它本质也是一个机器人，我们通过它创建子机器人，以及配置机器人信息和 API 接口等，所以首先需要找到它  </p><p>在 Telegram 搜索框搜 <code>@BotFather</code> 会查询出相关的用户，选择第一个带官方星号的  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g517i12g03j30ai0azmy3.jpg" alt>  </p><p>在聊天窗口，输入 <code>/newbot</code> 按回车发送消息，会提示输入机器人名称<span style="color:#ff0000">（名称可以中文）</span>，我这里是 <code>rssBot</code> ，之后会提示输入机器人用户名<span style="color:#ff0000">（用户名只能英文，并且没有被人使用，必须以 Bot结尾）</span>，我这里是 <code>teaperRssBot</code> ，本来想用 <code>rssBot</code> ，被人使用了，之后会出现一段机器人相关信息，点击蓝色的 <a href="http://t.me/teaperRssBot" rel="external nofollow noopener noreferrer" target="_blank">t.me/teaperRssBot</a> 可以打开机器人聊天界面  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g517tim9mtj30y70h9jvi.jpg" alt>  </p><p>其中的 <code>809357392:AAFdLHw96jES6BEgljDgc0t-lbkHona5qZs</code> 是 <code>token</code> 信息，记得保存好，不要透露给别人<span style="color:#ff0000">（像博主这样不打码是要打屁股的）</span>，之后会用到  </p><h4 id="配置机器人"><a href="#配置机器人" class="headerlink" title="配置机器人"></a>配置机器人</h4><p>输入 <code>/mybots</code> 会列出你所有的机器人，我只有一个，所以直接跳过，进入 <code>teaperRssBot</code> 设置  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g517zgdittj30y708p75h.jpg" alt>  </p><p>出现六个按钮，我简单说明一下  </p><blockquote><p>Edit Name：设置机器人名称，例如修改为 <code>白素贞</code> ，直接点击按钮，输入名称回车即可<br>Edit Description：设置机器人说明<br>Edit About：设置关于机器人，会显示在机器账号简介中<br>Edit Botpic：设置机器人头像，图片最好是正方形的，需要通过截图/复制图片的方式复制到剪贴板，然后粘贴到输入框中发送才可以<br>Edit Commands：设置机器人命令，可以显示在输入框里，如下图所示  </p></blockquote><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g518casj8yj30xm069gm7.jpg" alt>  </p><p>除了最后一个 <code>Edit Commands</code> 之外，前面四个都可以现在设置  </p><h4 id="搭建RssBot"><a href="#搭建RssBot" class="headerlink" title="搭建RssBot"></a>搭建RssBot</h4><p>使用 <code>ssh</code> 登录 VPS 服务器  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@139.180.166.23     <span class="comment">#登录服务器</span></span><br></pre></td></tr></table></figure><p>登录成功创建一个 RSS 文件夹，用于存放相关脚本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir rss &amp;&amp; <span class="built_in">cd</span> rss     <span class="comment">#创建并进入rss文件夹</span></span><br></pre></td></tr></table></figure><p>浏览器进入 <a href="https://github.com/iovxw/rssbot/releases" rel="external nofollow noopener noreferrer" target="_blank">RssBot 发布页</a>查看最新版本的 ZIP 压缩包，使用 <code>wget</code> 下载  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/iovxw/rssbot/releases/download/v1.4.4/rssbot-v1.4.4-linux.zip   <span class="comment">#下载压缩包</span></span><br><span class="line">unzip rssbot-v1.4.4-linux.zip   <span class="comment">#解压缩到当前文件夹</span></span><br><span class="line">./rssbot DATAFILE TELEGRAM-BOT-TOKEN  <span class="comment">#测试运行</span></span><br></pre></td></tr></table></figure><p>最后一条测试运行命令的 <code>TELEGRAM-BOT-TOKEN</code> 替换成电报机器人的 <strong>token</strong> ，也就是上面的 <code>809357392:AAFdLHw96jES6BEgljDgc0t-lbkHona5qZs</code> ，完整命令如下：  </p><blockquote><p> ./rssbot DATAFILE 809357392:AAFdLHw96jES6BEgljDgc0t-lbkHona5qZs  </p></blockquote><p>测试运行看不到日志输出的，不用担心，回到电报用户 <code>@BotFather</code> 聊天框，设置 <code>@teapeRssBot</code> 的命令，点击 <code>Edit Commands</code> 按钮，将下方命令粘贴到输入框回车即可  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rss       - 显示当前订阅的 RSS 列表，加 raw 参数显示链接</span><br><span class="line">sub       - 订阅一个 RSS: /sub http://example.com/feed.xml</span><br><span class="line">unsub     - 退订一个 RSS: /unsub http://example.com/feed.xml</span><br><span class="line">unsubthis - 使用此命令回复想要退订的 RSS 消息即可退订, 不支持 Channel</span><br><span class="line"><span class="built_in">export</span>    - 导出为 OPML</span><br></pre></td></tr></table></figure><p>这时候，你再进入 <a href="http://t.me/teaperRssBot" rel="external nofollow noopener noreferrer" target="_blank">t.me/teaperRssBot</a> 的聊天框，就可以看到输入框有快捷命令了，我们可以发送命令进行订阅  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sub https://rsshub.app/bilibili/live/room/15053080     #链接地址是RSS地址，不是普通网址</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g518zc0x0sj30xs08hgn5.jpg" alt>  </p><p>确定没有问题之后，我们在服务器中将脚本挂到后台去运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup ./rssbot DATAFILE TELEGRAM-BOT-TOKEN &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h4 id="添加到群组"><a href="#添加到群组" class="headerlink" title="添加到群组"></a>添加到群组</h4><p>这个很简单，直接在电报机器人主页中，点击 <code>添加到群组</code> 按钮，选择一个群组即可  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g5196h6f4lj31hc0sen8q.jpg" alt>  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g51987bblvj31hc0sfgxw.jpg" alt>  </p>]]></content>
      
      
      <categories>
          
          <category> Telegram </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VPS </tag>
            
            <tag> Telegram </tag>
            
            <tag> RSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux系统如何直播哔哩哔哩</title>
      <link href="/2019/07/09/bilibilizhibo/"/>
      <url>/2019/07/09/bilibilizhibo/</url>
      
        <content type="html"><![CDATA[<p>Linux下直播，一般都使用开源免费的直播工具<a href="https://obsproject.com/" rel="external nofollow noopener noreferrer" target="_blank">OBS</a>，因为<a href="https://www.bilibili.com/" rel="external nofollow noopener noreferrer" target="_blank">哔哩哔哩</a>官方的直播姬没有Linux版本  </p><p>但是我发现B站居然有Linux版本的<a href="http://bilibili.danmaku.live/#/" rel="external nofollow noopener noreferrer" target="_blank">弹幕库</a>，目前已经更新到了<code>v2.1.1</code>，之前要使用弹幕，都是借助类似于 <code>YouTube Live Chat</code> 的开源工具 <a href="https://github.com/Tsuk1ko/bilibili-live-chat" rel="external nofollow noopener noreferrer" target="_blank">bilibili-live-chat</a> 来实现的，具体使用方法参照博客——<a href="https://moe.best/projects/bilibili-live-chat.html" rel="external nofollow noopener noreferrer" target="_blank">【OBS用B站直播弹幕展示】</a>  </p><p>为什么这里要提到<code>bilibili-live-chat</code>呢？<br>主要是因为哔哩哔哩弹幕库并不是一个成熟的应用，功能还不全面，并且它的弹幕展示还借助了<code>bilibili-live-chat</code>的思路，使用OBS浏览器插件 <code>BrowserSource</code> 去获取弹幕信息，爬取出来进行展示  </p><p>废话不多说，ArchLinux/Manjaro用户睁大眼睛哦～  </p><h4 id="安装OBS-Studio"><a href="#安装OBS-Studio" class="headerlink" title="安装OBS Studio"></a>安装OBS Studio</h4><p><img src="https://obsproject.com/assets/images/OBSDemoApp2321.png" alt>  </p><p>使用以下命令安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S obs-studio    <span class="comment">#OBS</span></span><br></pre></td></tr></table></figure><p>启动后，obs 会根据你电脑性能自动配置出一套默认设置，我们直播主要是推流，所以和视频录制有所区别，需要适当修改一下  </p><ul><li>进入 file -&gt; settings 打开设置面板，点击左边列表的 Output 选项卡  </li><li>设置 Video Bitrate 比特率为 5000 <ul><li>录制视频的话，比特率可以高一些，设置为 5000 ，这样视频清晰度会比较高  </li><li>直播的话，比特率等于网络上行速度(单位KB/s)乘以 8 ，并且最终结果要小于用户的下行网速，否则观众姥爷那边会比较卡，除此之外，最大也不要超过<a href="https://link.bilibili.com/p/help/index#/device-setting" rel="external nofollow noopener noreferrer" target="_blank">哔哩哔哩平台</a>服务器的带宽，否则一样会造成卡顿</li></ul></li></ul><h4 id="直播比特率-上行KB-s-×-8-lt-用户下行-lt-平台带宽"><a href="#直播比特率-上行KB-s-×-8-lt-用户下行-lt-平台带宽" class="headerlink" title="直播比特率 = (上行KB/s × 8) &lt; 用户下行 &lt; 平台带宽"></a><center>直播比特率 = (上行KB/s × 8) &lt; 用户下行 &lt; 平台带宽</center></h4><ul><li>Encoder选择带 NVENC 的N卡驱动  </li><li>勾选 Enable Advanced Encoder Settings 复选框  </li><li>点击左边列表的 Video 选项卡,设置Output(Scaled)Resolution输出像素为1920×1080  </li></ul><details><summary style="color:#ff0000;">常见问题：OBS 录制屏幕黑屏，但是可以看见鼠标</summary><p>首先使用终端，输入 <code>obs</code> 命令进行启动，如果第一行日志显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.</span><br></pre></td></tr></table></figure><p>那么输入以下命令，检查你目前使用的是 <code>x11</code> 还是 <code>wayland</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$XDG_SESSION_TYPE</span></span><br></pre></td></tr></table></figure><p>如果是 <code>wayland</code> 的话，那么我们的问题是一致的，编辑 <code>/etc/gdm/custom.conf</code> 文件，取消 <code>WaylandEnable=false</code> 的注释，将强制启动使用 <code>xorg</code> 作为窗口显示</p></details>  <p>接下来就是安装哔哩哔哩官方的<a href="http://bilibili.danmaku.live/#/" rel="external nofollow noopener noreferrer" target="_blank">弹幕库</a>  </p><h4 id="安装弹幕库"><a href="#安装弹幕库" class="headerlink" title="安装弹幕库"></a>安装弹幕库</h4><p><img src="https://s5.danmaku.live/web/sample.png" alt>  </p><p>点击<a href="http://bilibili.danmaku.live/#/" rel="external nofollow noopener noreferrer" target="_blank">链接</a>进入下载，我这里的版本是<code>v2.1.1</code>，下载之后解压到本地文件夹，目录结构如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── blink_image_resources_200_percent.pak</span><br><span class="line">├── content_resources_200_percent.pak</span><br><span class="line">├── content_shell.pak</span><br><span class="line">├── icudtl.dat</span><br><span class="line">├── libffmpeg.so</span><br><span class="line">├── libnode.so</span><br><span class="line">├── LICENSE</span><br><span class="line">├── LICENSES.chromium.html</span><br><span class="line">├── locales</span><br><span class="line">│   ├── am.pak</span><br><span class="line">│   ├── ar.pak</span><br><span class="line">│   ├── bg.pak</span><br><span class="line">│   ├── bn.pak</span><br><span class="line">│   ├── ca.pak</span><br><span class="line">│   ├── cs.pak</span><br><span class="line">│   ├── da.pak</span><br><span class="line">│   ├── de.pak</span><br><span class="line">│   ├── el.pak</span><br><span class="line">│   ├── en-GB.pak</span><br><span class="line">│   ├── en-US.pak</span><br><span class="line">│   ├── es-419.pak</span><br><span class="line">│   ├── es.pak</span><br><span class="line">│   ├── et.pak</span><br><span class="line">│   ├── fake-bidi.pak</span><br><span class="line">│   ├── fa.pak</span><br><span class="line">│   ├── fil.pak</span><br><span class="line">│   ├── fi.pak</span><br><span class="line">│   ├── fr.pak</span><br><span class="line">│   ├── gu.pak</span><br><span class="line">│   ├── he.pak</span><br><span class="line">│   ├── hi.pak</span><br><span class="line">│   ├── hr.pak</span><br><span class="line">│   ├── hu.pak</span><br><span class="line">│   ├── id.pak</span><br><span class="line">│   ├── it.pak</span><br><span class="line">│   ├── ja.pak</span><br><span class="line">│   ├── kn.pak</span><br><span class="line">│   ├── ko.pak</span><br><span class="line">│   ├── lt.pak</span><br><span class="line">│   ├── lv.pak</span><br><span class="line">│   ├── ml.pak</span><br><span class="line">│   ├── mr.pak</span><br><span class="line">│   ├── ms.pak</span><br><span class="line">│   ├── nb.pak</span><br><span class="line">│   ├── nl.pak</span><br><span class="line">│   ├── pl.pak</span><br><span class="line">│   ├── pt-BR.pak</span><br><span class="line">│   ├── pt-PT.pak</span><br><span class="line">│   ├── ro.pak</span><br><span class="line">│   ├── ru.pak</span><br><span class="line">│   ├── sk.pak</span><br><span class="line">│   ├── sl.pak</span><br><span class="line">│   ├── sr.pak</span><br><span class="line">│   ├── sv.pak</span><br><span class="line">│   ├── sw.pak</span><br><span class="line">│   ├── ta.pak</span><br><span class="line">│   ├── te.pak</span><br><span class="line">│   ├── th.pak</span><br><span class="line">│   ├── tr.pak</span><br><span class="line">│   ├── uk.pak</span><br><span class="line">│   ├── vi.pak</span><br><span class="line">│   ├── zh-CN.pak</span><br><span class="line">│   └── zh-TW.pak</span><br><span class="line">├── natives_blob.bin</span><br><span class="line">├── resources</span><br><span class="line">│   ├── app.asar</span><br><span class="line">│   └── electron.asar</span><br><span class="line">├── ui_resources_200_percent.pak</span><br><span class="line">├── v8_context_snapshot.bin</span><br><span class="line">├── version</span><br><span class="line">├── views_resources_200_percent.pak</span><br><span class="line">└── 弹幕库      <span class="comment">#启动脚本</span></span><br></pre></td></tr></table></figure><p>右击启动脚本<code>弹幕库</code>就可以启动软件了，但是，我们发现它的文件夹名字和启动脚本的名字是中文，为了不引起路径错误，我们重命名一下  </p><blockquote><p>文件夹名：<code>弹幕库-linux-x64</code> 改成 <code>bilibilidanmuku-linux-x64</code><br>启动脚本：<code>弹幕库</code> 改成 <code>danmuku</code>  </p></blockquote><p>修改完之后，将文件夹移动到<code>/opt</code>目录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mv bilibilidanmuku-linux-x64 /opt</span><br><span class="line"><span class="built_in">cd</span> /opt/bilibilidanmuku-linux-x64</span><br></pre></td></tr></table></figure><p>由于没有快捷方式，我们手动创建一个，图标<a href="https://i.loli.net/2019/11/21/MZA3mrQsW8OwNYo.png" rel="external nofollow noopener noreferrer" target="_blank">danmuku.png</a>点击链接下载到文件夹中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit danmuku.desktop  <span class="comment">#创建快捷方式，内容如下</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Bilibili Danmuku</span><br><span class="line">Comment=BiliBili live assistant</span><br><span class="line">Exec=/opt/bilibilidanmuku-linux-x64/danmuku</span><br><span class="line">Icon=/opt/bilibilidanmuku-linux-x64/danmuku.png</span><br><span class="line">Categories=Application;</span><br><span class="line">Version=2.1.1</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=0</span><br></pre></td></tr></table></figure><p>添加运行权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x danmuku.desktop  <span class="comment">#添加运行权限</span></span><br><span class="line">sudo cp danmuku.desktop /usr/share/applications/  <span class="comment">#复制到快捷方式文件夹</span></span><br></pre></td></tr></table></figure><p>至此，OBS 和弹幕库都安装好了，可以正常直播，但是无法发送弹幕，以及接受弹幕到屏幕上，根据弹幕库的提示，我们需要在OBS中添加浏览器源(BrowserSource)  </p><blockquote><p>使用说明: 在OBS中添加浏览器源(BrowserSource) 复制上方链接填写在URL中 宽度高度可根据需要自行设置（不要在预览视图中拖拽缩放浏览器源的宽高） FPS建议60 (不超过推流FPS) CSS保持默认</p></blockquote><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g4t5czdrjkj30qp0gqgp6.jpg" alt>  </p><p>但是，Linux 平台下并没有 <code>BrowserSource</code> 这个 OBS 插件，并且在我们安装的 OBS 来源中也找不到选项，参考 OBS 官网的帮助之后，我瞄上了另一个插件<a href="https://github.com/bazukas/obs-linuxbrowser/releases" rel="external nofollow noopener noreferrer" target="_blank">obs-linuxbrowser</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yay -S obs-linuxbrowser     <span class="comment">#ArchLinux直接安装社区包</span></span><br><span class="line">:: There are 2 providers available <span class="keyword">for</span> obs-linuxbrowser:</span><br><span class="line">:: Repository AUR</span><br><span class="line">    1) obs-linuxbrowser 2) obs-linuxbrowser-bin </span><br><span class="line"></span><br><span class="line">Enter a number (default=1): 2</span><br></pre></td></tr></table></figure><p>这里有两个版本，并且在社区最近都有更新，我一开始是选择第一个，下载成功，编译成功，安装却失败了<br>后来我使用第二个<code>obs-linuxbrowser-bin</code>完美安装，安装之后，重启 OBS 就可以添加来源了，将弹幕库中提供的链接配置进去，其他的都可以不需要改  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g4t5p52j0hj30tw0jo3zw.jpg" alt>  </p><p>最后就可以开播测试了，我的效果如下  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g4t5s99uu1j31hc0u04qp.jpg" alt> </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArchLinux </tag>
            
            <tag> 哔哩哔哩 </tag>
            
            <tag> obs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis框架</title>
      <link href="/2019/06/30/mybatis/"/>
      <url>/2019/06/30/mybatis/</url>
      
        <content type="html"><![CDATA[<h4 id="前身"><a href="#前身" class="headerlink" title="前身"></a>前身</h4><p>iBatis,Apache的一个开源框架;实体类和SQL语句之间建立映射关系  </p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>基于SQL语法,简单易学<br>开放源码,了解底层封装过程<br>SQL语句封装在配置文件中,便于统一管理与维护,降低程序耦合度<br>方便程序代码调试  </p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>与JDBC相比,减少50%以上代码量<br>最简单的持久化框架,小巧并简单易学<br>SQL代码从程序中分离,可重用<br>提供XML标签,支持编写动态SQL<br>提供映射标签,支持对象与数据库的ORM字段关系映射  </p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>SQL语句编写量大,对开发人员有一定要求<br>数据库移植性差  </p><h4 id="使用Mybatis的开发步骤"><a href="#使用Mybatis的开发步骤" class="headerlink" title="使用Mybatis的开发步骤"></a>使用Mybatis的开发步骤</h4><p><a href="https://github.com/mybatis/mybatis-3/releases" rel="external nofollow noopener noreferrer" target="_blank">下载</a>mybatis的jar包<br>编写MyBatis核心配置文件(configuration.xml)<br>创建实体类(pojo)<br>DAO层-SQL映射文件(mapper.xml)<br>创建测试类  </p><ul><li>读取全局配置文件mybatis-config.xml  </li><li>创建sqlSessionFactory对象,读取文件  </li><li>创建SqlSession对象  </li><li>调用mapper文件进行数据操作  </li></ul><h4 id="MyBatis架包"><a href="#MyBatis架包" class="headerlink" title="MyBatis架包"></a>MyBatis架包</h4><p>示例:mybatis-3.4.6</p><table><thead><tr><th>架包</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://mvnrepository.com/artifact/org.ow2.asm/asm" rel="external nofollow noopener noreferrer" target="_blank">asm-5.2.jar</a></td><td>操作Java字节码的类库</td></tr><tr><td><a href="https://mvnrepository.com/artifact/cglib/cglib" rel="external nofollow noopener noreferrer" target="_blank">cglib-3.2.5.jar</a></td><td>动态集成java类或实现接口</td></tr><tr><td><a href="https://mvnrepository.com/artifact/commons-logging/commons-logging" rel="external nofollow noopener noreferrer" target="_blank">commons-logging-1.2.jar</a></td><td>用于通用日志处理</td></tr><tr><td><a href="https://mvnrepository.com/artifact/org.javassist/javassist" rel="external nofollow noopener noreferrer" target="_blank">javassist-3.22.0-GA.jar</a></td><td>分析,编辑和创建Java字节码的类库</td></tr><tr><td><a href="https://mvnrepository.com/artifact/log4j/log4j" rel="external nofollow noopener noreferrer" target="_blank">log4j-1.2.17.jar</a></td><td>日志系统</td></tr><tr><td><a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api" rel="external nofollow noopener noreferrer" target="_blank">log4j-api-2.3.jar</a></td><td>日志系统的封装,对外提供统一的API接口</td></tr><tr><td><a href="https://mvnrepository.com/artifact/org.slf4j/slf4j-log4j12" rel="external nofollow noopener noreferrer" target="_blank">slf4j-log4j12-1.7.25.jar</a></td><td>slf4对log4的相应驱动,完成slf4绑定log4</td></tr></tbody></table><h4 id="导入jar包"><a href="#导入jar包" class="headerlink" title="导入jar包"></a>导入jar包</h4><p>选取jar包导入工程:普通java项目Build Path,web项目放lib文件夹,maven项目配置pom.xml  </p><blockquote><p><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis" rel="external nofollow noopener noreferrer" target="_blank">mybatis-3.4.6.jar</a><br><a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-api" rel="external nofollow noopener noreferrer" target="_blank">log4j-api-2.3.jar</a><br><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java" rel="external nofollow noopener noreferrer" target="_blank">mysql-connector-java-8.0.11.jar</a>  </p></blockquote><h4 id="MyEclipse中mybatis-3-4-6绑定源代码"><a href="#MyEclipse中mybatis-3-4-6绑定源代码" class="headerlink" title="MyEclipse中mybatis-3.4.6绑定源代码"></a>MyEclipse中mybatis-3.4.6绑定源代码</h4><p>右击项目工程中的mybatis-3.4.6.jar -&gt; Properties -&gt; Java Source Attachment -&gt; External File;找到下载的mybatis-3.4.6.zip文件<span style="color:#ff0000;">(maven项目会自动从仓库中绑定源码)<span>  </span></span></p><h4 id="添加DTD模板"><a href="#添加DTD模板" class="headerlink" title="添加DTD模板"></a>添加DTD模板</h4><p>两个文件<code>mybatis-3-config.dtd</code> 和 <code>mybatis-3-mapper.dtd</code> 在 <code>mybatis-3.4.6/mybatis-3.4.6/org/apache/ibatis/builder/xml</code> 文件夹中,将它们拷贝到mybatis-3.4.6目录中;Windows -&gt; Properties,输入xml,选择XML Catalog -&gt; Add,单击File System按钮,选择dtd文件,Key的值,去 <code>mybatis-3.4.6/mybatis-3.4.6.pdf</code> 官方文档最后一章中找,当前版本: <code>-//mybatis.org//DTD Config 3.0//EN</code> 和 <code>-//mybatis.org//DTD Mapper 3.0//EN</code> ,对应config.dtd和mapper.dtd  </p><h4 id="编写mybatis-config-xml"><a href="#编写mybatis-config-xml" class="headerlink" title="编写mybatis-config.xml"></a>编写mybatis-config.xml</h4><p>选择 resources 文件夹,右击新建 xml,选择 <code>XML(Basic Templates)</code>,输入文件名,选择 <code>Create XML file from a DTD file</code> 单选按钮,下一步,选择 <code>Select XML Catalog entry</code>,在列表中找到 <code>-//mybatis.org//DTD Config 3.0//EN</code> ;下一步,勾选最后两项复选框(默认是勾选的),完成!  配置XML的节点是有顺序的,实在不知道其中顺序,可以在 <code>mybatis-config.xml</code> 文件下选择Design视图,右击configuration节点 -&gt; Add Child,指定一个节点插入进去,可以保证节点位置匹配正确  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "mybatis-3-config.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入database.properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- 配置mybatis的log实现Log4j --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 设置别名,mapper.xml中可以直接返回类型名称  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Bill"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Bill"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Provider"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Provider"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Role"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Role"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"User"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.User"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- 配置多套运行环境,environments default指定使用哪一套 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 第一套运行环境(开发) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置JDBC事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源:POOLED(MyBatis自带) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参数匹配database.properties文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">&lt;!-- 第二套运行环境(部署) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"deploy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置JDBC事务管理 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源:POOLED(MyBatis自带) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 参数匹配database.properties文件 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;user&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">&lt;!-- 将mapper文件加入到映射中 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/bill/BillMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/provider/ProviderMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/role/RoleMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/user/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line">     </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>mybatis-config核心配置文件目录结构:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">|configuration <span class="comment">#配置</span></span><br><span class="line">|---properties <span class="comment">#可配置在Java属性文件中</span></span><br><span class="line">|---settings <span class="comment">#修改MyBatis在运行时的行为方式</span></span><br><span class="line">|---typeAliases <span class="comment">#为Java类型命名一个别名(简称),用于Mapper.xml文件的返回类型</span></span><br><span class="line">|---typeHandlers <span class="comment">#类型处理器</span></span><br><span class="line">|---objectFactory <span class="comment">#对象工厂</span></span><br><span class="line">|---plugins <span class="comment">#插件</span></span><br><span class="line">|---environment <span class="comment">#环境</span></span><br><span class="line">|   |---transactionManager <span class="comment">#事务管理器</span></span><br><span class="line">|   |---dataSource <span class="comment">#数据源</span></span><br><span class="line">|---mappers <span class="comment">#映射器</span></span><br></pre></td></tr></table></figure><h4 id="创建POJO实体类"><a href="#创建POJO实体类" class="headerlink" title="创建POJO实体类"></a>创建POJO实体类</h4><details><summary>User类</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.smbms.pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;             <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String userCode;        <span class="comment">//用户编码</span></span><br><span class="line">    <span class="keyword">private</span> String userName;        <span class="comment">//用户名称</span></span><br><span class="line">    <span class="keyword">private</span> String userPassword;    <span class="comment">//用户密码</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;         <span class="comment">//性别</span></span><br><span class="line">    <span class="keyword">private</span> Date birthday;          <span class="comment">//出生日期</span></span><br><span class="line">    <span class="keyword">private</span> String phone;           <span class="comment">//电话</span></span><br><span class="line">    <span class="keyword">private</span> String address;         <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> Integer userRole;       <span class="comment">//用户角色</span></span><br><span class="line">    <span class="keyword">private</span> Integer createdBy;      <span class="comment">//创建者</span></span><br><span class="line">    <span class="keyword">private</span> Date creationDate;      <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer modifyBy;       <span class="comment">//更新者</span></span><br><span class="line">    <span class="keyword">private</span> Date modifyDate;        <span class="comment">//更新时间</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">private</span>  String idPicPath;</span><br><span class="line">    <span class="keyword">private</span> String workPicPath;</span><br><span class="line">    <span class="keyword">private</span> Integer age;<span class="comment">//年龄</span></span><br><span class="line">    <span class="keyword">private</span> String userRoleName;    <span class="comment">//用户角色名称</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserCode</span><span class="params">(String userCode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userCode = userCode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userPassword;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserPassword</span><span class="params">(String userPassword)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGender</span><span class="params">(Integer gender)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPhone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPhone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getUserRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRole;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRole</span><span class="params">(Integer userRole)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRole = userRole;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCreatedBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createdBy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreatedBy</span><span class="params">(Integer createdBy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createdBy = createdBy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreationDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> creationDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreationDate</span><span class="params">(Date creationDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.creationDate = creationDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getModifyBy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyBy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifyBy</span><span class="params">(Integer modifyBy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.modifyBy = modifyBy;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getModifyDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> modifyDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setModifyDate</span><span class="params">(Date modifyDate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.modifyDate = modifyDate;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIdPicPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> idPicPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdPicPath</span><span class="params">(String idPicPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.idPicPath = idPicPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWorkPicPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> workPicPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWorkPicPath</span><span class="params">(String workPicPath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.workPicPath = workPicPath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRoleName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRoleName</span><span class="params">(String userRoleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRoleName = userRoleName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer id, String userCode, String userName, String userPassword, Integer gender, Date birthday,</span></span></span><br><span class="line"><span class="function"><span class="params">            String phone, String address, Integer userRole, Integer createdBy, Date creationDate, Integer modifyBy,</span></span></span><br><span class="line"><span class="function"><span class="params">            Date modifyDate, String idPicPath, String workPicPath, Integer age, String userRoleName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.userCode = userCode;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">        <span class="keyword">this</span>.userPassword = userPassword;</span><br><span class="line">        <span class="keyword">this</span>.gender = gender;</span><br><span class="line">        <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">        <span class="keyword">this</span>.phone = phone;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.userRole = userRole;</span><br><span class="line">        <span class="keyword">this</span>.createdBy = createdBy;</span><br><span class="line">        <span class="keyword">this</span>.creationDate = creationDate;</span><br><span class="line">        <span class="keyword">this</span>.modifyBy = modifyBy;</span><br><span class="line">        <span class="keyword">this</span>.modifyDate = modifyDate;</span><br><span class="line">        <span class="keyword">this</span>.idPicPath = idPicPath;</span><br><span class="line">        <span class="keyword">this</span>.workPicPath = workPicPath;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.userRoleName = userRoleName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><blockquote><p>Get,Set方法及构造方法,使用快捷键<span style="color:#ff0000;">Shift+Alt+S</span><br>Get,Set:选择Generate Getters and Setters…命令,勾选Select All复选框,选择public单选按钮,完成<br>构造方法:选择Generate Constructor using Fields…命令,勾选Select All复选框,选择public单选按钮,完成;再重复一次,勾选Deselect All复选框,完成!那么带参和不带参的构造方法都有了  </p></blockquote><h4 id="DAO层编写Interface接口"><a href="#DAO层编写Interface接口" class="headerlink" title="DAO层编写Interface接口"></a>DAO层编写Interface接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------UserMapper.java-------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.smbms.dao.user;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> cn.smbms.pojo.User;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//无条件查询记录数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="DAO层编写Mapper-xml映射"><a href="#DAO层编写Mapper-xml映射" class="headerlink" title="DAO层编写Mapper.xml映射"></a>DAO层编写Mapper.xml映射</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------UserMapper.xml------------------------------------</span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.smbms.dao.user.UserMapper"</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleName"</span> <span class="attr">property</span>=<span class="string">"roleName"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userPassword"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRole"</span> <span class="attr">property</span>=<span class="string">"userRole"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createdBy"</span> <span class="attr">property</span>=<span class="string">"createdBy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"creationDate"</span> <span class="attr">property</span>=<span class="string">"creationDate"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modifyBy"</span> <span class="attr">property</span>=<span class="string">"modifyBy"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modifyDate"</span> <span class="attr">property</span>=<span class="string">"modifyDate"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"idPicPath"</span> <span class="attr">property</span>=<span class="string">"idPicPath"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"workPicPath"</span> <span class="attr">property</span>=<span class="string">"workPicPath"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRoleName"</span> <span class="attr">property</span>=<span class="string">"userRoleName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">         </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"Count"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">        select count(*) as count from smbms_user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>编写好之后,记得在mybats-config.xml中配置映射  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------mybatis-config.xml----------------------------------------</span><br><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span>?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="string">"mybatis-3-config.dtd"</span> &gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;!-- 已省略其他配置信息 --&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;!-- 将mapper文件加入到映射中 --&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"cn/smbms/dao/user/UserMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="编写测试代码"><a href="#编写测试代码" class="headerlink" title="编写测试代码"></a>编写测试代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------app.java----------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.smbms;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用MyBatis(基础)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger  logger =Logger.getLogger(App.class);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">//使用@Test必须引入junit架包</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String resource=<span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 获取mybatis-config.xml的输入流</span></span><br><span class="line">            InputStream is = Resources.getResourceAsStream(resource);</span><br><span class="line">            <span class="comment">//2 创建SqlSessionFactory对象,完成对配置文件的读取</span></span><br><span class="line">            SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">            <span class="comment">//3 创建sqlSession</span></span><br><span class="line">            sqlSession = factory.openSession();</span><br><span class="line">            <span class="comment">//4 调用mapper文件的namespace和子元素的id来找到相应SQL并且执行,必须将mapper文件引入到mybatis-config.xml中</span></span><br><span class="line">            count = sqlSession.selectOne(<span class="string">"smbms.dao.user.UserMapper.Count"</span>);</span><br><span class="line">            logger.debug(<span class="string">"COUNT等于:----&gt;"</span>+count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>MyBatis的核心接口和类:<br><span style="color:#ff9900;">SqlSessionFactoryBuilder</span>  </p><blockquote><p>用过即丢,其生命周期只存在于方法体内<br>可重用其来创建多个SqlSessionFactory实例<br>负责构建SqlSessionFactory,并提供多个build方法的重载  </p></blockquote><p><span style="color:#ff9900;">SqlSessionFactory</span>  </p><blockquote><p>SqlSessionFactory是每个MyBatis应用的核心<br>作用:创建SqlSession实例<br>作用域:Application<br>生命周期与应用周期相同<br>单例模式:存在与整个应用运行时,并且同时只存在一个对象实例  </p></blockquote><p><span style="color:#ff9900;">SqlSession</span>  </p><blockquote><p>包含了执行SQL所需要的所有方法<br>对应一次数据库会话,会话结束必须关闭<br>线程级别,不能共享  </p></blockquote><p>mybatis-config.xml 系统核心配置文件<br>mapper.xml SQl映射文件  </p><h4 id="优化测试代码"><a href="#优化测试代码" class="headerlink" title="优化测试代码"></a>优化测试代码</h4><p>上面代码中,我们通过获取 <code>mybatis-config.xml</code> 的输入流;创建 <code>SqlSessionFactory</code> 对象,通过 <code>SqlSessionFactoryBuilder().build()</code> 方法创建factory工厂;使用工厂创建创建sqlSession;调用sqlSession的相应方法,还要输入namespace.id路径!  步骤繁琐,代码冗余!我们可以通过创建工具类MyBatisUtil从而简化代码,使其高效可用  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------MyBatisUtil.java--------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.smbms.tools;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory;</span><br><span class="line">    <span class="keyword">static</span>&#123;<span class="comment">//静态代码块,factory只创建一次</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis-config.xml"</span>);</span><br><span class="line">            factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">creataSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> factory.openSession(<span class="keyword">false</span>);<span class="comment">//true为自动提交事务</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeSqlSession</span><span class="params">(SqlSession sqlSession)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> != sqlSession)</span><br><span class="line">            sqlSession.close();<span class="comment">//关闭SqlSession</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>MyBatisUtil中提供了两个静态方法 <code>creataSqlSession()</code> 和 <code>closeSqlSession()</code>;那么我们app.java的代码中就不需要获取mybatis-config.xml的输入流及创建SqlSessionFactory对象了,而是可以直接通过MyBatisUtil.creataSqlSession()方法直接得到sqlSession对象,但是我们还是需要使用指定 <code>namespace.id</code> 路径进行数据查找,如果我们需要使用sqlSession.getMapper()方式,我们需要创建一个接口类,定义一个接口方法去指定Mapper.xml中的id  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.java------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.smbms.dao.user;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> cn.smbms.pojo.User;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询记录数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意:方法名(示例:getCount)必须与UserMapper.xml中的id值一一对应</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------UserMapper.xml------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCount"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(*) as count from smbms_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">--------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>那么就需要把UserMapper.xml这里原来的id=”Count”改为id=”getCount”  </p><p>这样,我们就可以使用MyBatisUtil创建和关闭SqlSession,使用getMapper()方式指定Mapper文件id进行数据查找  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------app.java----------------------------------------</span><br><span class="line"><span class="keyword">package</span> cn.smbms;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//使用MyBatis(进阶)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger  logger =Logger.getLogger(App.class);</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1 创建sqlSession</span></span><br><span class="line">            sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">            <span class="comment">//2 使用getMapper方式,需要先创建interface方法,且interface方法名和mapper.xml中id保持一致</span></span><br><span class="line">            count = sqlSession.getMapper(UserMapper.class).getCount();</span><br><span class="line">            logger.debug(<span class="string">"COUNT等于:----&gt;"</span>+count);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//3 关闭sqlSession对象</span></span><br><span class="line">            MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>mybatis-config.xml目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">|configuration</span><br><span class="line">|---properties</span><br><span class="line">|   |---property</span><br><span class="line">|---settings</span><br><span class="line">|   |---setting</span><br><span class="line">|---typeAliases</span><br><span class="line">|---typeHandlers</span><br><span class="line">|---objectFactory</span><br><span class="line">|---plugins</span><br><span class="line">|---environment</span><br><span class="line">|   |---transactionManager</span><br><span class="line">|   |---dataSource</span><br><span class="line">|---mappers</span><br></pre></td></tr></table></figure><h4 id="properties元素"><a href="#properties元素" class="headerlink" title="properties元素"></a>properties元素</h4><p>作用:描述外部可替代属性,获取属性有两种方法  </p><p>方法一:通过外部指定方式(database.properties)实现配置  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入database.properties文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"database.properties"</span>/&gt;</span></span><br><span class="line"> </span><br><span class="line">......省略其他配置</span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 配置数据源:POOLED(MyBatis自带) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 参数匹配database.properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二:直接配置为XML,实现动态配置  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/smbms?useUnicode=true&amp;characterEncoding=utf-8"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">优先级:方法一 &gt; 方法二</span><br>原因:resource中的属性值会覆盖property元素的值  </p><h4 id="settings元素"><a href="#settings元素" class="headerlink" title="settings元素"></a>settings元素</h4><p>作用:设置一些非常重要的设置选项,用于设置和改变MyBatis运行中的行为  </p><table><thead><tr><th>设置项</th><th>描述</th><th>允许值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>对在此配置下的所有cache进行全局性开/关设置</td><td>ture/false</td><td>ture</td></tr><tr><td>lazyLoadingEnabled</td><td>全局性设置延迟加载,如果设置为false,则所有相关联的都会被初始化加载</td><td>ture/false</td><td>ture</td></tr><tr><td>autoMappingBehavior</td><td>MyBatis对于resultMap自动映射的匹配级别</td><td>NONE/PARTIAL/FULL</td><td>PARTIAL</td></tr><tr><td>…其他省略(共9个)</td><td>…</td><td>…</td><td>…</td></tr></tbody></table><p>配置方式:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="typeAliases元素"><a href="#typeAliases元素" class="headerlink" title="typeAliases元素"></a>typeAliases元素</h4><p>作用:仅仅关联XML配置,简写冗长的Java类名,方便Mapper.xml使用<br>配置方式:<br>方法一:单独指定,适用于少量javabean  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Bill"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Bill"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Provider"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Provider"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Role"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Role"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"User"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二:指定包名,适用大量javabean,别名就是类名  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.smbms.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">如果没有配置,那么在Mapper.xml中,resultType返回类型就需要写长路径</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-------------------UserMapper.xml(未配置)-----------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCount"</span> <span class="attr">resultType</span>=<span class="string">"cn.smbms.pojo.User"</span>&gt;</span></span><br><span class="line">    select * from smbms_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>配置后直接填别名或类名即可  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-------------------UserMapper.xml(已配置)-----------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCount"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from smbms_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="environment元素"><a href="#environment元素" class="headerlink" title="environment元素"></a>environment元素</h4><p>作用:用于配置多套运行环境,将SQl映射到不同数据库;一个environment子元素为一套运行环境,多套运行环境需要在default属性中指定子元素id名称,表示默认使用此运行环境  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 第一套运行环境(开发) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置JDBC事务管理(JDBC/MANAGED) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 第二套运行环境(测试) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    ......省略</span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子元素transactionManager(事务管理):  </p><ul><li>JDBC:使用JDBC提交和回滚功能,依赖于从数据源获得连接来管理事务的生命周期  </li><li>MANAGED:几乎不执行任何操作,它永远不会提交或回滚连接;相反,它允许容器管理事务的整个生命周期  </li></ul><p>子元素dataSource(数据源):  </p><ul><li>作用:使用基本的JDBC数据源接口类配置JDBC连接对象的资源  </li><li>类型:  <ul><li>UNPOOLED:只在每次请求时打开和关闭连接,有点慢,适用于不需要立即连接性能的简单应用程序  </li><li>POOLED:将JDBC Connection对象池化,以避免创建新Connection实例所需的初始连接和身份验证时间,这是并发Web应用程序实现最快响应的流行方法  </li><li>JNDI:此实现旨在与EJB或Application Server等容器一起使用,这些容器可以集中或外部配置DataSource,并在JNDI上下文中对其进行引用</li></ul></li></ul><h4 id="mappers元素"><a href="#mappers元素" class="headerlink" title="mappers元素"></a>mappers元素</h4><p>作用:定义SQL映射语句<br>配置方式:<br>方式一:使用类资源路径  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/smbms/dao/user/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式二:使用完全限定资源定位符（URL）  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式三:使用映射器接口实现类的完全限定类名  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"org.mybatis.builder.AuthorMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方式四:将包内的映射器接口实现全部注册为映射器  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"org.mybatis.builder"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="深入映射文件Mapper-xml"><a href="#深入映射文件Mapper-xml" class="headerlink" title="深入映射文件Mapper.xml"></a>深入映射文件Mapper.xml</h4><p>特点:专注于SQl,功能强大,映射配置却相当简单<br>顶级元素:  </p><ul><li><span style="color:#ff9900;">cache</span> 为给定命名空间配置缓存  </li><li><span style="color:#ff9900;">cache-ref</span> 从另一个命名空间引用缓存配置  </li><li><span style="color:#ff9900;">resultMap</span> 描述如何从数据库结果集加载对象的最复杂和最强大的元素  </li><li><span style="color:#ff9900;">sql</span> 可重用的SQL块，可以被其他语句引用  </li><li><span style="color:#ff9900;">insert</span> 映射的INSERT语句  </li><li><span style="color:#ff9900;">update</span> 映射的UPDATE语句  </li><li><span style="color:#ff9900;">delete</span> 映射的DELETE语句  </li><li><span style="color:#ff9900;">select</span> 映射的SELECT语句  </li></ul><h4 id="seslect元素"><a href="#seslect元素" class="headerlink" title="seslect元素"></a>seslect元素</h4><p>属性:  </p><ul><li>id:命名空间唯一标识符,接口方法与Mapper文件的SQL语句id一一对应  </li><li>parameterType:传入SQL语句的参数类型的完美限定名或别名  <ul><li>基础数据类型:  <ul><li>int,String,Date  </li><li>只能传入一个,通过 <code>#{参数名}</code> 即可获取传入的值  </li></ul></li><li>复杂数据类型:  <ul><li>Java实体类,Map等  </li><li>通过 <code>#{属性名}</code> 或者 <code>#{Map的Key}</code> 即可获取传入的值  </li></ul></li></ul></li><li>resultType:SQl语句返回值类型(类名/别名)  </li></ul><h4 id="单条件查询"><a href="#单条件查询" class="headerlink" title="单条件查询"></a>单条件查询</h4><blockquote><p>示例:根据用户id查询用户信息  </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------Mapper.xml-------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByUserName"</span> <span class="attr">parameterType</span>=<span class="string">"String"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>说明:Mapper.xml中SQl语句拼接String参数,需要使用concat()方式,传参格式为#{},并且参数名称(示例:userName)需要和接口类的方法参数或@Param()值相同  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------UserMapper.java---------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByUserName</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName) <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>说明:@Param()配置参数别名,用于多参数入参,Mapper.xml中可以直接使用#{参数别名}  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------TeatUserMapper.java----------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByUserName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByUserName(<span class="string">"明"</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User user:userlist)&#123;</span><br><span class="line">        logger.debug(user.getAddress()+<span class="string">"\t"</span>+user.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><p><span style="color:#ff0000;">方法一:封装成Map对象进行入参</span>  </p><blockquote><p>示例:根据Map查询用户信息  </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------Mapper.xml-------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByMap"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"Map"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where userName like concat ('%',#&#123;userName&#125;,'%') and userRole=#&#123;userRole&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------UserMapper.java-----------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByMap</span><span class="params">(Map&lt;String,String&gt; userMap)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------TeatUserMapper.java---------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Map&lt;String,String&gt; userMap=<span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    userMap.put(<span class="string">"userName"</span>, <span class="string">"明"</span>);</span><br><span class="line">    userMap.put(<span class="string">"userRole"</span>, <span class="string">"2"</span>);</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByMap(userMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getAddress()+<span class="string">"\t"</span>+_user.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法二:封装成User对象进行入参</span>  </p><blockquote><p>示例:根据封装的用户名称及用户类型查询用户信息  </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------Mapper.xml---------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByUser"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where userName like concat ('%',#&#123;userName&#125;,'%') and userRole=#&#123;userRole&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.java--------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"明"</span>);</span><br><span class="line">    user.setUserRole(<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByUser(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getAddress()+<span class="string">"\t"</span>+_user.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="使用resultMap连表查询"><a href="#使用resultMap连表查询" class="headerlink" title="使用resultMap连表查询"></a>使用resultMap连表查询</h4><blockquote><p>示例:按条件查询用户列表,而用户表有外键userRole字段  </p></blockquote><p><span style="color:#ff0000;">方法一:修改User.java实体类,增加userRoleName属性</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---------------------User.java---------------------</span><br><span class="line"><span class="keyword">private</span> String userRoleName;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserRoleName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> userRoleName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserRoleName</span><span class="params">(String userRoleName)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.userRoleName = userRoleName;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-------------------------UserMapper.java-------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml-------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultType</span>=<span class="string">"User"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r</span><br><span class="line">     where userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">      and userRole=#&#123;userRole&#125; and u.userRole=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"明"</span>);</span><br><span class="line">    user.setUserRole(<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserList(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getAddress()+<span class="string">"\t"</span>+_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRoleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法二:使用resultMap自定义映射结果(推荐)</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------UserMapper.xml-----------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleName"</span> <span class="attr">property</span>=<span class="string">"roleName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRole"</span> <span class="attr">property</span>=<span class="string">"userRole"</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRoleName"</span> <span class="attr">property</span>=<span class="string">"userRoleName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r</span><br><span class="line">     where userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">      and userRole=#&#123;userRole&#125; and u.userRole=r.id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>select属性的返回就不是resultType,而是resultMap,值对应resultMap的id属性<br>其他地方不变,执行方法一中的测试方法testGetUserList()即可  </p><p>resultMap节点属性说明:  </p><ul><li><span style="color:#ff9900;">resultMap</span>:描述如何将结果集映射到Java对象(属性名和字段名不一致的情况下使用)  </li><li><span style="color:#ff9900;">type</span>:pojo类名  </li><li><span style="color:#ff9900;">id</span>:resultMap别名  </li><li><span style="color:#ff9900;">column</span>:数据库字段名  </li><li><span style="color:#ff9900;">property</span>:pojo实体类属性名  </li></ul><p><span style="color:#ff0000;">比较resultType和resultMap</span><br><span style="color:#ff9900;">resultType</span>:直接表示返回类型  </p><ul><li>基础数据类型  </li><li>复杂数据类型  </li></ul><p><span style="color:#ff9900;">resultMap</span>:对外部resultMap的引用  </p><ul><li>应用场景  <ul><li>数据库字段信息与对象属性不一致  </li><li>复杂的联合查询,自由控制映射结果(自由创建和删除result)  </li></ul></li></ul><p><span style="color:#ff0000;">注意:二者不能同时存在,本质上都是Map数据结构</span>  </p><blockquote><p>示例:使用resultMap如何实现自由灵活的控制映射结果,从而达到只对关心的属性进行赋值?  </p></blockquote><p>目前,我们在”方法二:使用resultMap自定义映射结果”中,UserMapper.xml中只有id roleName address userRole userRoleName五个属性  </p><p>在User.java新增年龄字段age,注意:数据库中没有age字段  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-----------------------User.java-------------------------</span><br><span class="line"><span class="keyword">private</span> Integer age;<span class="comment">//新增年龄</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    Integer age = date.getYear()-birthday.getYear();</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------</span><br></pre></td></tr></table></figure><p>再修改测试方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setUserName(<span class="string">"明"</span>);</span><br><span class="line">    user.setUserRole(<span class="number">2</span>);</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserList(user);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        <span class="comment">//新增输出age的值</span></span><br><span class="line">        logger.debug(_user.getAddress()+<span class="string">"\t"</span>+_user.getUserName()+<span class="string">"\t"</span></span><br><span class="line">        +_user.getUserRoleName()+<span class="string">"\t"</span>+_user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>运行结果如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------------运行结果-------------------------------------------------</span><br><span class="line">2018-09-18 15:14:41,361 [main] DEBUG [cn.smbms.test.user.TeatUserMapper] - 北京市东城区前门东大街9号    李明  经理  35</span><br><span class="line">--------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>明明没有在resultMap中配置age,为什么还是会输出呢?这里就要说下resultMap自动映射级别了  </p><p>resultMap自动匹配前提:字段名与属性名一致  </p><p>resultMap的自动映射级别<span style="color:#ff9900;">(autoMappingBehavior)</span>    </p><blockquote><p><span style="color:#ff9900;">PARTIAL(默认)</span>:自动匹配所有属性,有内部嵌套(association,collection)的除外<br><span style="color:#ff9900;">NONE</span>:禁止自动匹配<br><span style="color:#ff9900;">FULL</span>:自动匹配所有  </p></blockquote><p>所以,age我们虽然没匹配,不过在getAge()方法中,birthday属性是数据中有的,通过默认自动映射进去了,从而计算出age的值,如果我们不想让他默认自动映射,就需要去mybatis-config.xml中配置自动映射级别  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------mybatis-config.xml-----------------</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"NONE"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="使用MyBatis增删改查"><a href="#使用MyBatis增删改查" class="headerlink" title="使用MyBatis增删改查"></a>使用MyBatis增删改查</h4><h5 id="insert语句"><a href="#insert语句" class="headerlink" title="insert语句"></a>insert语句</h5><blockquote><p>示例:新增用户信息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------UserMapper.java---------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">--------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------------------UserMapper.xml-------------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"add"</span>  <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    INSERT INTO smbms_user                                                             </span><br><span class="line">    (userCode,userName,userPassword,gender,birthday,phone,address,userRole,createdBy,`creationDate`)</span><br><span class="line">    VALUES(#&#123;userCode&#125;,#&#123;userName&#125;,#&#123;userPassword&#125;,#&#123;gender&#125;,#&#123;birthday&#125;,#&#123;phone&#125;,#&#123;address&#125;,#&#123;userRole&#125;,#&#123;createdBy&#125;,#&#123;creationDate&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserCode(<span class="string">"teaper"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"茶巴"</span>);</span><br><span class="line">        user.setUserPassword(<span class="string">"1234567"</span>);</span><br><span class="line">        Date birthday=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2017-5-6"</span>);</span><br><span class="line">        user.setBirthday(birthday);</span><br><span class="line">        user.setAddress(<span class="string">"测试新增用户"</span>);</span><br><span class="line">        user.setGender(<span class="number">1</span>);</span><br><span class="line">        user.setPhone(<span class="string">"14588345567"</span>);</span><br><span class="line">        user.setUserRole(<span class="number">1</span>);</span><br><span class="line">        user.setCreatedBy(<span class="number">1</span>);</span><br><span class="line">        user.setCreationDate(<span class="keyword">new</span> Date());</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).add(user);</span><br><span class="line">        <span class="comment">//模拟异常,进行回滚</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"是否添加成功------&gt;"</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>上面我们使用了回滚,因为我们在MyBatisUtil.java中开启了事务控制<br>factory.openSession(false); //true为自动提交事务  </p><p>注意:增删改(insert,delete,update)操作数据库时,需要注意两点  </p><blockquote><p>增删改操作返回执行SQL影响的行数(int)<br>insert,delete,update元素中没有resultType属性,只有select才有resultType/resultMap属性  </p></blockquote><h5 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h5><blockquote><p>示例:根据用户ID修改用户信息  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------UserMapper.java---------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">--------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------UserMapper.xml-------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"modify"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    UPDATE smbms_user set userCode=#&#123;userCode&#125;,userName=#&#123;userName&#125;,userPassword=#&#123;userPassword&#125;,gender=#&#123;gender&#125;,</span><br><span class="line">    birthday=#&#123;birthday&#125;,phone=#&#123;phone&#125;,address=#&#123;address&#125;,userRole=#&#123;userRole&#125;,modifyBy=#&#123;modifyBy&#125;,</span><br><span class="line">    modifyDate=#&#123;modifyDate&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">16</span>);</span><br><span class="line">        user.setUserCode(<span class="string">"teaper"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"湘桥月"</span>);</span><br><span class="line">        user.setUserPassword(<span class="string">"1234567"</span>);</span><br><span class="line">        Date birthday=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2017-5-6"</span>);</span><br><span class="line">        user.setBirthday(birthday);</span><br><span class="line">        user.setAddress(<span class="string">"测试修改用户"</span>);</span><br><span class="line">        user.setGender(<span class="number">1</span>);</span><br><span class="line">        user.setPhone(<span class="string">"1458ee45567"</span>);</span><br><span class="line">        user.setUserRole(<span class="number">1</span>);</span><br><span class="line">        user.setModifyBy(<span class="number">1</span>);</span><br><span class="line">        user.setModifyDate(<span class="keyword">new</span> Date());</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).modify(user);</span><br><span class="line">        <span class="comment">//模拟异常,进行回滚</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"是否修改成功------&gt;"</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h5><blockquote><p>示例:根据用户ID删除用户  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------UserMapper.java---------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">--------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------UserMapper.xml-------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"modify"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    UPDATE smbms_user set userCode=#&#123;userCode&#125;,userName=#&#123;userName&#125;,userPassword=#&#123;userPassword&#125;,gender=#&#123;gender&#125;,</span><br><span class="line">    birthday=#&#123;birthday&#125;,phone=#&#123;phone&#125;,address=#&#123;address&#125;,userRole=#&#123;userRole&#125;,modifyBy=#&#123;modifyBy&#125;,</span><br><span class="line">    modifyDate=#&#123;modifyDate&#125; where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">16</span>);</span><br><span class="line">        user.setUserCode(<span class="string">"teaper"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"湘桥月"</span>);</span><br><span class="line">        user.setUserPassword(<span class="string">"1234567"</span>);</span><br><span class="line">        Date birthday=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2017-5-6"</span>);</span><br><span class="line">        user.setBirthday(birthday);</span><br><span class="line">        user.setAddress(<span class="string">"测试修改用户"</span>);</span><br><span class="line">        user.setGender(<span class="number">1</span>);</span><br><span class="line">        user.setPhone(<span class="string">"1458ee45567"</span>);</span><br><span class="line">        user.setUserRole(<span class="number">1</span>);</span><br><span class="line">        user.setModifyBy(<span class="number">1</span>);</span><br><span class="line">        user.setModifyDate(<span class="keyword">new</span> Date());</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).modify(user);</span><br><span class="line">        <span class="comment">//模拟异常,进行回滚</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"是否修改成功------&gt;"</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h5 id="delete语句-1"><a href="#delete语句-1" class="headerlink" title="delete语句"></a>delete语句</h5><p>示例:根据用户ID删除用户  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">----------------------UserMapper.java-------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)<span class="keyword">throws</span> Exception</span>;</span><br><span class="line">--------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----------------UserMapper.xml-------------</span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUserById"</span>&gt;</span></span><br><span class="line">    delete from smbms_user where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">-------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).deleteUserById(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//模拟异常,进行回滚</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"是否删除成功------&gt;"</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="select高级结果映射"><a href="#select高级结果映射" class="headerlink" title="select高级结果映射"></a>select高级结果映射</h4><p><span style="color:#B900ff;">association</span>:<span style="color:#ff0000;">一对一</span>  </p><ul><li>复杂数据类型关联:比如User(从)类中嵌套Role(主)对象  </li><li>内部嵌套  <ul><li>映射一个嵌套JavaBean属性</li></ul></li><li>属性  <ul><li><span style="color:#ff9900;">property</span>:映射数据库列的实体对象的属性  </li><li><span style="color:#ff9900;">javaType</span>:完整Java类名或者别名  </li><li><span style="color:#ff9900;">resultMap</span>:引用外部resultMap  </li></ul></li><li>子元素  <ul><li><span style="color:#ff9900;">id</span>  </li><li><span style="color:#ff9900;">result</span>  <ul><li><span style="color:#ff9900;">property</span>:映射数据库列的实体对象的属性  </li><li><span style="color:#ff9900;">column</span>:数据库列名或者别名  </li></ul></li></ul></li></ul><blockquote><p>示例:根据用户ID查询用户信息(association)  </p></blockquote><p>注释掉userRoleName属性以及它的get,set方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--------------------User.java--------------------------</span><br><span class="line"><span class="comment">//private String userRoleName;    //用户角色名称</span></span><br><span class="line"><span class="comment">//  public String getUserRoleName() &#123;</span></span><br><span class="line"><span class="comment">//      return userRoleName;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//  public void setUserRoleName(String userRoleName) &#123;</span></span><br><span class="line"><span class="comment">//      this.userRoleName = userRoleName;</span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">private</span> Role role; <span class="comment">//添加角色role</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Role <span class="title">getRole</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> role;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------UserMapper.java---------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByRoleId</span><span class="params">(@Param(<span class="string">"userRole"</span>)</span> Integer roleId) <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------UserMapper.xml-------------------------------------------------------------</span><br><span class="line"><span class="comment">&lt;!-- 新增resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userRoleResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRole"</span> <span class="attr">property</span>=<span class="string">"userRole"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增association节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"role"</span> <span class="attr">javaType</span>=<span class="string">"Role"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"a_id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleCode"</span> <span class="attr">property</span>=<span class="string">"roleCode"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleName"</span> <span class="attr">property</span>=<span class="string">"roleName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByRoleId"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select u.* ,r.id,r.roleCode,r.roleName from smbms_user u ,smbms_role r where u.userRole=#&#123;userRole&#125; and u.userRole = r.id  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">                                ----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByRoleId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    Integer roleId=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByRoleId(roleId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getUserName()+<span class="string">"\t"</span>+_user.getRole().getId()+<span class="string">"\t"</span></span><br><span class="line">    +_user.getRole().getRoleCode()+<span class="string">"\t"</span>+_user.getRole().getRoleName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>如果我们希望association的role结果映射可以复用,那么我们可以使用association提供的另一个属性resultMap进行扩展  </p><p>把association中内容抽调出来做个resultMap,通过association的resultMap属性引用  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------------------------UserMapper.xml-------------------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userRoleResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRole"</span> <span class="attr">property</span>=<span class="string">"userRole"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association引用外部resultMap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"role"</span> <span class="attr">javaType</span>=<span class="string">"Role"</span> <span class="attr">resultMap</span>=<span class="string">"roleResult"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把association中内容抽调出来做个resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Role"</span> <span class="attr">id</span>=<span class="string">"roleResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"a_id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleCode"</span> <span class="attr">property</span>=<span class="string">"roleCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleName"</span> <span class="attr">property</span>=<span class="string">"roleName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- select语句不变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByRoleId"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select u.* ,r.id,r.roleCode,r.roleName from smbms_user u ,smbms_role r where u.userRole=#&#123;userRole&#125; and u.userRole = r.id  </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#B900ff;">collection</span>:<span style="color:#ff0000;">一对多</span>  </p><ul><li>复杂类型集合:比如User(主)类中嵌套Address(从)集合类  </li><li>内部嵌套  <ul><li>映射一个嵌套结果集到一个列表  </li></ul></li><li>属性  <ul><li><span style="color:#ff9900;">property</span>:映射数据库列的实体对象的属性  </li><li><span style="color:#ff9900;">fType</span>:完整Java类名或者别名(集合所包括的类型)  </li><li><span style="color:#ff9900;">resultMap</span>:引用外部resultMap  </li></ul></li><li>子元素  </li><li><span style="color:#ff9900;">id</span>  </li><li><span style="color:#ff9900;">result</span>  <ul><li><span style="color:#ff9900;">property</span>:映射数据库列的实体对象的属性  </li><li><span style="color:#ff9900;">column</span>:数据库列名或者别名  </li></ul></li></ul><blockquote><p>示例:获取指定用户的相关信息和地址列表(collection)  </p></blockquote><p>pojo实体类添加Address.java  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">---------------------------Address.java--------------------------</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;             <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String postCode;        <span class="comment">//邮编</span></span><br><span class="line">    <span class="keyword">private</span> String contact;         <span class="comment">//联系人</span></span><br><span class="line">    <span class="keyword">private</span> String addressDesc;     <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> String tel;             <span class="comment">//联系电话</span></span><br><span class="line">    <span class="keyword">private</span> Integer createdBy;      <span class="comment">//创建者</span></span><br><span class="line">    <span class="keyword">private</span> Date creationDate;      <span class="comment">//创建时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer modifyBy;       <span class="comment">//更新者</span></span><br><span class="line">    <span class="keyword">private</span> Date modifyDate;        <span class="comment">//更新时间</span></span><br><span class="line">    <span class="keyword">private</span> Integer userId;         <span class="comment">//用户Id</span></span><br><span class="line">    <span class="comment">//省略getter和setter方法</span></span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">----------------------------User.java----------------------------</span><br><span class="line"><span class="keyword">private</span> List&lt;Address&gt; addressList;<span class="comment">//用户地址列表</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Address&gt; <span class="title">getAddressList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> addressList;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddressList</span><span class="params">(List&lt;Address&gt; addressList)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.addressList = addressList;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.java-----------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAddressListByUserId</span><span class="params">(@Param(<span class="string">"id"</span>)</span>Integer userId)</span>;</span><br><span class="line">------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------MyBatis-config.xml--------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增Address类映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"Address"</span> <span class="attr">type</span>=<span class="string">"cn.smbms.pojo.Address"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------UserMapper.xml---------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userAddressResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增collection节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"addressList"</span> <span class="attr">ofType</span>=<span class="string">"Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"a_id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"postCode"</span> <span class="attr">property</span>=<span class="string">"postCode"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tel"</span> <span class="attr">property</span>=<span class="string">"tel"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"contact"</span> <span class="attr">property</span>=<span class="string">"contact"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"addressDesc"</span> <span class="attr">property</span>=<span class="string">"addressDesc"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAddressListByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"userAddressResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select u.*,a.id as a_id ,a.contact,a.addressDesc,a.postCode,a.tel</span><br><span class="line">    from smbms_user u,smbms_address a where u.id =a.userId and  u.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAddressListByUserId</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    Integer userId=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getAddressListByUserId(userId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getUserName()+<span class="string">"\t"</span>+_user.getUserCode());</span><br><span class="line">        <span class="keyword">for</span>(Address address:_user.getAddressList())&#123;</span><br><span class="line">            logger.debug(address.getId()+<span class="string">"\t"</span>+address.getContact()+<span class="string">"\t"</span>+address.getAddressDesc()</span><br><span class="line">            +<span class="string">"\t"</span>+address.getTel()+<span class="string">"\t"</span>+address.getPostCode());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>同理,如果我们希望collection的Address结果映射可以复用,那么我们可以使用collection提供的resultMap属性进行扩展  </p><p>把collection中内容抽调出来做个resultMap,通过collection的resultMap属性引用  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------UserMapper.xml---------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userAddressResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 新增collection节点 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"addressList"</span> <span class="attr">ofType</span>=<span class="string">"Address"</span> <span class="attr">resultMap</span>=<span class="string">"addressResult"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 把collection中内容抽调出来做个resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"Address"</span> <span class="attr">id</span>=<span class="string">"addressResult"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"a_id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"postCode"</span> <span class="attr">property</span>=<span class="string">"postCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"tel"</span> <span class="attr">property</span>=<span class="string">"tel"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"contact"</span> <span class="attr">property</span>=<span class="string">"contact"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"addressDesc"</span> <span class="attr">property</span>=<span class="string">"addressDesc"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- SQL语句不变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAddressListByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"userAddressResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span>&gt;</span></span><br><span class="line">    select u.*,a.id as a_id ,a.contact,a.addressDesc,a.postCode,a.tel</span><br><span class="line">    from smbms_user u,smbms_address a where u.id =a.userId and  u.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="MyBatis缓存"><a href="#MyBatis缓存" class="headerlink" title="MyBatis缓存"></a>MyBatis缓存</h4><p>一级缓存:基于PerpetualCache(MyBatis自带)的HashMap本地缓存<br>作用范围:session域内(当session被flush/close后,缓存清空)  </p><p>二级缓存:global caching;超出session范围,可以被SqlSession共享  </p><p><span style="color:#ff0000;">注意:一级缓存缓存的是SQL语句,二级缓存缓存的是结果对象</span>  </p><h5 id="二级缓存配置"><a href="#二级缓存配置" class="headerlink" title="二级缓存配置"></a>二级缓存配置</h5><p><span style="color:#ff0000;">方法一:在mybatis-config.xml中配置全局cache</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-------------------------mybatis-config.xml--------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法二:在Mapper.xml中配置(默认:未开启)</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------mybatis-config.xml-------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.smbms.dao.user.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span> <span class="attr">eviction</span>=<span class="string">"FIFIO"</span> <span class="attr">flushInterval</span>=<span class="string">"60000"</span> <span class="attr">size</span>=<span class="string">"512"</span> <span class="attr">readOnly</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>在Mapper文件支持cache后,如果需要对个别查询进行调整,可以单独设置cache  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------UserMapper.xml----------------------------------------------</span><br><span class="line"><span class="comment">&lt;!-- select节点中设置userCache属性为true即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getAddressListByUserId"</span> <span class="attr">resultMap</span>=<span class="string">"userAddressResult"</span> <span class="attr">parameterType</span>=<span class="string">"Integer"</span> <span class="attr">userCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    select u.*,a.id as a_id ,a.contact,a.addressDesc,a.postCode,a.tel</span><br><span class="line">    from smbms_user u,smbms_address a where u.id =a.userId and  u.id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-----------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h4><p>基于OGNL表达式<br>使用动态SQL完成多条件查询等逻辑实现<br>动态SQL元素:  </p><ul><li><span style="color:#ff9900;">if</span>:利用if实现简单的条件选择  </li><li><span style="color:#ff9900;">choose</span>:相当于Java中的switch语句,通常与where和otherwise搭配  <ul><li><span style="color:#ff9900;">where</span>  </li><li><span style="color:#ff9900;">otherwise</span>  </li></ul></li><li><span style="color:#ff9900;">where</span>:简化SQL语句中的where条件判断  </li><li><span style="color:#ff9900;">set</span>:解决动态更新语句  </li><li><span style="color:#ff9900;">trim</span>:可以灵活的去除多余关键字  </li><li><span style="color:#ff9900;">foreach</span>:迭代一个集合,通常用于in条件  </li></ul><h4 id="多条件查询-1"><a href="#多条件查询-1" class="headerlink" title="多条件查询"></a>多条件查询</h4><p><span style="color:#ff0000;">方法一:if+where多条件查询</span>  </p><p>示例:改造查询用户列表示例,增加查询条件(用户角色id,用户名称”模糊查询”)  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----------------------User.java------------------------</span><br><span class="line"><span class="keyword">private</span> Integer userRole;       <span class="comment">//用户角色</span></span><br><span class="line"><span class="keyword">private</span> String userRoleName;    <span class="comment">//用户角色名称</span></span><br><span class="line"><span class="comment">//省略其getter/setter方法</span></span><br><span class="line">-------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-----------------------------------------------UserMapper.java-------------------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName,@<span class="title">Param</span><span class="params">(<span class="string">"userRole"</span>)</span> Integer RoleId) <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r</span><br><span class="line">     where u.userRole=r.id</span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span></span><br><span class="line">        and u.userRole=#&#123;userRole&#125;</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName !=null and userName !=''"</span>&gt;</span></span><br><span class="line">        and u.userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">     <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//不论userName/RoleId设置为null还是"",都可以查询出相应结果</span></span><br><span class="line">    String userName=<span class="string">"明"</span>;</span><br><span class="line">    Integer RoleId=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserList(userName,RoleId);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getAddress()+<span class="string">"\t"</span>+_user.getUserName()+<span class="string">"\t"</span></span><br><span class="line">        +_user.getUserRoleName()+<span class="string">"\t"</span>+_user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>从 <code>UserMapper.xml</code> 中可以发现,我们的where条件中是设置了<code>&quot;where u.userRole=r.id&quot;</code>,所以语句拼接没有问题,如果想让他自动控制where条件的and和or,我们可以使用where节点,改造上面的SQL  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r</span><br><span class="line">     <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName !=null and userName !=''"</span>&gt;</span></span><br><span class="line">            and u.userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span></span><br><span class="line">            and u.userRole=#&#123;userRole&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法二:if+trim多条件查询</span>  </p><p>trim属性:  </p><ul><li><span style="color:#ff9900;">prefix</span>:前缀,作用是通过自动识别是否有返回值  </li><li><span style="color:#ff9900;">suffix</span>:后缀,作用是在trim包含的内容上加上后缀  </li><li><span style="color:#ff9900;">prefixOverrides</span>:对于trim内容的首部进行指定内容(例如:and | or)的忽略  </li><li><span style="color:#ff9900;">suffixOverrides</span>:对于trim包含内容的首尾部进行指定内容的忽略  </li></ul><p>更灵活的去除多余关键字(where,and,or)  </p><p>替代where  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r</span><br><span class="line">     <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"where"</span> <span class="attr">prefixOverrides</span>=<span class="string">"and | or"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName !=null and userName !=''"</span>&gt;</span></span><br><span class="line">            and u.userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span></span><br><span class="line">            and u.userRole=#&#123;userRole&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法三:choose(when,otherwise)多条件查询</span><br>示例:根据条件(用户名称,用户角色,用户编码,创建时间)查询用户表  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------UserMapper.java-------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList_choose</span><span class="params">(@Param(<span class="string">"userName"</span>)</span>String userName,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"userRole"</span>)</span>Integer roleId,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"userCode"</span>)</span>String userCode,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"creationDate"</span>)</span>Date creationDate)<span class="keyword">throws</span> Exception</span>;</span><br><span class="line">-----------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-----------------------UserMapper.xml--------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList_choose"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where 1=1</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"userName !=null and userName !=''"</span> &gt;</span></span><br><span class="line">            and userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"userCode !=null and userCode !=''"</span>&gt;</span></span><br><span class="line">            and userCode like concat ('%',#&#123;userCode&#125;,'%')</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span></span><br><span class="line">            and userRole=#&#123;userRole&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">            and YEAR(creationDate) = YEAR(#&#123;creationDate&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">---------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">-------------------------------------------TeatUserMapper.java--------------------------------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserList_choose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    String userName=<span class="string">"明"</span>;</span><br><span class="line">    Integer roleId=<span class="keyword">null</span>;</span><br><span class="line">    String userCode=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        Date creationDate =<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2014-12-31"</span>);</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserList_choose(userName, roleId, userCode, creationDate);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRole()+<span class="string">"\t"</span>+_user.getCreationDate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="动态SQL更新"><a href="#动态SQL更新" class="headerlink" title="动态SQL更新"></a>动态SQL更新</h4><p>在之前的例子中,我们是直接set所有字段,若某个参数为null会导致更新错误,若要自动根据参数更新  </p><p><span style="color:#ff0000;">方法一:if+set更新</span><br>示例:根据用户ID修改用户信息  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------UserMapper.java---------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">modify</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">--------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml---------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"modify"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    UPDATE smbms_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCode != null"</span>&gt;</span>userCode=#&#123;userCode&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName=#&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userPassword != null"</span>&gt;</span>userPassword=#&#123;userPassword&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender != null"</span>&gt;</span>gender=#&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null"</span>&gt;</span>birthday=#&#123;birthday&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span>address=#&#123;address&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span>userRole=#&#123;userRole&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyBy != null"</span>&gt;</span>modifyBy=#&#123;modifyBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最后一行记得也要加上逗号,set会自动剔除多余逗号,不用担心会多余 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyDate != null"</span>&gt;</span>modifyDate=#&#123;modifyDate&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">     where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testModify</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">16</span>);</span><br><span class="line">        user.setUserCode(<span class="string">"teaper"</span>);</span><br><span class="line">        user.setUserName(<span class="string">"湘桥月"</span>);</span><br><span class="line">        user.setUserPassword(<span class="string">"1234567"</span>);</span><br><span class="line">        Date birthday=<span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>).parse(<span class="string">"2017-5-6"</span>);</span><br><span class="line">        user.setBirthday(birthday);</span><br><span class="line">        user.setAddress(<span class="keyword">null</span>);<span class="comment">//设置为null测试</span></span><br><span class="line">        user.setGender(<span class="number">1</span>);</span><br><span class="line">        user.setPhone(<span class="string">""</span>);<span class="comment">//设置为""测试</span></span><br><span class="line">        user.setUserRole(<span class="number">1</span>);</span><br><span class="line">        user.setModifyBy(<span class="number">1</span>);</span><br><span class="line">        user.setModifyDate(<span class="keyword">new</span> Date());</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).modify(user);</span><br><span class="line">        <span class="comment">//模拟异常,进行回滚</span></span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">        count=<span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    logger.debug(<span class="string">"是否修改成功------&gt;"</span>+count);</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法二:if+trim更新</span><br>我们也可以使用trim元素替换set元素,更精准的剔除逗号,拼接前后缀  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml---------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"modify"</span> <span class="attr">parameterType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    UPDATE smbms_user</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"set"</span> <span class="attr">suffixOverrides</span>=<span class="string">","</span> <span class="attr">suffix</span>=<span class="string">"where id=#&#123;id&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userCode != null"</span>&gt;</span>userCode=#&#123;userCode&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName != null"</span>&gt;</span>userName=#&#123;userName&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userPassword != null"</span>&gt;</span>userPassword=#&#123;userPassword&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"gender != null"</span>&gt;</span>gender=#&#123;gender&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null"</span>&gt;</span>birthday=#&#123;birthday&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"phone != null"</span>&gt;</span>phone=#&#123;phone&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"address != null"</span>&gt;</span>address=#&#123;address&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span>userRole=#&#123;userRole&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyBy != null"</span>&gt;</span>modifyBy=#&#123;modifyBy&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"modifyDate != null"</span>&gt;</span>modifyDate=#&#123;modifyDate&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span>&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="MyBatis的foreach迭代"><a href="#MyBatis的foreach迭代" class="headerlink" title="MyBatis的foreach迭代"></a>MyBatis的foreach迭代</h4><p><span style="color:#ff9900;">foreach</span>:迭代一个集合,通常用于in条件  </p><p>属性:  </p><ul><li><span style="color:#ff9900;">item</span>:表示集合中每个元素进行迭代时的别名  </li><li><span style="color:#ff9900;">index</span>:指定一个名称,用于迭代过程中每次迭代到的位置  </li><li><span style="color:#ff9900;">collection</span>:必须指定,不同情况下的属性值不一样  </li><li><span style="color:#ff9900;">open</span>:表示该语句以什么开始(既然是in条件,必然以”(“开始)  </li><li><span style="color:#ff9900;">separator</span>:表示每次进行迭代之间以什么符号作为分隔符(既然是in条件,必然以”,”分隔)  </li><li><span style="color:#ff9900;">close</span>:表示该语句以什么结束(既然是in条件,必然以”)”结束)  </li></ul><p>示例:根据用户角色列表,获取该角色下用户列表信息<br><span style="color:#ff0000;">方法一:入参为数组类型的foreach迭代</span>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------UserMapper.java----------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByRoleId_foreach_array</span><span class="params">(Integer[] roleIds)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml---------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByRoleId_foreach_array"</span> <span class="attr">resultMap</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where userRole in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"array"</span> <span class="attr">item</span>=<span class="string">"roleIds"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;roleIds&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------------TeatUserMapper.java------------------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByRoleId_foreach_array</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    Integer[] roleIds=&#123;<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByRoleId_foreach_array(roleIds);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getId()+<span class="string">"\t"</span>+_user.getUserCode()+<span class="string">"\t"</span></span><br><span class="line">                +_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRole());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意:UserMapper.xml中的select:getUserListByRoleId_foreach_array中没有指定parameterType,因为配置文件中的parameterType是可以不用配置的,MyBatis会自动把他封装成一个Map进行传入;但是,当入参为Collection时,不能直接传入Collection对象,需要将其转换为List或数组</span>  </p><p><span style="color:#ff0000;">方法二:入参为List类型的foreach迭代</span>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------UserMapper.java------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByRoleId_foreach_list</span><span class="params">(List&lt;Integer&gt; roleList)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">-------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">----------------------------UserMapper.xml---------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByRoleId_foreach_list"</span> <span class="attr">resultMap</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where userRole in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"list"</span> <span class="attr">item</span>=<span class="string">"roleList"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;roleList&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">----------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByRoleId_foreach_list</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Integer&gt; roleList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    roleList.add(<span class="number">2</span>);</span><br><span class="line">    roleList.add(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByRoleId_foreach_list(roleList);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getId()+<span class="string">"\t"</span>+_user.getUserCode()+<span class="string">"\t"</span></span><br><span class="line">                +_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRole());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">方法三:入参为Map类型的foreach迭代</span>  </p><p>示例:根据传入的用户角色列表和性别获取相应的用户信息  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------UserMapper.java---------------------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserListByRoleId_foreach_map</span><span class="params">(Map&lt;String,Object&gt; conditionMap)</span><span class="keyword">throws</span> Exception</span>;</span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------UserMapper.xml------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserListByRoleId_foreach_map"</span> <span class="attr">resultMap</span>=<span class="string">"userMapByRole"</span>&gt;</span></span><br><span class="line">    select * from smbms_user where gender=#&#123;gender&#125; and userRole in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"roleIds"</span> <span class="attr">item</span>=<span class="string">"roleMap"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">separator</span>=<span class="string">","</span> <span class="attr">close</span>=<span class="string">")"</span>&gt;</span></span><br><span class="line">        #&#123;roleMap&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">-----------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">----------------------------------TeatUserMapper.java--------------------------------</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserListByRoleId_foreach_map</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    Map&lt;String,Object&gt; conditionMap=<span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    List&lt;Integer&gt; roleList=<span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    roleList.add(<span class="number">2</span>);</span><br><span class="line">    roleList.add(<span class="number">3</span>);</span><br><span class="line">    conditionMap.put(<span class="string">"gender"</span>, <span class="number">1</span>);</span><br><span class="line">    conditionMap.put(<span class="string">"roleIds"</span>, roleList);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserListByRoleId_foreach_map(conditionMap);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getId()+<span class="string">"\t"</span>+_user.getUserCode()+<span class="string">"\t"</span></span><br><span class="line">                +_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRole());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="MyBatis分页"><a href="#MyBatis分页" class="headerlink" title="MyBatis分页"></a>MyBatis分页</h4><p>示例:分页查询用户列表  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">---------------------------UserMapper.java-------------------------</span><br><span class="line"><span class="comment">//查询总记录数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户列表(分页)</span></span><br><span class="line"><span class="comment"> * getCount() 之前已写过,获取总记录数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> roleId 角色编号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentPageNo  起始位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 页面大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">(@Param(<span class="string">"userName"</span>)</span> String userName,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"userRole"</span>)</span> Integer roleId,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"from"</span>)</span> Integer currentPageNo,</span></span><br><span class="line"><span class="function">        @<span class="title">Param</span><span class="params">(<span class="string">"pageSize"</span>)</span> Integer pageSize) <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">-------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">---------------------------------------UserMapper.xml-----------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">type</span>=<span class="string">"User"</span> <span class="attr">id</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userName"</span> <span class="attr">property</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"roleName"</span> <span class="attr">property</span>=<span class="string">"roleName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userCode"</span> <span class="attr">property</span>=<span class="string">"userCode"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userPassword"</span> <span class="attr">property</span>=<span class="string">"userPassword"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">property</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"birthday"</span> <span class="attr">property</span>=<span class="string">"birthday"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"phone"</span> <span class="attr">property</span>=<span class="string">"phone"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"address"</span> <span class="attr">property</span>=<span class="string">"address"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRole"</span> <span class="attr">property</span>=<span class="string">"userRole"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"createdBy"</span> <span class="attr">property</span>=<span class="string">"createdBy"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"creationDate"</span> <span class="attr">property</span>=<span class="string">"creationDate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modifyBy"</span> <span class="attr">property</span>=<span class="string">"modifyBy"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"modifyDate"</span> <span class="attr">property</span>=<span class="string">"modifyDate"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"idPicPath"</span> <span class="attr">property</span>=<span class="string">"idPicPath"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"workPicPath"</span> <span class="attr">property</span>=<span class="string">"workPicPath"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"age"</span> <span class="attr">property</span>=<span class="string">"age"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"userRoleName"</span> <span class="attr">property</span>=<span class="string">"userRoleName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取总记录数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getCount"</span> <span class="attr">resultType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">    select count(1) from smbms_user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页查询用户列表(降序) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserList"</span> <span class="attr">resultMap</span>=<span class="string">"userList"</span>&gt;</span></span><br><span class="line">    select u.*,r.roleName as userRoleName from smbms_user u,smbms_role r where u.userRole=r.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userName !=null and userName !=''"</span>&gt;</span></span><br><span class="line">        and u.userName like concat ('%',#&#123;userName&#125;,'%')</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"userRole != null"</span>&gt;</span></span><br><span class="line">        and u.userRole=#&#123;userRole&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    order by creationDate DESC limit #&#123;from&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------------TeatUserMapper.java--------------------------------------------</span><br><span class="line"><span class="comment">//获取总记录数</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        count = sqlSession.getMapper(UserMapper.class).getCount();</span><br><span class="line">        logger.debug(<span class="string">"COUNT等于:----&gt;"</span>+count);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//分页查询用户列表(降序)</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; userlist= <span class="keyword">null</span>;</span><br><span class="line">    SqlSession sqlSession = <span class="keyword">null</span>;</span><br><span class="line">    String userName=<span class="keyword">null</span>;</span><br><span class="line">    Integer roleId=<span class="keyword">null</span>;</span><br><span class="line">    Integer pageSize=<span class="number">5</span>;</span><br><span class="line">    Integer currentPageNo=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sqlSession = MyBatisUtil.creataSqlSession();</span><br><span class="line">        userlist = sqlSession.getMapper(UserMapper.class).getUserList(userName, roleId, currentPageNo, pageSize);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">        MyBatisUtil.closeSqlSession(sqlSession);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(User _user:userlist)&#123;</span><br><span class="line">        logger.debug(_user.getId()+<span class="string">"\t"</span>+_user.getUserCode()+<span class="string">"\t"</span>+_user.getUserName()+<span class="string">"\t"</span>+_user.getUserRoleName()</span><br><span class="line">        +<span class="string">"\t"</span>+_user.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------------------------------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><h4 id="Log日志"><a href="#Log日志" class="headerlink" title="Log日志"></a>Log日志</h4><p><code>pom.xml</code>中加入jar包  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- log4j/sfl4j日志处理 </span></span><br><span class="line"><span class="comment">slf4j-api-1.7.21.jar</span></span><br><span class="line"><span class="comment">slf4j-log4j12-1.7.21.jar</span></span><br><span class="line"><span class="comment">log4j-1.2.17.jar</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在项目的 <code>resources</code> 文件夹创建 <code>login.properties</code> 文件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">log4j.rootLogger=info,debug,CONSOLE,file</span><br><span class="line">#log4j.rootLogger=ERROR,ROLLING_FILE</span><br><span class="line"></span><br><span class="line">log4j.logger.cn.appsys=info</span><br><span class="line">log4j.logger.org.apache.ibatis=info</span><br><span class="line">log4j.logger.org.mybatis.spring=info</span><br><span class="line">log4j.logger.java.sql.Connection=info</span><br><span class="line">log4j.logger.java.sql.Statement=info</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=info</span><br><span class="line">log4j.logger.java.sql.ResultSet=info</span><br><span class="line"></span><br><span class="line">######################################################################################</span><br><span class="line"># Console Appender  \u65e5\u5fd7\u5728\u63a7\u5236\u8f93\u51fa\u914d\u7f6e</span><br><span class="line">######################################################################################</span><br><span class="line">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Threshold=info</span><br><span class="line">log4j.appender.CONSOLE.DatePattern=yyyy-MM-dd</span><br><span class="line">log4j.appender.CONSOLE.Target=System.out</span><br><span class="line">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.CONSOLE.layout.ConversionPattern= - (%r ms) - %d&#123;yyyy-M-d HH:mm:ss&#125;%x[%5p](%F:%L) %m%n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">######################################################################################</span><br><span class="line"># Rolling File  \u6587\u4ef6\u5927\u5c0f\u5230\u8fbe\u6307\u5b9a\u5c3a\u5bf8\u7684\u65f6\u5019\u4ea7\u751f\u4e00\u4e2a\u65b0\u7684\u6587\u4ef6</span><br><span class="line">######################################################################################</span><br><span class="line">#log4j.appender.ROLLING_FILE=org.apache.log4j.RollingFileAppender</span><br><span class="line">#log4j.appender.ROLLING_FILE.Threshold=INFO</span><br><span class="line">#log4j.appender.ROLLING_FILE.File=$&#123;baojia.root&#125;/logs/log.log</span><br><span class="line">#log4j.appender.ROLLING_FILE.Append=true</span><br><span class="line">#log4j.appender.ROLLING_FILE.MaxFileSize=5000KB</span><br><span class="line">#log4j.appender.ROLLING_FILE.MaxBackupIndex=100</span><br><span class="line">#log4j.appender.ROLLING_FILE.layout=org.apache.log4j.PatternLayout</span><br><span class="line">#log4j.appender.ROLLING_FILE.layout.ConversionPattern=%d&#123;yyyy-M-d HH:mm:ss&#125;%x[%5p](%F:%L) %m%n</span><br><span class="line"></span><br><span class="line">######################################################################################</span><br><span class="line"># DailyRolling File  \u6bcf\u5929\u4ea7\u751f\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0c\u6587\u4ef6\u540d\u683c\u5f0f:log2009-09-11</span><br><span class="line">######################################################################################</span><br><span class="line">log4j.appender.file=org.apache.log4j.DailyRollingFileAppender</span><br><span class="line">log4j.appender.file.DatePattern=yyyy-MM-dd</span><br><span class="line">#注意，ProjectName改成你的工程名字，日志文件会生成到Linux系统的 ~/ 目录</span><br><span class="line">log4j.appender.file.File=$&#123;ProjectName.root&#125;/logs/log.log </span><br><span class="line">log4j.appender.file.Append=true</span><br><span class="line">log4j.appender.file.Threshold=info</span><br><span class="line">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.file.layout.ConversionPattern= - (%r ms) - %d&#123;yyyy-M-d HH:mm:ss&#125;%x[%5p](%F:%L) %m%n</span><br><span class="line"></span><br><span class="line">#DWR \u65e5\u5fd7</span><br><span class="line">#log4j.logger.org.directwebremoting = ERROR</span><br><span class="line"></span><br><span class="line">#\u663e\u793aHibernate\u5360\u4f4d\u7b26\u7ed1\u5b9a\u503c\u53ca\u8fd4\u56de\u503c</span><br><span class="line">#log4j.logger.org.hibernate.type=DEBUG,CONSOLE </span><br><span class="line"></span><br><span class="line">#log4j.logger.org.springframework.transaction=DEBUG</span><br><span class="line">#log4j.logger.org.hibernate=DEBUG</span><br><span class="line">#log4j.logger.org.acegisecurity=DEBUG</span><br><span class="line">#log4j.logger.org.apache.myfaces=TRACE</span><br><span class="line">#log4j.logger.org.quartz=DEBUG</span><br><span class="line"></span><br><span class="line">#log4j.logger.com.opensymphony=INFO  </span><br><span class="line">#log4j.logger.org.apache.struts2=DEBUG  </span><br><span class="line">#log4j.logger.com.opensymphony.xwork2=debug</span><br></pre></td></tr></table></figure><p>在<code>web.xml</code>中配置加载器  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置log4j文件  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>log4jConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:log4j.properties<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span></span><br><span class="line">org.springframework.web.util.Log4jConfigListener</span><br><span class="line"><span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在需要使用的类中创建Log4j对象进行日志输出  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmpController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Logger logger = Logger.getLogger(EmpController.class);</span><br><span class="line">    logger.info(<span class="string">"员工名字============》"</span>+empName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MyBatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>版本控制工具Git</title>
      <link href="/2019/06/30/git/"/>
      <url>/2019/06/30/git/</url>
      
        <content type="html"><![CDATA[<h4 id="什么是git"><a href="#什么是git" class="headerlink" title="什么是git"></a>什么是git</h4><p><a href="https://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">Git</a> 是一个免费的开源 分布式版本控制系统，旨在处理速度和效率从小到大的项目<br>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件<br>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持  </p><p>入门推荐：<a href="https://git-scm.com/book/en/v2" rel="external nofollow noopener noreferrer" target="_blank">《Pro.Git中文版》</a>、《版本控制之道——使用Git》、<a href="http://www.worldhello.net/gotgit/" rel="external nofollow noopener noreferrer" target="_blank">《Git权威指南》</a>  </p><h4 id="git的安装"><a href="#git的安装" class="headerlink" title="git的安装"></a>git的安装</h4><p><a href="https://sourceforge.net/projects/git-osx-installer/" rel="external nofollow noopener noreferrer" target="_blank">Mac平台</a><br><a href="https://git-for-windows.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Windows平台</a><br>Linux平台:<code>apt-get install git</code>  </p><h4 id="如何学习git"><a href="#如何学习git" class="headerlink" title="如何学习git"></a>如何学习git</h4><p>安装好 Git 之后,怎么学习是个问题,其实关于 Git 有很多图形化的软件可以操作,但是我强 烈建议大家从命令行开始学习理解,我知道没接触过命令行的人可能会很抵触,但是我的亲 身实践证明,只有一开始学习命令行,之后你对 Git 的每一步操作才能理解其意义,而等你熟 练之后你想用任何的图形化的软件去操作完全没问题  </p><p>我一开始教我们团队成员全是基于命令行的,事后证明他们现在已经深深爱上命令行无法自 拔,他们很理解 Git 每一步操作的具体含义,以致于在实际项目很少犯错,所以我这里也是基 于命令行去教你们学习理解  </p><h4 id="git命令列表"><a href="#git命令列表" class="headerlink" title="git命令列表"></a>git命令列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">~$ git</span><br><span class="line">usage: git [--version] [--<span class="built_in">help</span>] [-C &lt;path&gt;] [-c name=value]</span><br><span class="line">           [--<span class="built_in">exec</span>-path[=&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir=&lt;path&gt;] [--work-tree=&lt;path&gt;] [--namespace=&lt;name&gt;]</span><br><span class="line">           &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"> </span><br><span class="line">These are common Git commands used <span class="keyword">in</span> various situations:</span><br><span class="line"> </span><br><span class="line">start a working area (see also: git <span class="built_in">help</span> tutorial)</span><br><span class="line">   <span class="built_in">clone</span>      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"> </span><br><span class="line">work on the current change (see also: git <span class="built_in">help</span> everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line"> </span><br><span class="line">examine the <span class="built_in">history</span> and state (see also: git <span class="built_in">help</span> revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   <span class="built_in">log</span>        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"> </span><br><span class="line">grow, mark and tweak your common <span class="built_in">history</span></span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Forward-port <span class="built_in">local</span> commits to the updated upstream head</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"> </span><br><span class="line">collaborate (see also: git <span class="built_in">help</span> workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a <span class="built_in">local</span> branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"> </span><br><span class="line"><span class="string">'git help -a'</span> and <span class="string">'git help -g'</span> list available subcommands and some</span><br><span class="line">concept guides. See <span class="string">'git help &lt;command&gt;'</span> or <span class="string">'git help &lt;concept&gt;'</span></span><br><span class="line">to <span class="built_in">read</span> about a specific subcommand or concept.</span><br></pre></td></tr></table></figure><h4 id="git的几个概念"><a href="#git的几个概念" class="headerlink" title="git的几个概念"></a>git的几个概念</h4><p><strong>index</strong> 暂存，又名暂存区<br><strong>staging area</strong> 暂存区：可以设置哪些变更要提交到版本库，哪些先不提交  </p><blockquote><p>指/.git/index文件  </p></blockquote><p><strong>work area</strong> 工作区：就是我们进行工作的地方  </p><blockquote><p>除.git文件夹外的其他内容区域  </p></blockquote><p><strong>local repository</strong> 本地仓库：就是我们自己工作的电脑上保存版本数据的地方  </p><blockquote><p>.git文件夹，内容在/.git/objects中  </p></blockquote><p><strong>remote repository</strong> 远程仓库：远程的服务器上的仓库，如<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">gitHub</a>、<a href="https://about.gitlab.com/" rel="external nofollow noopener noreferrer" target="_blank">gitLab</a><br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u5wza2lj30sz0h3n3i.jpg" alt="工作区"><br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u6aacpej30tk0h7agc.jpg" alt="暂存区"></p><h4 id="git具体命令"><a href="#git具体命令" class="headerlink" title="git具体命令"></a>git具体命令</h4><p>第一步,我们先新建一个文件夹,在文件夹里新建一个文件<span style="color:#ff0000">(我是用Linux命令去新建的,Windows用户可以自己手动新建)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir <span class="built_in">test</span>             <span class="comment">#创建文件夹test</span></span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>                <span class="comment">#切换到test目录</span></span><br><span class="line">sudo gedit a.md        <span class="comment">#新建a.md文件</span></span><br></pre></td></tr></table></figure><p>这里提醒下:在进行任何 Git 操作之前,都要先切换到 Git 仓库目录,也就是先要先切换到项目的文件夹目录下  </p><p>这个时候我们先随便操作一个命令,比如 git status ,可以看到如下提示<span style="color:#ff0000">(别纠结颜色之类的,配置与主题不一样而已)</span>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git status   <span class="comment">#查看git状态</span></span><br><span class="line">fatal: Not a git repository (or any of the parent directories): .git</span><br></pre></td></tr></table></figure><p>意思就是当前目录还不是一个Git仓库  </p><p><strong>git init</strong><br>这个时候用到了第一个命令,代表初始化git仓库,输入<code>git init</code>之后会提示:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git init   <span class="comment">#初始化git仓库</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /home/teaper/Downloads/<span class="built_in">test</span>/.git/</span><br></pre></td></tr></table></figure><p>可以看到初始化成了,至此 test目录已经是一个 git 仓库了  </p><p><strong>git status</strong><br>紧接着我们输入 <code>git status</code> 命令,会有如下提示:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Untracked files:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include <span class="keyword">in</span> what will be committed)</span><br><span class="line"> </span><br><span class="line">    a.md</span><br><span class="line"> </span><br><span class="line">nothing added to commit but untracked files present (use <span class="string">"git add"</span> to track)</span><br></pre></td></tr></table></figure><p>默认就直接在 master 分支,关于分支的概念后面会提,这时最主要的是提示a.md文件<br>Untracked files,就是说a.md 这个文件还没有被跟踪,还没有提交在git仓库里呢,而且提示你可以使用 git add 去操作你想要提交的文件  </p><p><code>git status</code>这个命令顾名思义就是查看状态,这个命令可以算是使用最频繁的一个命令了,建议大家没事就输入下这个命令,来查看你当前git仓库的一些状态  </p><p><strong>git add</strong><br>上面提示 a.md文件还没有提交到git仓库里,这个时候我们可以随便编辑a.md文件,然后输入<code>git add a.md</code>,然后再输入<code>git status</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git add a.md    <span class="comment">#让git跟踪a.md文件,此时a.md文件会进入暂存区</span></span><br><span class="line">~/<span class="built_in">test</span>$ git status</span><br><span class="line">On branch master</span><br><span class="line"> </span><br><span class="line">Initial commit</span><br><span class="line"> </span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use <span class="string">"git rm --cached &lt;file&gt;..."</span> to unstage)</span><br><span class="line"> </span><br><span class="line">    new file:   a.md</span><br></pre></td></tr></table></figure><p><strong>git commit</strong><br>接着我们输入<code>git commit -m &#39;first commit&#39;</code> ,这个命令什么意思呢? commit是提交的意思,-m代表是提交信息,执行了以上命令代表我们已经正式进行了第一次提交<br>这个时候再输入 <code>git status</code> ,<span style="color:#ff0000;">会提示nothing to commit</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git commit -m <span class="string">'first commit'</span>  <span class="comment">#提交到版本库</span></span><br><span class="line">[master (root-commit) 60990d1] first commit</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line"> create mode 100644 a.md</span><br><span class="line">~/<span class="built_in">test</span>$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure><p>当我们对已经提交到版本库的文件进行修改后,是不能马上commit提交的,需要重新<code>add</code>一次,有没有一步到位的呢?有的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -am <span class="string">"first commit"</span>     <span class="comment">#不通过暂存区直接将文件提交到版本库</span></span><br></pre></td></tr></table></figure><p>如果我们不小心把上一次提交的注解说明(first commit)写错了,怎么修改呢?  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m <span class="string">"新的注释说明"</span>     <span class="comment">#仅修改上一次提交的注解说明</span></span><br></pre></td></tr></table></figure><p>如果我们需要撤销或修改更多操作,比如上次提交少提交了a.txt文件,那么我们可以  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add a.txt</span><br><span class="line">git commit --amend -m <span class="string">"first commit"</span>     <span class="comment">#重新提交上一次提交的内容</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意:–amend只能使用它来修正你的上一次提交,更早的提交是不能使用“amend”来进行操作,你不要对一个已经在远程仓库上被发布，或者说已经被共享的提交进行“amend”操作,很容易导致整个团队陷入麻烦</span>  </p><p><strong>git log</strong><br>这个时候我们输入<code>git log</code>命令,会看到如下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git <span class="built_in">log</span>  <span class="comment">#查看提交日志</span></span><br><span class="line">commit 60990d11c3634daa16d0a3fe735a0d6a768c2fbf</span><br><span class="line">Author: teaper &lt;teaper@aliyun.com&gt;</span><br><span class="line">Date:   Tue Jul 17 10:21:07 2018 +0800</span><br><span class="line"> </span><br><span class="line">    first commit</span><br></pre></td></tr></table></figure><p>git log 命令可以查看所有产生的commit记录,所以可以看到已经产生了一条commit记录,而提交时候的附带信息叫 ‘first commit’  </p><p><strong>git branch</strong><br>branch 即分支的意思,分支的概念很重要,尤其是团队协作的时候,假设两个人都在做同一个项目,这个时候分支就是保证两人能协同合作的最大利器了。举个例子,A, B俩人都在做同一个项目,但是不同的模块,这个时候A新建了一个分支叫a,B新建了一个分支叫b,这样A、B做的所有代码改动都各自在各自的分支,互不影响,等到俩人都把各自的模块都做完了,最后再统一把分支合并起来  </p><p>执行git init初始化git仓库之后会默认生成一个主分支master,也是你所在的默认分支,也基本是实际开发正式环境下的分支,一般情况下master分支不会轻易直接在上面操作的,你们可以输入<code>git branch</code>查看下当前分支情况:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git branch  <span class="comment">#查看所有分支</span></span><br><span class="line">* master</span><br></pre></td></tr></table></figure><p>如果我们想在此基础上新建一个分支呢,很简单,执行<code>git branch develop</code>就新建了一个名字叫develop的分支,这时候分支develop跟分支 master是一模一样的内容,我们再输入<code>git branch</code>查看的当前分支情况:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git branch develop  <span class="comment">#新建develop分支</span></span><br><span class="line">~/<span class="built_in">test</span>$ git branch</span><br><span class="line">  develop</span><br><span class="line">* master    <span class="comment">#*在哪里就表示那个是当前所在的分支</span></span><br></pre></td></tr></table></figure><p>即虽然新建了一个develop的分支,但是当前所在的分支还是在master上,如果我们想在develop分支上进行开发,首先要先切换到develop分支上才行,所以下一步要切换分支  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git  checkout develop   <span class="comment">#切换到develop分支</span></span><br><span class="line">Switched to branch <span class="string">'develop'</span></span><br><span class="line">~/<span class="built_in">test</span>$ git branch</span><br><span class="line">* develop</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">那有人就说了,我要先新建再切换,未免有点麻烦,有没有一步到位的,聪明:</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop   <span class="comment">#一步到位,创建并且切换到develop分支</span></span><br></pre></td></tr></table></figure><p>有新建分支,那肯定有删除分支,假如这个分支新建错了,或者develop分支的代码已经顺利合并到master分支来了,那么develop分支没用了,需要删除  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch  -d develop   <span class="comment">#develop分支已经合并到其他(比如:master)分支,需要删除用这个</span></span><br><span class="line">git branch  -D develop   <span class="comment">#develop分支没有合并到其他分支,需要强制删除用这个</span></span><br></pre></td></tr></table></figure><p><strong>git merge</strong><br>A同学在develop分支代码写的不亦乐乎,终于他的功能完工了,并且测试也都ok了,准备要上线了,这个时候就需要把他的代码合并到主分支master上来,然后发布支用到的命令,针对这个情况,需要先做两步,第一步是切换到master分支,如果你已经在了就不用切换了,第二步执行git merge develop,意思就是把a分支的代码合并过来,不出意外,这个时候develop分支的代码就顺利合并到master分支来了  </p><p>为什么说不出意外呢?因为这个时候可能会有冲突而合并失败,留个包袱,这个到后面进阶的时候再讲  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git checkout master  <span class="comment">#切换到master分支</span></span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">~/<span class="built_in">test</span>$ git merge develop   <span class="comment">#合并develop分支</span></span><br><span class="line">Already up-to-date.</span><br></pre></td></tr></table></figure><p><strong>git tag</strong><br>我们在客户端开发的时候经常有版本的概念,比如v1.0、v1.1之类的,不同的版本肯定对应不同的代码,所以我一般要给我们的代码加上标签,这样假设v1.1版本出了一个新bug,但是又不晓得v1.0是不是有这个bug,有了标签就可以顺利切换到v1.0的代码,重新打个包测试了  </p><p>所以如果想要新建一个标签很简单,比如<code>git tag v1.0</code>就代表我在当前代码状态下新建了一个v1.0的标签,输入<code>git tag</code>可以查看历史tag记录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git tag v1.0    <span class="comment">#新建v1.0版本标签</span></span><br><span class="line">~/<span class="built_in">test</span>$ git tag         <span class="comment">#查看历史版本</span></span><br><span class="line">v1.0</span><br><span class="line">v1.1</span><br></pre></td></tr></table></figure><p>可以看到我新建了两个标签v1.0、v1.1<br>想要切换到某个tag怎么办?也很简单,执行<code>git checkoutv 1.0</code>,这样就顺利的切换到v1.0tag的代码状态了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout v1.0   <span class="comment">#切换到v1.0版本</span></span><br></pre></td></tr></table></figure><h4 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h4><p>你拥有了一个 GitHub 账号之后,就可以自由的 clone 或者下载其他项目,也可以创建自己的项目,但是你没法提交代码。仔细想想也知道,肯定不可能随意就能提交代码的,如果随意可以提交代码,那么 GitHub 上的项目岂不乱了套了,所以提交代码之前一定是需要某种授权的,而 GitHub上一般都是基于SSH授权的  </p><p>那么什么是SSH呢?简单点说,SSH是一种网络协议,用于计算机之间的加密登录。目前是每一台Linux电脑的标准配置。而大多数Git服务器都会选择使用SSH公钥来进行授权,所以想要在 GitHub 提交代码的第一步就是要先添加SSH key配置  </p><h4 id="生成SSH-key"><a href="#生成SSH-key" class="headerlink" title="生成SSH key"></a>生成SSH key</h4><p>Linux与Mac都是默认安装了SSH,而Windows系统安装了Git Bash应该也是带了SSH的。大家可以在终端<span style="color:#ff0000;">(win下在 Git Bash里)</span>输入ssh如果出现以下提示证明你本机已经安装SSH,否则请搜索自行安装下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ ssh     <span class="comment">#查看是否安装SSH</span></span><br><span class="line">usage: ssh [-1246AaCfGgKkMNnqsTtVvXxYy] [-b bind_address] [-c cipher_spec]</span><br><span class="line">           [-D [bind_address:]port] [-E log_file] [-e escape_char]</span><br><span class="line">           [-F configfile] [-I pkcs11] [-i identity_file] [-L address]</span><br><span class="line">           [-l login_name] [-m mac_spec] [-O ctl_cmd] [-o option] [-p port]</span><br><span class="line">           [-Q query_option] [-R address] [-S ctl_path] [-W host:port]</span><br><span class="line">           [-w local_tun[:remote_tun]] [user@]hostname [<span class="built_in">command</span>]</span><br><span class="line"> </span><br><span class="line">~/<span class="built_in">test</span>$ ssh-keygen -t rsa -C <span class="string">"teaper@aliyun.com"</span>  <span class="comment">#生成SSH key,邮箱填你gitHub上的绑定邮箱</span></span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/home/teaper/.ssh/id_rsa):</span><br><span class="line">/home/teaper/.ssh/id_rsa already exists.</span><br><span class="line">Overwrite (y/n)? y</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/teaper/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/teaper/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:wcNn6oSZO/1qafMyuYTCF13njjFO4RJAKUzA0GUZ98A teaper@aliyun.com</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|.+.====.         |</span></span><br><span class="line"><span class="string">|  o.+.E*         |</span></span><br><span class="line"><span class="string">|     .  B = .    |</span></span><br><span class="line"><span class="string">|       = X +     |</span></span><br><span class="line"><span class="string">|      = S = .    |</span></span><br><span class="line"><span class="string">|   .   B + =     |</span></span><br><span class="line"><span class="string">|    o = +oo .    |</span></span><br><span class="line"><span class="string">|     o oO.       |</span></span><br><span class="line"><span class="string">|       ooBo      |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br></pre></td></tr></table></figure><p>紧接着输入<code>ssh-keygen -t rsa</code>,什么意思呢?就是指定rsa算法生成密钥,接着连续三个回车键(不需要输入密码),然后就会生成两个文件id_rsa和 id_rsa.pub,而id_rsa是密钥,id_rsa.pub就是公钥。这两文件默认分别在如下目录里生成:<br>Linux/Mac系统在~/.ssh下,win系统在/c/Documents and Settings/username/.ssh下,都是隐藏文件,相信你们有办法查看的  </p><p>接下来要做的是把id_rsa.pub的内容添加到GitHub上,这样你本地的id_rsa密钥跟 GitHub上的id_rsa.pub公钥进行配对,授权成功才可以提交代码  </p><h4 id="GitHub上添加SSH-key"><a href="#GitHub上添加SSH-key" class="headerlink" title="GitHub上添加SSH key"></a>GitHub上添加SSH key</h4><p>进入你自己的<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">github</a><br>点击头像旁边的下拉，Settings -&gt; SSH and GPG keys -&gt; New SSH key<br>新建一个key，title不用填，把复制的SSH key内容粘贴上去<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u7550u2j30rq0g0acc.jpg" alt="ssh">  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ ssh git@github.com       <span class="comment">#测试连接服务器是否成功</span></span><br><span class="line">PTY allocation request failed on channel 0</span><br><span class="line">Hi TEAPER! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="string">Connection to github.com closed.</span></span><br></pre></td></tr></table></figure><h4 id="Push和Pull"><a href="#Push和Pull" class="headerlink" title="Push和Pull"></a>Push和Pull</h4><p>Push:直译过来就是「推」的意思,什么意思呢?如果你本地代码有更新了,那么就需要把本地代码推到远程仓库,这样本地仓库跟远程仓库就可以保持同步了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master   <span class="comment">#把本地代码推到远程master分支</span></span><br></pre></td></tr></table></figure><p>Pull:直译过来就是「拉」的意思,如果别人提交代码到远程仓库,这个时候你需要把远程仓库的最新代码拉下来,然后保证两端代码的同步  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master   <span class="comment">#把远程最新的代码更新到本地</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意:一般我们在push之前都会先pull,这样不容易冲突</span>  </p><h4 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h4><p>在提交代码之前需要先要设置下自己的用户名与邮箱,这些信息会出现在所有的commit记录里,执行以下代码就可以设置:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config  —global user.name   <span class="string">"teaper"</span></span><br><span class="line">git config  —global user.email  <span class="string">"www@teaper.cn"</span></span><br></pre></td></tr></table></figure><p>以上进行了全局配置,当然有些时候我们的某一个项目想要用特定的邮箱,这个时候只需切换到你的项目,以上代码把–global参数去除,再重新执行一遍就ok了  </p><p>添加 SSH key 成功之后,我们就有权限向GitHub上我们自己的项目提交代码了,而提交代码有两种方法:<br>Clone自己的项目我们以我在GitHub上创建的test项目为例,执行如下命令:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:TEAPER/test.git     <span class="comment">#克隆远程仓库到本地</span></span><br></pre></td></tr></table></figure><p>这样就把test项目clone到了本地,你可以把clone命令理解为高级点的复制,这个时候该项目本身就已经是一个git仓库了,不需要执行git init进行初始化,而且甚至都已经关联好了远程仓库,我们只需要在这个test目录下任意修改或者添加文件,然后进行commit,之后就可以执行:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master  或  git push -u origin master</span><br></pre></td></tr></table></figure><p>至于怎么获取项目的仓库地址呢?如下图:<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u7kpjgqj30rp09c3zn.jpg" alt="ssh地址"><br>如果我们本地已经有一个完整的git仓库,并且已经进行了很多次commit,这个时候第一种方法就不适合了  </p><p>假设我们本地有个test2的项目,我们需要的是在 GitHub上建一个test的项目,然后把本地test2上的所有代码commit记录提交到GitHub上的test项目<br>第一步就是在GitHub上建一个test项目,这个想必大家都会了,就不用多讲了<br>第二步把本地test2项目与GitHub上的test项目进行关联,切换到test2目录,执行如下命令:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin git@github.com:TEAPER/test.git  <span class="comment">#添加一个远程仓库orgin,地址是:git@github.com:TEAPER/test.git</span></span><br></pre></td></tr></table></figure><p>origin是给这个项目的远程仓库起的名字,名字你可以随便取,只不过大家公认的只有一个远程仓库时名字就是origin  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote  -v   <span class="comment">#查看当前项目有哪些远程仓库</span></span><br></pre></td></tr></table></figure><p>接下来,我们本地的仓库就可以向远程仓库进行代码提交了:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h4 id="创建忽略文件"><a href="#创建忽略文件" class="headerlink" title="创建忽略文件"></a>创建忽略文件</h4><p>通常情况下，您将拥有一类您不希望Git自动添加甚至将您展示为未跟踪的文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit .gitignore <span class="comment">#创建一个隐藏文件.gitignore</span></span><br><span class="line">---------------------------------.内容如下-------------------------------------</span><br><span class="line">*.a            ＃忽略所有.a文件</span><br><span class="line">!lib.a         ＃但是跟踪lib.a，即使你忽略了上面的.a文件</span><br><span class="line">/TODO          ＃仅忽略当前目录中的TODO文件，而不是subdir / TODO</span><br><span class="line">build/         ＃忽略build /目录中的所有文件</span><br><span class="line">doc/*.txt      <span class="comment">#＃忽略doc / notes.txt，而不是doc / server / arch.txt</span></span><br><span class="line">doc/**/*.pdf   <span class="comment">#＃忽略doc /目录及其任何子目录中的所有.pdf文件</span></span><br><span class="line">------------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注：上述文件编辑规则等同与Java正则表达式</span>  </p><h4 id="alas"><a href="#alas" class="headerlink" title="alas"></a>alas</h4><p>我们知道我们执行的一些Git命令其实操作很频繁的类似有:  </p><blockquote><p>git commit<br>git checkout<br>git branch<br>git status<br>……  </p></blockquote><p>这些操作非常频繁,每次都要输入完全是不是有点麻烦,有没有一种简单的缩写输入呢?比如我对应的直接输入以下:  </p><blockquote><p>git c<br>git co<br>git br<br>git s<br>……  </p></blockquote><p>是不是很简单快捷啊?这个时候就用到了alias配置了,翻译过来就是别名的意思,输入以下命令就可以直接满足了以上的需求  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout        <span class="comment">#别名</span></span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br></pre></td></tr></table></figure><p>当然以上别名不是固定的,你完全可以根据自己的习惯去定制,除此之外还可以设置组合,比如:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.psm <span class="string">'push origin master'</span></span><br><span class="line">git config --global alias.plm <span class="string">'pull origin master'</span></span><br></pre></td></tr></table></figure><p>之后经常用到的git push origin master和git pull origin master直接就用git psm和git plm代替了,是不是很方便?  </p><h4 id="冷门操作"><a href="#冷门操作" class="headerlink" title="冷门操作"></a>冷门操作</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.lg <span class="string">"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span>        <span class="comment">#查看日志，以后直接输入 git lg 即可</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --author=<span class="string">"teaper"</span> --pretty=tformat: --numstat | awk <span class="string">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf "added lines: %s, removed lines: %s, total lines: %s\n", add, subs, loc &#125;'</span>       <span class="comment">#统计 teaper 代码量</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | sort -u | wc -l    <span class="comment">#贡献值统计</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> --pretty=<span class="string">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n 5    <span class="comment">#查看排名前 5 的贡献者</span></span><br></pre></td></tr></table></figure><h4 id="终端代理"><a href="#终端代理" class="headerlink" title="终端代理"></a>终端代理</h4><p>主要是 <code>clone</code> 项目失败，需要终端进行翻墙，如果是普通 <code>http / https</code> 协议作代理则运行以下命令，端口号要匹配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure><p>如果是使用 <code>ss</code> 或 <code>ssr</code> 的 <code>socks5</code> 协议进行翻墙，则运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure><p>取消代理则运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h4 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h4><p>当然还有一些其他有用的配置,默认情况下 git 用的编辑器是vi,如果不喜欢可以改成其他编辑器,比如我习惯vim  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config  --global    core.editor <span class="string">"vim"</span>       <span class="comment">#设置Editor使用vim</span></span><br></pre></td></tr></table></figure><p>你们如果喜欢其他编辑器可自行搜索配置,前提是本机有安装<br>有些人纳闷我的终端怎么有各种颜色,自己却不是这样的,那是因为你们没有开启给Git着色,输入如下命令即可:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global color.ui <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>还有些其他的配置如:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.quotepath <span class="literal">false</span>   <span class="comment">#设置显示中文文件名</span></span><br></pre></td></tr></table></figure><p>以上基本所有的配置就差不多了,默认这些配置都在 ~/.gitconfig文件下的,你可以找到这个文件查看自己的配置,也可以输入 <code>git config -l</code> 命令查看  </p><h4 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h4><p>diff命令算是很常用的,使用场景是我们经常在做代码改动,但是有的时候2天前的代码了,做了哪些改动都忘记了,在提交之前需要确认下,这个时候就可以用diff来查看你到底做了哪些改动,举个例子,比如我有一个a.md的文件,我现在做了一些改动,然后输入git diff就会看到如下:<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u86o0a1j30bd03kgll.jpg" alt="diff"><br>红色的部分前面有个-代表我删除的,绿色的部分前面有个+代表我增加的,所以从这里你们很一目了然的知道我到底对这个文件做了哪些改动<br>值得一提的是直接输入git diff只能比较当前文件和暂存区文件差异,什么是暂存区?就是你还没有执行git add的文件<br>当然跟暂存区做比较之外,他还可以有其他用法,如比较两次commit之间的差异,比较两个分支之间的差异,比较暂存区和版本库之间的差异等,具体用法如下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git diff &lt;<span class="variable">$id1</span>&gt;  &lt;<span class="variable">$id2</span>&gt;          <span class="comment">#   比较两次提交之间的差异</span></span><br><span class="line">git diff &lt;branch1&gt;..&lt;branch2&gt;    <span class="comment">#   在两个分支之间比较</span></span><br><span class="line">git diff --staged            <span class="comment">#   比较暂存区和版本库差异</span></span><br></pre></td></tr></table></figure><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>我们知道checkout一般用作切换分支使用,比如切换到develop 分支,可以执行:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p>但是checkout不只用作切换分支,他可以用来切换tag,切换到某次commit,如:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout v1.0</span><br><span class="line">git checkout ffd9f2dd68f1eb21d36cee50dbdd504e95d9c8f7    <span class="comment">#后面的一长串是commit_id,可以根据git log看到</span></span><br></pre></td></tr></table></figure><p>除了有“切换”的意思,checkout还有一个撤销的作用,举个例子,假设我们在一个分支开发一个小功能,刚写完一半,这时候需求变了,而且是大变化,之前写的代码完全用不了了,好在你刚写,甚至都没有 git add进暂存区,这个时候很简单的一个操作就直接把原文件还原:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a.md</span><br></pre></td></tr></table></figure><p>这里稍微提下,checkout命令只能撤销还没有add进暂存区的文件  </p><h4 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h4><p>假设我们正在一个新的分支做新的功能,这个时候突然有一个紧急的bug需要修复,而且修复完之后需要立即发布。当然你说我先把刚写的一点代码进行提交不就行了么?这样理论上当然是ok的,但是这会产品垃圾commit,原则上我们每次的commit都要有实际的意义,你的代码只是刚写了一半,还没有什么实际的意义是不建议就这样commit的,那么有没有一种比较好的办法,可以让我暂时切到别的分支,修复完bug再切回来,而且代码也能保留的呢?  </p><p>这个时候stash命令就大有用处了,前提是我们的代码没有进行commit,哪怕你执行了add 也没关系,我们先执行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash  <span class="comment">#暂时保存工作区</span></span><br></pre></td></tr></table></figure><p>命令,什么意思呢?意思就是把当前分支所有没有 commit 的代码先暂存起来,这个时候你再执行git status你会发现当前分支很干净,几乎看不到任何改动,你的代码改动也看不见了,但其实是暂存起来了。执行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash list    <span class="comment">#查看暂存记录</span></span><br></pre></td></tr></table></figure><p>你会发现此时暂存区已经有了一条记录。<br>这个时候你可以切换会其他分支,赶紧把bug修复好,然后发布。之后一切都解决了,你再切换回来继续做你之前没做完的功能,但是之前的代码怎么还原呢?  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash apply   #还原工作区</span><br></pre></td></tr></table></figure><p>你会发现你之前的代码全部又回来了,就好像一切都没发生过一样,紧接着你最好需要把暂存区的这次stash记录删除,执行:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash drop      <span class="comment">#删除暂存记录</span></span><br></pre></td></tr></table></figure><p>就把最近一条的stash记录删除了,是不是很方便?其实还有更方便的,你可以使用:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash pop    <span class="comment">#还原工作区并删除暂存记录</span></span><br></pre></td></tr></table></figure><p>来代替apply命令,pop跟apply的唯一区别就是pop不但会帮你把代码还原,还自动帮你把这条stash记录删除,省的自己再drop list命令来确认是不是已经没有记录了<br>最后还有一个命令介绍下:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash clear   <span class="comment">#清空所有暂存记录</span></span><br></pre></td></tr></table></figure><p>就是清空所有暂存区的记录,drop是只删除一条,当然后面可以跟stash_id参数来删除指定的某条记录,不跟参数就是删除最近的,而clear是清空  </p><h4 id="merge-和-rebase"><a href="#merge-和-rebase" class="headerlink" title="merge 和 rebase"></a>merge 和 rebase</h4><p>我们知道merge分支是合并的意思,我们在一个featureA分支开发完了一个功能,这个时候需要合并到主分支master上去,我们只需要进行如下操作:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git merge featureA</span><br></pre></td></tr></table></figure><p>其实rebase命令也是合并的意思,上面的需求我们一样可以如下操作:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line">git rebase featureA</span><br></pre></td></tr></table></figure><p>rebase跟merge的区别你们可以理解成有两个书架,你需要把两个书架的书整理到一起去,第一种做法是merge,比较粗鲁暴力,就直接腾出一块地方把另一个书架的书全部放进去,虽然暴力,但是这种做法你可以知道哪些书是来自另一个书架的;第二种做法就是rebase,他会把两个书架的书先进行比较,按照购书的时间来给他重新排序,然后重新放置好,这样做的好处就是合并之后的书架看起来很有逻辑,但是你很难清晰的知道哪些书来自哪个书架的  </p><p>只能说各有好处的,不同的团队根据不同的需要以及不同的习惯来选择就好  </p><h4 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h4><p>假设这样一个场景,A和B两位同学各自开了两个分支来开发不同的功能,大部分情况下都会尽量互不干扰的,但是有一个需求A需要改动一个基础库中的一个类的方法,不巧B这个时候由于业务需要也改动了基础库的这个方法,因为这种情况比较特殊,A和B都认为不会对地方造成影响,等两人各自把功能做完了,需要合并的到主分支master的时候,我们假设先合并A的分支,这个时候没问题的,之后再继续合并B的分支,这个时候想想也知道就有冲突了,因为A和B两个人同时更改了同一个地方,Git 本身他没法判断你们两个谁更改的对,但是这个时候他会智能的提示有conflicts,需要手动解决这个冲突之后再重新进行一次commit提交。我随便在项目搞了一个冲突做下示例:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~/<span class="built_in">test</span>$ git merge feature  <span class="comment">#合并feature分支发生冲突,在a.md文件上</span></span><br><span class="line">Auto-merging a.md</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> a.md</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure><h4 id="什么是分支"><a href="#什么是分支" class="headerlink" title="什么是分支"></a>什么是分支</h4><p>我们知道孙悟空有七十二变,可以幻化万千猴子,每只猴子都和本体一模一样,本体也就是默认分支master,而从master上创建的分支develop的内容和master是一样的,也可以简单理解成复制,当猴子们打败了天兵之后,就会重新回到真身,我们把这个过程称之为合并  </p><h4 id="分支的常用操作"><a href="#分支的常用操作" class="headerlink" title="分支的常用操作"></a>分支的常用操作</h4><p>我们默认都会有一个主分支叫 master,下面我们先来看下关于分支的一些基本操作:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  develop     <span class="comment">#新建一个叫develop的分支</span></span><br></pre></td></tr></table></figure><p>这里稍微提醒下大家,新建分支的命令是基于当前所在分支的基础上进行的,即以上是基于mater分支新建了一个叫做develop的分支,此时develop分支跟 master分支的内容完全一样。如果你有A、B、C三个分支,三个分支是三位同学的,各分支内容不一样,如果你当前是在B分支,如果执行新建分支命令,则新建的分支内容跟B分支是一样的,同理如果当前所在是C分支,那就是基于C分支基础上新建的分支  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop    <span class="comment">#切换到develop分支</span></span><br></pre></td></tr></table></figure><p>如果把以上两步合并,即新建并且自动切换到develop分支:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop    <span class="comment">#创建并切换到新分支</span></span><br></pre></td></tr></table></figure><p>把develop分支推送到远程仓库  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure><p>如果你远程的分支想取名叫develop2,那执行以下代码:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop:develop2</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">但是强烈不建议这样,这会导致很混乱,很难管理,所以建议本地分支跟远程分支名要保持一致</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch          <span class="comment">#查看本地分支列表</span></span><br><span class="line">git branch -r       <span class="comment">#查看远程分支列表</span></span><br><span class="line">git branch -d develop     <span class="comment">#删除本地分支</span></span><br><span class="line">git branch -D develop     <span class="comment">#强制删除本地分支</span></span><br><span class="line">git push origin :develop    <span class="comment">#删除远程分支</span></span><br></pre></td></tr></table></figure><p>如果远程分支有个develop,而本地没有,你想把远程的develop分支迁到本地:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop origin/develop</span><br></pre></td></tr></table></figure><p>同样的把远程分支迁到本地顺便切换到该分支:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b develop origin/develop</span><br></pre></td></tr></table></figure><h4 id="团队协作流程"><a href="#团队协作流程" class="headerlink" title="团队协作流程"></a>团队协作流程</h4><p>一般来说,如果你是一个人开发,可能只需要master、develop两个分支就ok了,平时开发在develop分支进行,开发完成之后,发布之前合并到master分支,这个流程没啥大问题<br>如果你是3、5个人,那就不一样了,有人说也没多大问题啊,直接可以新建A、B、C三个人的分支啊,每人各自开发各自的分支,然后开发完成之后再逐步合并到master分支<br>然而现实却是,你正在某个分支开发某个功能呢,这时候突然发现线上有一个很严重的bug ,不得不停下手头的工作优先处理bug,而且很多时候多人协作下如果没有一个规范,很容易产生问题,所以多人协作下的分支管理规范很重要,就跟代码规范一样重要,以下就跟大家推荐一种我们内部在使用的一种分支管理流程Git Flow  </p><h4 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h4><p>Git Flow是一种比较成熟的分支管理流程,我们先看一张图能清晰的描述他整个的工作流程:<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18u8v1z5ej30gz0mn47e.jpg" alt="git flow"><br>第一次看上面那个图是不是一脸懵逼?跟我当时一样,不急,我来用简单的话给你们解释下  </p><p>一般开发来说,大部分情况下都会拥有两个分支master和develop,他们的职责分别是:  </p><blockquote><p><strong>master</strong>:永远处在即将发布(production-ready)状态<br><strong>develop</strong>:最新的开发状态   </p></blockquote><p>确切的说master、develop分支大部分情况下都会保持一致,只有在上线前的测试阶段develop比master的代码要多,一旦测试没问题,准备发布了,这时候会将develop合并到master上  </p><p>但是我们发布之后又会进行下一版本的功能开发,开发中间可能又会遇到需要紧急修复bug,一个功能开发完成之后突然需求变动了等情况,所以Git Flow除了以上master和develop两个主要分支以外,还提出了以下三个辅助分支:  </p><blockquote><p><strong>feature</strong>:开发新功能的分支,基于develop,完成后merge回develop<br><strong>release</strong>:准备要发布版本的分支,用来修复bug,基于develop,完成后merge回develop和master<br><strong>hotfix</strong>:修复master上的问题,等不及release版本就必须马上上线.基于master,完成后merge回master和develop  </p></blockquote><p>什么意思呢?<br>举个例子,假设我们已经有master和develop两个分支了,这个时候我们准备做一个功能A,第一步我们要做的,就是基于develop分支新建个分支:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  feature/A    <span class="comment">#创建功能A分支</span></span><br></pre></td></tr></table></figure><p>看到了吧,其实就是一个规范,规定了所有开发的功能分支都以feature为前缀<br>但是这个时候做着做着发现线上有一个紧急的bug需要修复,那赶紧停下手头的工作,立刻切换到master分支,然后再此基础上新建一个分支:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  hotfix/B    <span class="comment">#创建修复B分支</span></span><br></pre></td></tr></table></figure><p>代表新建了一个紧急修复分支,修复完成之后直接合并到develop和master,然后发布  </p><p>然后再切回我们的feature/A分支继续着我们的开发,如果开发完了,那么合并回develop分支,然后在develop分支属于测试环境,跟后端对接并且测试的差不多了,感觉可以发布到正式环境了,这个时候再新建一个release分支:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch  release/1.0</span><br></pre></td></tr></table></figure><p>这个时候所有的 api、数据等都是正式环境,然后在这个分支上进行最后的测试,发现bug直接进行修改,直到测试ok达到了发布的标准,最后把该分支合并到develop和master然后进行发布  </p><p>以上就是Git Flow的概念与大概流程,看起来很复杂,但是对于人数比较多的团队协作现实开发中确实会遇到这么复杂的情况,是目前很流行的一套分支管理流程,但是有人会问每次都要各种操作,合并来合并去,有点麻烦,哈哈,这点Git Flow早就想到了,为此还专门推出了一个Git Flow的工具,并且是开源的:  </p><p>GitHub开源地址:<a href="https://github.com/nvie/gitflow" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/nvie/gitflow</a><br>各系统具体<a href="https://github.com/nvie/gitflow/wiki/Installation" rel="external nofollow noopener noreferrer" target="_blank">安装方法</a>  </p><p>简单点来说,就是这个工具帮我们省下了很多步骤,比如我们当前做了一个项目,需要用git进行管理,首先就要init初始化一个项目,然后要在默认的master分支上创建develop分支及其他辅助分支,分支之间又要合并,十分麻烦,容易混乱,有了Git Flow直接如下操作完成了:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">语法:git flow init [-d]    <span class="comment">#-d标志将接受所有默认值</span></span><br><span class="line"> </span><br><span class="line">-----------------------------------------运行------------------------------------------</span><br><span class="line">~/<span class="built_in">test</span>$ git flow init      <span class="comment">#使用flow初始化git仓库</span></span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> /home/teaper/Desktop/Untitled Folder/.git/</span><br><span class="line">No branches exist yet. Base branches must be created now.</span><br><span class="line">Branch name <span class="keyword">for</span> production releases: [master]      <span class="comment">#询问你是否创建master分支,一路回车即可</span></span><br><span class="line">Branch name <span class="keyword">for</span> <span class="string">"next release"</span> development: [develop]</span><br><span class="line"> </span><br><span class="line">How to name your supporting branch prefixes?</span><br><span class="line">Feature branches? [feature/]</span><br><span class="line">Bugfix branches? [bugfix/]</span><br><span class="line">Release branches? [release/]</span><br><span class="line">Hotfix branches? [hotfix/]</span><br><span class="line">Support branches? [support/]</span><br><span class="line">Version tag prefix? []</span><br><span class="line">Hooks and filters directory? [/home/teaper/Desktop/Untitled Folder/.git/hooks]</span><br><span class="line">~/<span class="built_in">test</span>$ git br   <span class="comment">#查看分支,会发现已经创建并切换到了develop分支</span></span><br><span class="line">* develop</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p>假如我们当前处于develop或master分支,如果想要开发一个新的功能,第一步切换到develop分支,第二步新建一个以feature开头的分支名,有了Git Flow直接如下操作完成了:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature start A     <span class="comment">#创建功能A分支</span></span><br></pre></td></tr></table></figure><p>这个分支完成之后,需要合并到develop分支,然而直接进行如下操作就行:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git flow feature finish A      <span class="comment">#将功能A分支合并到develop,并且删除功能A分支</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意:创建功能A分支后,还是要把A分支内项目commit到版本库,才能执行git flow feature finish A ;如果是hotfix或者release分支,只需要把上面命令中的feature替换即可,最后会自动帮你合并到develop、master两个分支</span>  </p><p>如果需要将功能分支推/拉到远程存储库，请使用：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git flow feature publish &lt;name&gt;</span><br><span class="line">git flow feature pull &lt;remote&gt; &lt;name&gt;</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">这个我们一般不会去用它,都是等功能合并到master后一并推送</span>  </p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
            <tag> github </tag>
            
            <tag> git flow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux安装最新百度网盘客户端</title>
      <link href="/2019/06/24/baidunetdiskarchlinux/"/>
      <url>/2019/06/24/baidunetdiskarchlinux/</url>
      
        <content type="html"><![CDATA[<p>之前，由于百度公司之前不做Linux的客户端软件，我们使用百度网盘都是借助第三方的 <a href="https://github.com/iikira/BaiduPCS-Go/releases" rel="external nofollow noopener noreferrer" target="_blank">BaiduPCS-Go</a> 来下载网盘内容，最近，国内知名互联网公司都开始向 Linux 进军了，百度网盘首先中标麒麟 Linux 系统，后续微信也即将出 Linux 版，由于百度网盘也是刚出 Linux，ArchLinux 社区包还没跟进，所以我们自己通过<a href="https://pan.baidu.com/download" rel="external nofollow noopener noreferrer" target="_blank">官网</a>提供的 <code>deb</code> 包进行转换成 ArchLinux 可以安装的 <code>.pkg.tar.xz</code> 包  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g4c1xt9banj31hc0lvgs6.jpg" alt>  </p><p>下载官网的 <code>baidunetdisk_linux_2.0.1.deb</code> 安装包到本地<br><code>deb</code> 包转换成 <code>ArchLinux</code> 包需要借助 <code>Debtap</code>,所以需要先安装一下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S debtap    <span class="comment">#依赖bash、binutils、pkgfile、fakeroot包</span></span><br></pre></td></tr></table></figure><p>顺便检查一下电脑是否安装上面几个依赖包，确认无误后，同步一下 <code>pkgfile</code> 和 <code>debtap</code> 数据源  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo debtap -u</span><br></pre></td></tr></table></figure><p>接下来就可以转换包了，以 <code>baidunetdisk_linux_2.0.1.deb</code> 为例  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">debtap baidunetdisk_linux_2.0.1.deb     <span class="comment">#转换包</span></span><br><span class="line"><span class="comment">#--------------------------输出日志------------------------------------</span></span><br><span class="line">==&gt; Extracting package data...</span><br><span class="line">==&gt; Fixing possible directories structure differencies...</span><br><span class="line">==&gt; Generating .PKGINFO file...</span><br><span class="line"></span><br><span class="line">:: Enter Packager name:</span><br><span class="line">baidunetdisk_linux_2.0.1    <span class="comment">#输入包名字</span></span><br><span class="line"></span><br><span class="line">:: Enter package license (you can enter multiple licenses comma separated):</span><br><span class="line">SEVGHUNHSFA4SKKSN7B8BG  <span class="comment">#输入许可证，随便写（大写字母+数字组合），反正是自己用</span></span><br><span class="line"></span><br><span class="line">*** Creation of .PKGINFO file <span class="keyword">in</span> progress. It may take a few minutes, please <span class="built_in">wait</span>...</span><br><span class="line"></span><br><span class="line">==&gt; Checking and generating .INSTALL file (<span class="keyword">if</span> necessary)...</span><br><span class="line"></span><br><span class="line">:: If you want to edit .PKGINFO and .INSTALL files (<span class="keyword">in</span> this order), press (1) For vi (2) For nano (3) For default editor (4) For a custom editor or any other key to <span class="built_in">continue</span>: </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">==&gt; Generating .MTREE file...</span><br><span class="line"></span><br><span class="line">==&gt; Creating final package...</span><br><span class="line">==&gt; Package successfully created!</span><br><span class="line">==&gt; Removing leftover files...</span><br></pre></td></tr></table></figure><p>转换成功之后，就可以看到本地多了 <code>baidunetdisk-2.0.1-1-x86_64.pkg.tar.xz</code> 包，使用 <code>pacman</code> 将其安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U baidunetdisk-2.0.1-1-x86_64.pkg.tar.xz   <span class="comment">#pacman 安装本地包</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g4c2cm7jdwj31hc0u0gof.jpg" alt>  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> pacman </tag>
            
            <tag> debtap </tag>
            
            <tag> Electron </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/2019/06/21/prototype/"/>
      <url>/2019/06/21/prototype/</url>
      
        <content type="html"><![CDATA[<p><span style="color:#B900ff;">原型模式主要解决什么问题？</span><br>用过 git 的可能知道，git 有个命令 <code>git clone</code> ，将远程仓库的内容复制到本地，在实际开发中，我们会在克隆下来的项目中继续修改或添加；放在 Java 中，当我们需要使用 new 创建与已存在对象类似的对象时，是否可以以某个对象为原型去创建新对象，提高效率呢？  </p><p><span style="color:#B900ff;">那么，什么是原型模式呢？</span><br><strong>原型模式</strong>：就是Java的克隆技术，以某个对象为原型，复制出新的对象（新的对象具备原型对象的特点）  </p><p><span style="color:#ff0000;">注意：克隆类似于 new，但是不同于 new。new 创建的对象采用的是默认值，克隆出的对象的属性值完全和原型对象相同，并且克隆出的新对象改变不会影响原型对象</span>  </p><p><span style="color:#B900ff;">原型模式如何实现？</span><br>原型模式（Prototype）需要实现，就涉及到内存复制操作，所幸 Java 中提供了 <code>clone()</code> 方法替我们做了大部分事情  </p><h4 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h4><p>首先，需要创建一个对象类，这里使用 Sheep（羊）来做例子  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【原型模式】创建羊（Sheep）类（浅克隆）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 1997年英国克隆羊多利</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">//生日</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//继承了 Cloneable 接口，记得重写 Object对象 的 clone() 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Object object = <span class="keyword">super</span>.clone();<span class="comment">//这里使用 super，直接调用 object 对象的 clone() 方法；</span></span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get/set访问器和构造器</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要继承 Cloneable 接口，该接口是个<strong>空接口</strong><br>然后重写 Object 类的 <code>clone()</code> 方法  </p><p>在测试方法中创建“多利”羊为原型，在其基础上创建“少利”羊，少利羊属性和多利羊一致，修改少利羊属性不会影响多利羊  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【原型模式】测试原型模式（浅克隆）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 1997年英国克隆羊多利</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="number">12312321331L</span>);</span><br><span class="line">SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建多利羊原型</span></span><br><span class="line">Sheep sheep1 = <span class="keyword">new</span> Sheep(<span class="string">"多利"</span>, date);</span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep1.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep1.getBirthday()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//以上面的多利羊为原型创建新羊少利</span></span><br><span class="line">Sheep sheep2 = (Sheep) sheep1.clone();</span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep2.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep2.getBirthday()));</span><br><span class="line">sheep2.setName(<span class="string">"少利"</span>);</span><br><span class="line">date.setTime(<span class="number">23432432423L</span>);<span class="comment">//修改时间</span></span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep2.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep2.getBirthday()));</span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep1.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep1.getBirthday()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>运行结果</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：少利羊年龄：1970-09-29 01:00:32</span><br><span class="line">羊名字：多利羊年龄：1970-09-29 01:00:32</span><br></pre></td></tr></table></figure></details><p>分析：首先创建的一个老的时间，设置好了时间输出格式 <code>yyyy-MM-dd hh:mm:ss</code>，然后创建了多利羊，输出信息就是多利羊的名字和老时间；这时候使用 <code>sheep1.clone()</code> 克隆多利羊创建少利羊，少利羊的信息和多利羊是一样的；然后我们说了，克隆出的对象是可以修改的，这时候修改少利羊的信息，修改 <code>date</code> 时间，会发现少利羊的时间也会被修改，而我们明明没有修改少利羊的 birthday 属性，也就是说，克隆没有深入到引用传递的值，通过 sheep1 克隆了 sheep2 ，但是 sheep1 和 sheep2 的某个引用类型属性值还是指向同一个 date；这种克隆我们称之为<strong>浅克隆</strong>   </p><p>那么什么叫深克隆呢？同理，只需要 sheep1 和 sheep2 的某个引用类型属性值(例如：date)也克隆了一份，就叫<strong>深克隆</strong>  </p><h4 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h4><p><strong>写法一：</strong> 普通深克隆只需要在重写 <code>clone()</code> 方法的时候，把需要克隆的属性也克隆即可  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承了 Cloneable 接口，记得重写 Object对象 的 clone() 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Object object = <span class="keyword">super</span>.clone();<span class="comment">//这里使用 super，直接调用 object 对象的 clone() 方法；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加如下代码实现深克隆（deep clone）</span></span><br><span class="line">Sheep sheep = (Sheep) object;</span><br><span class="line">sheep.birthday = (Date) <span class="keyword">this</span>.birthday.clone();<span class="comment">//把属性也进行克隆</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>运行结果</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：少利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：多利羊年龄：1970-09-29 01:00:32</span><br></pre></td></tr></table></figure></details><p>分析：修改少利羊之后的输出时间（第三行）和第一次的克隆时间保持了一致，也就是说克隆到了多利羊的时间指向的值  </p><p><strong>写法二：</strong> 使用序列化和反序列化技术实现深克隆<br>首先，Sheep 类要继承 <code>Serializable</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【原型模式】创建羊（Sheep）类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 1997年英国克隆羊多利</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line"><span class="keyword">private</span> Date birthday;<span class="comment">//生日</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, Date birthday)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 IO 流实现，需要抛出几个异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.prototype;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【原型模式】测试原型模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 1997年英国克隆羊多利</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException, IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">Date date = <span class="keyword">new</span> Date(<span class="number">12312321331L</span>);</span><br><span class="line">SimpleDateFormat ft = <span class="keyword">new</span> SimpleDateFormat (<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建多利羊原型</span></span><br><span class="line">Sheep sheep1 = <span class="keyword">new</span> Sheep(<span class="string">"多利"</span>, date);</span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep1.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep1.getBirthday()));</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用序列化和反序列化技术实现深克隆，创建少利羊</span></span><br><span class="line">ByteArrayOutputStream byteArrayOutputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">ObjectOutputStream objectOutputStream = <span class="keyword">new</span> ObjectOutputStream(byteArrayOutputStream);</span><br><span class="line">objectOutputStream.writeObject(sheep1);</span><br><span class="line"><span class="keyword">byte</span>[] byteArray = byteArrayOutputStream.toByteArray();</span><br><span class="line"></span><br><span class="line">ByteArrayInputStream byteArrayInputStream = <span class="keyword">new</span> ByteArrayInputStream(byteArray);</span><br><span class="line">ObjectInputStream objectInputStream = <span class="keyword">new</span> ObjectInputStream(byteArrayInputStream);</span><br><span class="line">Sheep sheep2 = (Sheep) objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改少利羊信息和 date 值</span></span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep2.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep2.getBirthday()));</span><br><span class="line">sheep2.setName(<span class="string">"少利"</span>);</span><br><span class="line">date.setTime(<span class="number">23432432423L</span>);<span class="comment">//修改时间</span></span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep2.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep2.getBirthday()));</span><br><span class="line">System.out.println(<span class="string">"羊名字："</span>+sheep1.getName()+<span class="string">"\t羊年龄："</span>+ft.format(sheep1.getBirthday()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>运行结果</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：多利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：少利羊年龄：1970-05-23 08:05:21</span><br><span class="line">羊名字：多利羊年龄：1970-09-29 01:00:32</span><br></pre></td></tr></table></figure></details><h4 id="测试原型模式运行效率"><a href="#测试原型模式运行效率" class="headerlink" title="测试原型模式运行效率"></a>测试原型模式运行效率</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【原型模式】测试原型模式运行效率</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 普通new对象 V/S 原型模式创建对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="comment">//调用以下两个方法，创建1000个对象</span></span><br><span class="line">testNew(<span class="number">1000</span>);</span><br><span class="line">testClone(<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//new方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testNew</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">Laptop tLaptop = <span class="keyword">new</span> Laptop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"new的方式创建耗时："</span>+(end-start));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//clone方式</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClone</span><span class="params">(<span class="keyword">int</span> size)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">Laptop tLaptop = <span class="keyword">new</span> Laptop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">Laptop tLaptop2 = (Laptop) tLaptop.clone();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"clone的方式创建耗时："</span>+(end-start));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//笔记本电脑类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Laptop</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123; </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Laptop</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">10</span>);<span class="comment">//线程暂停10毫秒代替耗时时间</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clone() 方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Object object = <span class="keyword">super</span>.clone();</span><br><span class="line"><span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><details><summary>运行结果</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new的方式创建耗时：10170</span><br><span class="line"><span class="built_in">clone</span>的方式创建耗时：11</span><br></pre></td></tr></table></figure></details><p>如果需要短时间创建大量对象，并且 new 的过程比较耗时，则可以考虑原型模式，原型模式通常和工厂模式搭配</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习利器V2ray了解一下</title>
      <link href="/2019/06/02/v2ray/"/>
      <url>/2019/06/02/v2ray/</url>
      
        <content type="html"><![CDATA[<p>之前我一直在Arch Linux下使用 <code>shadowsocksr</code>，随着最近墙的升级，服务器一批一批的封，好多人的 <code>22</code> 端口都封了，SSH登录不了服务器，还有各种TCP回程阻断，网络超时问题，恰好发现了<a href="https://www.v2ray.com/" rel="external nofollow noopener noreferrer" target="_blank">V2ray</a>这款通信工具，现在就来安利一波～  </p><h4 id="Project-V"><a href="#Project-V" class="headerlink" title="Project V"></a>Project V</h4><p>要了解 <code>V2ray</code> 就必须要知道 <a href="https://github.com/v2ray" rel="external nofollow noopener noreferrer" target="_blank">Project V</a>，根据官方说法：<code>Project V</code> 是一个工具集合，它可以帮助你打造专属的基础<strong>通信网络</strong>，<strong>Project V 的核心工具称为 V2Ray</strong>，其主要负责网络协议和功能的实现，与其它 <code>Project V</code> 通信，<code>V2Ray</code> 可以单独运行，也可以和其它工具配合，以提供简便的操作流程  </p><p>相对于<code>shadowsocksr</code>来说，它有以下几个优势：  </p><blockquote><p><strong>多入口多出口</strong>: 一个 <code>V2Ray</code> 进程可并发支持多个入站和出站协议，每个协议可独立工作<br><strong>可定制化路由</strong>: 入站流量可按配置由不同的出口发出。轻松实现按区域或按域名分流，以达到最优的网络性能<br><strong>多协议支持</strong>: V2Ray 可同时支持多个协议，包括 <code>Socks</code>、<code>HTTP</code>、<code>Shadowsocks</code>、<code>VMess</code> 等<br><strong>隐蔽性</strong>: V2Ray 的节点可以伪装成正常的网站（HTTPS），将其流量与正常的网页流量混淆，以避开第三方干扰<br><strong>反向代理</strong>: 通用的反向代理支持，可实现内网穿透功能<br><strong>多平台支持</strong>: 原生支持所有常见平台，如 Windows、Mac OS、Linux，并已有第三方支持移动平台  </p></blockquote><h4 id="安装V2ray服务器脚本"><a href="#安装V2ray服务器脚本" class="headerlink" title="安装V2ray服务器脚本"></a>安装V2ray服务器脚本</h4><p>废话不多说，这里我直接参考<a href="https://www.v2ray.com/" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>，在我的<a href="https://my.vultr.com/billing/" rel="external nofollow noopener noreferrer" target="_blank">Vultr</a>的<code>Ubuntu16.04 Server</code>主机上安装网络代理，然后在<code>Arch Linux</code>本机上连接，Windows用户请参照官方文档自行安装客户端软件，配置部分是一样的 </p><p>首先使用SSH登录VPS主机  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@139.180.166.23       <span class="comment">#使用ssh连接</span></span><br></pre></td></tr></table></figure><p>然后使用 bash 命令官方提供的一键安装脚本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">root@VentUB:~<span class="comment"># bash &lt;(curl -L -s https://install.direct/go.sh)  #安装一键脚本</span></span><br><span class="line"><span class="comment">#---------------------------输出日志-----------------------------------</span></span><br><span class="line">Installing V2Ray v4.18.2 on x86_64</span><br><span class="line">Downloading V2Ray: https://github.com/v2ray/v2ray-core/releases/download/v4.18.2/v2ray-linux-64.zip</span><br><span class="line">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   608    0   608    0     0   1458      0 --:--:-- --:--:-- --:--:--  1458</span><br><span class="line">100 11.2M  100 11.2M    0     0  2988k      0  0:00:03  0:00:03 --:--:-- 4391k</span><br><span class="line">Extracting V2Ray package to /tmp/v2ray.</span><br><span class="line">Archive:  /tmp/v2ray/v2ray.zip</span><br><span class="line">  inflating: /tmp/v2ray/config.json  </span><br><span class="line">   creating: /tmp/v2ray/doc/</span><br><span class="line">  inflating: /tmp/v2ray/doc/readme.md  </span><br><span class="line">  inflating: /tmp/v2ray/geoip.dat    </span><br><span class="line">  inflating: /tmp/v2ray/geosite.dat  </span><br><span class="line">   creating: /tmp/v2ray/systemd/</span><br><span class="line">  inflating: /tmp/v2ray/systemd/v2ray.service  </span><br><span class="line">   creating: /tmp/v2ray/systemv/</span><br><span class="line">  inflating: /tmp/v2ray/systemv/v2ray  </span><br><span class="line">  inflating: /tmp/v2ray/v2ctl        </span><br><span class="line"> extracting: /tmp/v2ray/v2ctl.sig    </span><br><span class="line">  inflating: /tmp/v2ray/v2ray        </span><br><span class="line"> extracting: /tmp/v2ray/v2ray.sig    </span><br><span class="line">  inflating: /tmp/v2ray/vpoint_socks_vmess.json  </span><br><span class="line">  inflating: /tmp/v2ray/vpoint_vmess_freedom.json  </span><br><span class="line">PORT:33857      <span class="comment">#记下PORT</span></span><br><span class="line">UUID:5182c7a0-0279-4221-9294-b16d9d047c6e   <span class="comment">#记下UUID</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/v2ray.service to /etc/systemd/system/v2ray.service.</span><br><span class="line">V2Ray v4.18.2 is installed.     <span class="comment">#V2Ray版本</span></span><br></pre></td></tr></table></figure><p>记录下日志中提示的 <strong>PORT</strong>  和  <strong>UUID</strong> 的值，安装成功之后会在<code>/etc/v2ray</code><br>下生成一个服务器端模板文件<code>config.json</code>文件，使用vim打开它，具体关注我注释的几个参数  </p><details><summary>服务器端config.json文件</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"inbounds"</span>: [&#123;</span><br><span class="line">    <span class="string">"port"</span>: 33857,      <span class="comment">#V2Ray 监听的端口号，客户端连接会用到</span></span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"vmess"</span>,    <span class="comment">#入站协议，与客户端保持一致</span></span><br><span class="line">    <span class="string">"settings"</span>: &#123;</span><br><span class="line">      <span class="string">"clients"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"id"</span>: <span class="string">"5182c7a0-0279-4221-9294-b16d9d047c6e"</span>,     <span class="comment">#UUID值</span></span><br><span class="line">          <span class="string">"level"</span>: 1,</span><br><span class="line">          <span class="string">"alterId"</span>: 64 <span class="comment">#用于认证的动态id</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"outbounds"</span>: [&#123;</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"freedom"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;&#125;</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    <span class="string">"protocol"</span>: <span class="string">"blackhole"</span>,</span><br><span class="line">    <span class="string">"settings"</span>: &#123;&#125;,</span><br><span class="line">    <span class="string">"tag"</span>: <span class="string">"blocked"</span></span><br><span class="line">  &#125;],</span><br><span class="line">  <span class="string">"routing"</span>: &#123;</span><br><span class="line">    <span class="string">"rules"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">"type"</span>: <span class="string">"field"</span>,</span><br><span class="line">        <span class="string">"ip"</span>: [<span class="string">"geoip:private"</span>],</span><br><span class="line">        <span class="string">"outboundTag"</span>: <span class="string">"blocked"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p><code>config.json</code>中的数据不需要更改，后面客户端连接的时候就参照上面的值就行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">service v2ray start <span class="comment">#服务器启动v2ray</span></span><br><span class="line">service v2ray status        <span class="comment">#查看运行状态</span></span><br></pre></td></tr></table></figure><h4 id="安装V2ray客户端"><a href="#安装V2ray客户端" class="headerlink" title="安装V2ray客户端"></a>安装V2ray客户端</h4><p>客户端软件在<a href="https://github.com/v2ray/v2ray-core/releases" rel="external nofollow noopener noreferrer" target="_blank">发布页</a>，根据你需要的系统下载匹配型号的安装包，我这里以我系统<code>Arch Linux</code>为例子，其他系统请自行参照<a href>官方文档</a>配置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S v2ray    <span class="comment">#ArchLinux/Manjaro安装v2ray</span></span><br></pre></td></tr></table></figure><p>使用gedit编辑<code>/etc/v2ray/config.json</code>文件，替换为我这个模板，修改一下参数即可，注意修改我注释的地方，其他地方不变，实再不会可以用<a href="https://intmainreturn0.com/v2ray-config-gen/" rel="external nofollow noopener noreferrer" target="_blank">配置生成器</a>  </p><details><summary>ArchLinux下的v2ray/config.json</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"log"</span>:&#123;</span><br><span class="line">        <span class="string">"loglevel"</span>:<span class="string">"warning"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"inbound"</span>:&#123;</span><br><span class="line">        <span class="string">"port"</span>:1088,    <span class="comment">#本地端口，1080 被我 ssr 用了</span></span><br><span class="line">        <span class="string">"listen"</span>:<span class="string">"127.0.0.1"</span>,</span><br><span class="line">        <span class="string">"protocol"</span>:<span class="string">"socks"</span>,     <span class="comment">#网络传输协议</span></span><br><span class="line">        <span class="string">"settings"</span>:&#123;</span><br><span class="line">            <span class="string">"auth"</span>:<span class="string">"noauth"</span>,</span><br><span class="line">            <span class="string">"udp"</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"outbounds"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"tag"</span>:<span class="string">"proxy"</span>,</span><br><span class="line">            <span class="string">"protocol"</span>:<span class="string">"vmess"</span>,</span><br><span class="line">            <span class="string">"settings"</span>:&#123;</span><br><span class="line">                <span class="string">"vnext"</span>:[</span><br><span class="line">                    <span class="comment">#一号服务器</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"address"</span>:<span class="string">"139.182.212.71"</span>, <span class="comment">#IP地址</span></span><br><span class="line">                        <span class="string">"port"</span>:32456,   <span class="comment">#端口</span></span><br><span class="line">                        <span class="string">"users"</span>:[</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">"id"</span>:<span class="string">"8b9658de-a0s5-408j-a3b3-27a297e4f40b"</span>,   <span class="comment">#UUID</span></span><br><span class="line">                                <span class="string">"alterId"</span>:64</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">#二号服务器（可选）</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="string">"address"</span>:<span class="string">"45.77.180.110"</span>,</span><br><span class="line">                        <span class="string">"port"</span>:22071,</span><br><span class="line">                        <span class="string">"users"</span>:[</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="string">"id"</span>:<span class="string">"13e61d3a-9ce7-428d-a7b6-67e9f8e0bf12"</span>,</span><br><span class="line">                                <span class="string">"alterId"</span>:64</span><br><span class="line">                            &#125;</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"policy"</span>:&#123;</span><br><span class="line">        <span class="string">"levels"</span>:&#123;</span><br><span class="line">            <span class="string">"0"</span>:&#123;</span><br><span class="line">                <span class="string">"uplinkOnly"</span>:0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>V2ray 支持配置多个服务器，那么多个服务器配置的时候，它其实是轮询访问的，也就是说第一个数据包走第一个服务器，第二个数据包走第二个服务器，而不是我们一般认为的第一个服务器被墙了就自动切换到第二个服务器，然后继续传输</p><p>路由规则参照 <a href="https://github.com/v2ray/domain-list-community" rel="external nofollow noopener noreferrer" target="_blank">domain-list-community</a> 域名列表，如果该项目中有一整套 <code>google</code> 顶级域名及其子域名，则用 <code>geosite</code> 写成 <code>geosite:google</code> ，如果是普通网站，则使用 <code>domain</code> 写成 <code>domain:google.com</code></p></details><p>使用<code>v2ray</code>自带了一个检查工具<code>v2ray -test</code>检查<code>json</code>文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v2ray -<span class="built_in">test</span> -config /etc/v2ray/config.json  <span class="comment">#检查json</span></span><br><span class="line">V2Ray 4.18.0 (Po) 20190228</span><br><span class="line">A unified platform <span class="keyword">for</span> anti-censorship.</span><br><span class="line">Configuration OK.</span><br></pre></td></tr></table></figure><p>显示<code>OK</code>就表示没问题了，可以开启本机的开机自启服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> v2ray  <span class="comment">#开机自启v2ray</span></span><br><span class="line">systemctl start v2ray   <span class="comment">#启动v2ray</span></span><br></pre></td></tr></table></figure><h4 id="配置shell代理"><a href="#配置shell代理" class="headerlink" title="配置shell代理"></a>配置shell代理</h4><p>为了解决终端下载被墙服务器的安装包失败的问题，所以需要让终端也可以翻墙，顺便提升下载速度  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.bashrc    <span class="comment">#编辑.bashrc文件</span></span><br></pre></td></tr></table></figure><p>在最后追加以下配置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> http_proxy=<span class="string">"socks5://127.0.0.1:1088"</span>     <span class="comment">#本地端口1088</span></span><br><span class="line"><span class="built_in">export</span> https_proxy=<span class="string">"socks5://127.0.0.1:1088"</span></span><br></pre></td></tr></table></figure><p>保存之后运行 <code>source ~/.bashrc</code> 命令让它生效</p><h4 id="设置PAC代理"><a href="#设置PAC代理" class="headerlink" title="设置PAC代理"></a>设置PAC代理</h4><p><code>PAC</code>代理需要生成一个<code>.pac</code>的文件，首先本机安装<code>pip</code>工具 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S python-pip       <span class="comment">#安装pip</span></span><br><span class="line">pip -V      <span class="comment">#查看pip版本</span></span><br><span class="line"><span class="comment">#-------------------------输出-----------------------------</span></span><br><span class="line">pip 19.0.3 from /usr/lib/python3.7/site-packages/pip (python 3.7)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install genpac     <span class="comment">#使用pip安装genpac，需要root权限</span></span><br><span class="line"><span class="comment">#---------------------------输出-----------------------</span></span><br><span class="line">Collecting genpac</span><br><span class="line">  Downloading https://files.pythonhosted.org/packages/48/fb/b8f9cce57c4ea856e7dd1f9fb917df2896d7e62d43c50ed1af2e50a4e57d/genpac-2.1.0.tar.gz (102kB)</span><br><span class="line">     |████████████████████████████████| 112kB 111kB/s </span><br><span class="line">Installing collected packages: genpac</span><br><span class="line">  Running setup.py install <span class="keyword">for</span> genpac ... <span class="keyword">done</span></span><br><span class="line">Successfully installed genpac-2.1.0</span><br></pre></td></tr></table></figure><p>最后执行以下命令，会生成一个auto.pac文件，无输出结果表示执行成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">genpac --format=pac -o auto.pac --pac-proxy=<span class="string">"SOCKS5 127.0.0.1:1088"</span></span><br></pre></td></tr></table></figure><p>然后在系统中配置代理，以我本机的<code>gnome</code>桌面为例，图1、3是PAC代理，引导pac文件的绝对路径<code>file:///etc/v2ray/auto.pac</code>；图2是全局代理，也可以通过以下命令来设置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gsettings <span class="built_in">set</span> org.gnome.system.proxy autoconfig-url file:///etc/v2ray/auto.pac</span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.system.proxy mode <span class="string">'auto'</span></span><br><span class="line"></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.system.proxy.socks host <span class="string">'127.0.0.1'</span></span><br><span class="line">gsettings <span class="built_in">set</span> org.gnome.system.proxy.socks port 1088</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/06/02/5cf3ad11830e456416.png" alt>  </p><p><img src="https://i.loli.net/2019/06/02/5cf3ad19058b190157.png" alt></p><p><img src="https://i.loli.net/2019/06/02/5cf3ad1f944f214959.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> V2ray </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图床工具PicGo+Github</title>
      <link href="/2019/06/01/picgoimgs/"/>
      <url>/2019/06/01/picgoimgs/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所谓图床工具，就是自动把本地图片上传到服务器，并获取其http/https链接的一款工具，让其可以在互联网上得到访问<br>网络上有很多图床工具，就目前使用种类而言，<a href="https://molunerfinn.com/PicGo/" rel="external nofollow noopener noreferrer" target="_blank">PicGo</a> 算得上一款比较优秀的图床工具  </p></blockquote><p><a href="https://github.com/Molunerfinn/PicGo" rel="external nofollow noopener noreferrer" target="_blank">PicGo</a>基于 <a href="https://github.com/SimulatedGREG/electron-vue" rel="external nofollow noopener noreferrer" target="_blank">Electron-vue</a> 开发的软件，可以支持<a href="https://chrome.google.com/webstore/detail/%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E5%9B%BE%E5%BA%8A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf" rel="external nofollow noopener noreferrer" target="_blank">微博</a>、七牛云、腾讯云COS、又拍云、GitHub、阿里云OSS、<a href="https://link.juejin.im/?target=http%3A%2F%2FSM.MS" rel="external nofollow noopener noreferrer" target="_blank">SM.MS</a>、imgur 等8种常用图床，功能强大，简单易用!  </p><h4 id="下载和安装PicGo"><a href="#下载和安装PicGo" class="headerlink" title="下载和安装PicGo"></a>下载和安装PicGo</h4><p>下载地址参见<a href="https://github.com/Molunerfinn/PicGo/releases" rel="external nofollow noopener noreferrer" target="_blank">github发布页</a>  </p><blockquote><p>macOS用户请下载最新版本的dmg文件<br>windows用户请下载最新版本的exe文件<br>linux用户请下载AppImage文件  </p></blockquote><p>Arch Linux用户使用 <code>aurman -S picgo-appimage</code> 安装，或者使用 <a href>yay</a> 安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yay -S picgo-appimage       <span class="comment">#一般不是最新版本</span></span><br><span class="line">sudo pacman -S xclip        <span class="comment">#剪贴板上传图片需要的依赖</span></span><br></pre></td></tr></table></figure><p>安装成功，你就可以使用其中的 <a href="https://link.juejin.im/?target=http%3A%2F%2FSM.MS" rel="external nofollow noopener noreferrer" target="_blank">SM.MS</a> 图床，其他图床需要自行配置<span style="color:#ff0000;">(本教程搭建Github图床)</span>  </p><h4 id="Github-token"><a href="#Github-token" class="headerlink" title="Github token"></a>Github token</h4><p>登录你的 <a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 账号，新建一个公有仓库 <code>picgoimgs</code> ，或者使用已有仓库<br>进入 <a href="https://github.com/settings/tokens" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/settings/tokens</a>，点击 <code>Generate new token</code> 创建一个新的 <code>token</code><br>勾选 <code>repo</code> 复选框，Note说明随便写，我这里是 <code>For PicGo</code> ，表示用于 PicGo图床  </p><p><img src="https://i.loli.net/2019/05/24/5ce7a447a047350146.png" alt>  </p><p>点击最下方绿色 <code>Generate token</code> 的按钮生成<code>token</code>  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3kyp69v3wj30rq0cgmz6.jpg" alt>  </p><p>复制绿色背景的那条编码，将其存储起来，因为它只显示一次  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8c473a9580043gd33a8b45f3610c7f59646b662     <span class="comment">#示范</span></span><br></pre></td></tr></table></figure><h4 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h4><p>设定仓库名：teaper/picgoimgs<br>设定分支名字：master<br>设定Token：8c473a9580043gd33a8b45f3610c7f59646b662  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3kyo9373rj30j40a6q3k.jpg" alt></p><p>存储路径和自定义域名可以不写，设定自定义域名需要在域名DNS下解析你的github服务器  </p><p>点击“设为默认图床”，当图片上传成功之后，可以看到仓库中多了一个文件  </p><p><img src="https://raw.githubusercontent.com/teaper/picgoimgs/master/Screenshot%20from%202019-05-24%2016-19-25.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo＋Github搭建静态博客</title>
      <link href="/2019/05/31/hexogithub/"/>
      <url>/2019/05/31/hexogithub/</url>
      
        <content type="html"><![CDATA[<p><span style="color:#B900ff;">什么是Hexo？</span><br><a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>是一个快速，简单和强大的博客框架。您使用<a href="http://daringfireball.net/projects/markdown/" rel="external nofollow noopener noreferrer" target="_blank">Markdown</a>（或其他语言）撰写帖子，Hexo会在几秒钟内生成具有漂亮主题的静态文件  </p><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>安装Hexo之前需要首先安装以下依赖  </p><blockquote><p><a href="http://nodejs.org/" rel="external nofollow noopener noreferrer" target="_blank">Node.js</a>（至少应该是nodejs 6.9）<br><a href="http://git-scm.com/" rel="external nofollow noopener noreferrer" target="_blank">Git</a>  </p></blockquote><p>如果<code>Node.js</code>和<code>Git</code>在你本机安装好了，可以直接使用以下命令安装<code>Hexo</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g hexo-cli    <span class="comment">#安装hexo</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">如果还没有安装<code>Node.js</code>和<code>Git</code>，请先安装好，再执行上面的安装命令安装<code>hexo</code></span>  </p><h5 id="安装Git及SSH"><a href="#安装Git及SSH" class="headerlink" title="安装Git及SSH"></a>安装Git及SSH</h5><p>注意：这里我是以<code>ArchLinux</code>为例，<code>Debian</code>系的<code>Ubuntu</code>、<code>Deepin</code>替换安装命令<code>pacman</code>为<code>apt</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git <span class="comment">#安装git</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span>   <span class="comment">#配置你的git用户名</span></span><br><span class="line">git config --global user.email <span class="string">"youremail@example.com"</span>      <span class="comment">#配置你的git邮箱</span></span><br><span class="line">git config --list   <span class="comment">#查看</span></span><br><span class="line"></span><br><span class="line">sudo pacman -S openssh   <span class="comment">#安装ssh服务</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span>    <span class="comment">#邮箱同上，一路按Enter</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh   <span class="comment">#进入.ssh隐藏文件夹</span></span><br><span class="line">gedit id_rsa.pub       <span class="comment">#打开公钥并复制id_rsa.pub文件中的内容</span></span><br></pre></td></tr></table></figure><p>进入你自己的<a href="https://github.com" rel="external nofollow noopener noreferrer" target="_blank">github</a><br>进入<code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code><br>新建一个key，名字随便，把复制的内容粘贴上去  </p><h5 id="安装Node-js及npm包"><a href="#安装Node-js及npm包" class="headerlink" title="安装Node.js及npm包"></a>安装Node.js及npm包</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yay -S nodejs npm       <span class="comment">#安装</span></span><br><span class="line">  </span><br><span class="line">node -v     <span class="comment">#查看node.js版本</span></span><br><span class="line">npm -v      <span class="comment">#查看npm版本</span></span><br><span class="line"></span><br><span class="line">sudo npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org    <span class="comment">#更换npn镜像为淘宝镜像</span></span><br><span class="line">sudo npm config list    <span class="comment">#查看下配置是否生效</span></span><br></pre></td></tr></table></figure><h4 id="建立博客文件夹"><a href="#建立博客文件夹" class="headerlink" title="建立博客文件夹"></a>建立博客文件夹</h4><p>手动创建一个文件夹，示例：<code>hexoblog</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexoblog    <span class="comment">#初始化文件夹</span></span><br><span class="line"><span class="built_in">cd</span> hexoblog   <span class="comment">#进入文件夹</span></span><br><span class="line">npm install <span class="comment">#安装必备的hexo组件</span></span><br></pre></td></tr></table></figure><p>然后可以看到文件夹中自动生成了一些文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml     <span class="comment">#网站的配置信息，您可以在此配置参数</span></span><br><span class="line">├── node_modules    <span class="comment">#npm安装的所有程序包</span></span><br><span class="line">├── package.json    <span class="comment">#npm安装的应用程序的信息</span></span><br><span class="line">├── package-lock.json   <span class="comment">#针对和package.json中的应用程序提供更多详细信息</span></span><br><span class="line">├── scaffolds       <span class="comment">#文章模版文件夹</span></span><br><span class="line">├── <span class="built_in">source</span>          <span class="comment">#资源文件夹，以下划线开头的文件/文件夹会被忽略</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">├── themes          <span class="comment">#主题文件夹，Hexo会根据主题来生成网页</span></span><br><span class="line">|   └── landscape   <span class="comment">#原始的hexo默认主题</span></span><br><span class="line">├── yarn-error.log  <span class="comment">#日志文件</span></span><br><span class="line">└── .gitignore      <span class="comment">#忽略文件，用于配置忽略条件</span></span><br></pre></td></tr></table></figure><p>接下来运行以下两个命令，查看效果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g  <span class="comment">#生成静态网页</span></span><br><span class="line">hexo s  <span class="comment">#打开本地服务器</span></span><br></pre></td></tr></table></figure><p>生成的静态文件会存放在<code>hexoblog</code>下的<code>public</code>文件夹中，每次生成，里面的文件会替换掉原来的文件<br>然后终端会提示打开 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a> 预览效果，使用浏览器打开可以看到，<strong>好丑好丑</strong>，是不是？  </p><h4 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h4><p>由于默认的 hexo 主题<code>landscape</code>实在太丑了，所以我们可以去 <a href="https://hexo.io/themes/" rel="external nofollow noopener noreferrer" target="_blank">hexo 主题</a>中找一个自己喜欢的主题，例如我用的是 <a href="https://github.com/sabrinaluo/hexo-theme-replica" rel="external nofollow noopener noreferrer" target="_blank">Replica</a> ，一款模范 github 的博客主题，在它的 <code>README.md</code> 文件中已经给出了<a href="https://sabrinaluo.github.io/tech/" rel="external nofollow noopener noreferrer" target="_blank">效果预览</a>，以及相关小部件 <span style="color:#ff0000">(npm应用程序)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:sabrinaluo/hexo-theme-replica.git themes/replica     <span class="comment">#将主题克隆到主题文件夹</span></span><br></pre></td></tr></table></figure><p>在 <code>hexoblog</code>(项目根目录) 的 <code>_config.yml</code> 中指定主题为 <code>replica</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: replica</span><br></pre></td></tr></table></figure><p>它还提供了一个 <code>_config.yml</code> 模板文件，我们就用它这个替换掉原来的 <code>_config.yml</code> 中的内容，<code>_config.yml</code> 文件如下  </p><details><summary>_config.yml 模板文件</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: TEAPER       <span class="comment">#网页title标题栏</span></span><br><span class="line">description: 一个人学会思考，比学会啥都强！     <span class="comment">#网站描述</span></span><br><span class="line">author: teaper      <span class="comment">#您的名字</span></span><br><span class="line">language: zh-CN     <span class="comment">#网站使用的语言</span></span><br><span class="line">timezone: Asia/Shanghai     <span class="comment">#网站时区。Hexo 默认使用您电脑的时区</span></span><br><span class="line">favicon: https://avatars2.githubusercontent.com/u/37693348?s=460&amp;v=4        <span class="comment">#网站标题栏logo</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: https://www.teaper.dev     <span class="comment">#网址</span></span><br><span class="line">root: /         <span class="comment">#网站根目录</span></span><br><span class="line">permalink: :year/:month/:day/:title/    <span class="comment">#文章的网址链接格式</span></span><br><span class="line">permalink_defaults:     <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span>      <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line">public_dir: public      <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件</span></span><br><span class="line">tag_dir: tags           <span class="comment">#标签文件夹</span></span><br><span class="line">archive_dir: archives       <span class="comment">#归档文件夹</span></span><br><span class="line">category_dir: categories        <span class="comment">#分类文件夹</span></span><br><span class="line">code_dir: downloads/code        <span class="comment">#Include code 文件夹</span></span><br><span class="line">i18n_dir: :lang     <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line">skip_render:        <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :year:month:day-:title.md    <span class="comment">#新文章的文件名称格式</span></span><br><span class="line">default_layout: post        <span class="comment">#预设布局</span></span><br><span class="line">titlecase: <span class="literal">false</span>        <span class="comment">#把标题转换为 title case     </span></span><br><span class="line">external_link: <span class="literal">true</span>     <span class="comment">#在新标签中打开链接</span></span><br><span class="line">filename_case: 0        <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line">render_drafts: <span class="literal">false</span>        <span class="comment">#是否显示草稿</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span>    <span class="comment">#启动 Asset 文件夹</span></span><br><span class="line">relative_link: <span class="literal">false</span>        <span class="comment">#把链接改为与根目录的相对位址</span></span><br><span class="line">future: <span class="literal">true</span>        <span class="comment">#显示未来的文章</span></span><br><span class="line">highlight:      <span class="comment">#代码块的设置</span></span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized     <span class="comment">#默认分类</span></span><br><span class="line">category_map:       <span class="comment">#分类别名</span></span><br><span class="line">tag_map:        <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD     <span class="comment">#日期格式</span></span><br><span class="line">time_format: HH:mm:ss       <span class="comment">#时间格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 0     <span class="comment">#每页显示的文章量 (0 = 关闭分页功能)</span></span><br><span class="line">pagination_dir: page        <span class="comment">#分页目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: http://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: http://hexo.io/themes/</span></span><br><span class="line">theme: replica      <span class="comment">#要使用的主题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:     <span class="comment">#部署部分的设置</span></span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:teaper/hexoblog.git</span><br><span class="line">  branch: gh-pages</span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Analytics</span></span><br><span class="line">ga: UA-140493383-1 <span class="comment"># GA code UA-XXXXXXXX-X</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#marked setting for markdown</span></span><br><span class="line">marked:</span><br><span class="line">  gfm: <span class="literal">true</span></span><br><span class="line">  pedantic: <span class="literal">false</span></span><br><span class="line">  sanitize: <span class="literal">false</span></span><br><span class="line">  tables: <span class="literal">true</span></span><br><span class="line">  breaks: <span class="literal">true</span></span><br><span class="line">  smartLists: <span class="literal">true</span></span><br><span class="line">  smartypants: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">gcs: 014633199185561276043:bpv9wnr4qhc <span class="comment"># GOOGLE CUSTOM SEARCH</span></span><br><span class="line">baidutongji:  <span class="comment"># BAIDU TONGJI CODE</span></span><br><span class="line">disqus: teaperdev</span><br><span class="line"></span><br><span class="line">location: 广州      <span class="comment">#地址</span></span><br><span class="line">email: www@teaper.dev       <span class="comment">#邮箱</span></span><br><span class="line"></span><br><span class="line">avatar: https://avatars2.githubusercontent.com/u/37693348?s=460&amp;v=4     <span class="comment">#头像</span></span><br><span class="line">social:         <span class="comment">#图标链接</span></span><br><span class="line">  github: https://github.com/teaper     </span><br><span class="line">  weibo: https://www.weibo.com/5806191772</span><br><span class="line">  linkedin: https://twitter.com/TEAPERS</span><br><span class="line"></span><br><span class="line"><span class="comment"># flagcounter 收集来自世界各地的旗帜（我博客最下方的国旗）,注册成功提供以下参数</span></span><br><span class="line">flagcounter_href: https://info.flagcounter.com/MrmG </span><br><span class="line">flagcounter_img_src: https://s04.flagcounter.com/count2/MrmG/bg_FFFFFF/txt_6A737D/border_FFFFFF/columns_7/maxflags_14/viewers_3/labels_1/pageviews_1/flags_0/percent_0/ </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># RSS  ---------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Nofollow Config</span></span><br><span class="line">nofollow:</span><br><span class="line">     <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">     exclude: https://github.com/teaper </span><br><span class="line"></span><br><span class="line"><span class="comment"># SiteMap</span></span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure></details><p>具体的参数信息，可以参考 <a href="https://hexo.io/zh-cn/docs/configuration" rel="external nofollow noopener noreferrer" target="_blank">hexo配置</a>，我们在其基础上改改，然后重新运行一下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl  <span class="comment">#清除原来生成在public文件夹中的网页文件</span></span><br><span class="line">hexo g &amp;&amp; hexo s    <span class="comment">#重新生成文件以及启动服务</span></span><br></pre></td></tr></table></figure><p>可以看到效果如下  </p><p><img src="https://i.loli.net/2019/05/29/5cee92d3321bd20362.png" alt></p><p>但是有一些小问题，例如：  </p><blockquote><p>菜单栏：类别Categories、标签Tag、RSS都不能用<br>Social Media下面我不要Linkedin  </p></blockquote><h5 id="解决类别Categories、标签Tag不能用问题？"><a href="#解决类别Categories、标签Tag不能用问题？" class="headerlink" title="解决类别Categories、标签Tag不能用问题？"></a>解决类别Categories、标签Tag不能用问题？</h5><p>在<code>source</code>文件夹下创建以下文件以及文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── categories      <span class="comment">#文件夹</span></span><br><span class="line">│   └── index.md        <span class="comment">#文件</span></span><br><span class="line">└── tags</span><br><span class="line">    └── index.md</span><br></pre></td></tr></table></figure><p>其中<code>categories/index.md</code>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2016-01-21 18:46:15</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>其中<code>tags/index.md</code>内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2016-01-21 18:45:55</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>重新运行<code>hexo g &amp;&amp; hexo s</code>命令之后，就可以使用了，但是没有一个标签/分类  </p><h5 id="如何添加分类-标签"><a href="#如何添加分类-标签" class="headerlink" title="如何添加分类/标签"></a>如何添加分类/标签</h5><p>查看 <code>_config.yml</code> 中的 <code>default_layout:</code> 参数，上方模板中的是 <code>post</code>，那么就在模板文件夹 <code>scaffolds</code> 中修改 <code>post.md</code> 文件，添加<code>categories:</code>和<code>tags:</code>两个模块  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories: </span><br><span class="line">tags: </span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>在创建博客文件的时候就会套用这个模板，给<code>categories:</code>和<code>tags:</code>两个模块填入参数即可  </p><h4 id="新建博文"><a href="#新建博文" class="headerlink" title="新建博文"></a>新建博文</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo new helloHexo      <span class="comment">#创建一篇博文</span></span><br><span class="line"><span class="comment">#----------------------------输出提示--------------------------------------</span></span><br><span class="line">INFO  Created: ~/Downloads/hexoblog/<span class="built_in">source</span>/_posts/20190529-helloHexo.md <span class="comment">#提示创建的文件在这个路径</span></span><br></pre></td></tr></table></figure><p>使用 <code>gedit</code> 编辑这个文件，随便写点东西，再加个分类和标签  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 你好，Hexo</span><br><span class="line">date: 2019-05-29 22:37:20</span><br><span class="line">categories: [hexo]</span><br><span class="line">tags: [hexo,markdown,github]</span><br><span class="line">---</span><br><span class="line"><span class="comment">## Hexo＋Github搭建静态博客</span></span><br></pre></td></tr></table></figure><p>注意，分类(categories) 只能有一个，写在<code>[]</code>中，标签 <code>tags</code> 可以有多个，中间用英文逗号隔开，保存后运行 <code>hexo g &amp;&amp; hexo s</code> 重新生成文件即可看到效果  </p><p>注意：修改博客直接编辑<code>.md</code>文件，之后一定要先运行 <code>hexo g</code> 之后才能运行 <code>hexo cl</code> 清除缓存</p><h4 id="添加RSS"><a href="#添加RSS" class="headerlink" title="添加RSS"></a>添加RSS</h4><p>解决菜单栏 <code>RSS</code> 不能使用的问题，首先安装 <code>hexo-generator-feed</code> 包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed</span><br><span class="line">hexo g  <span class="comment">#生成文件</span></span><br></pre></td></tr></table></figure><p>可以看到，在<code>public</code>文件夹中多了一个<code>atom.xml</code>文件；然后在<code>_config.yml</code>文件中配置该插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS</span></span><br><span class="line">feed:</span><br><span class="line">    <span class="built_in">type</span>: atom</span><br><span class="line">    path: atom.xml</span><br><span class="line">    <span class="built_in">limit</span>: 20</span><br><span class="line">    hub:</span><br><span class="line">    content:</span><br><span class="line">    content_limit:</span><br><span class="line">    content_limit_delim: <span class="string">' '</span></span><br></pre></td></tr></table></figure><p>重新运行 <code>hexo g &amp;&amp; hexo s</code> 命令就可以看到效果了，单击会在浏览器中打开 <code>atom.xml</code> 文件，如果想订阅别人的 RSS ，可以参考——<a href="https://juejin.im/post/5c382a326fb9a049f15469eb" rel="external nofollow noopener noreferrer" target="_blank">【如何用RSS订阅？】</a>  </p><h4 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a>部署博客</h4><p>安装 <code>hexo-deployer-git</code> 包 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git  #git部署插件</span><br></pre></td></tr></table></figure><p>然后在<code>_config.yml</code>文件中配置该插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: http://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git     </span><br><span class="line">  repo: https://github.com/teaper/hexoblog.git      <span class="comment">#github public仓库地址，没有的话去github创建一个</span></span><br><span class="line">  branch: gh-pages      <span class="comment">#要部署到仓库的分支，master分支用来存md文件</span></span><br></pre></td></tr></table></figure><p>然后就可以使用以下命令一键上线  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d  <span class="comment">#一键部署</span></span><br></pre></td></tr></table></figure><p>部署成功，在 <code>hexoblog</code> 仓库设置中，找到 <a href>Github Pages</a> ,选择 <code>gh-pages</code> 分支作为主页，然后勾选 <code>Enfore HTTPS</code> 复选框，上面会提示一个地址  Your site is published at <a href="https://www.teaper.dev/">https://www.teaper.dev/</a> 可以打开预览效果 <span style="color:#ff0000">(开心吧？快给点掌声)</span> </p><p><img src="https://i.loli.net/2019/05/29/5cee9ff324f4e50085.png" alt></p><p>可能你已经发现了，我的地址不一样，是自定义的域名<code>teaper.dev</code>，这就是我接下来要说的  </p><h4 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h4><p>我这个<code>.dev</code>的域名是谷歌美国时间2019年2月19日开始开放注册，<a href="https://www.aliyun.com" rel="external nofollow noopener noreferrer" target="_blank">阿里云</a>注册不到，你可以在<a href="https://domains.google/tld/dev/" rel="external nofollow noopener noreferrer" target="_blank">Google Domains</a>或<a href="https://account.godaddy.com" rel="external nofollow noopener noreferrer" target="_blank">Godaddy</a>注册，当然，你也可以在阿里云注册其他顶级域名  </p><blockquote><p>提示：我是Godaddy注册的，解析 A 记录到阿里云轻量服务器的时候会有问题  </p></blockquote><p>购买好域名后，在 DNS 处添加解析，相关信息如下  </p><table><thead><tr><th>类型</th><th>名称</th><th>值</th><th>TTL</th></tr></thead><tbody><tr><td>CNAME</td><td>www</td><td>teaper.github.io</td><td>1 小时</td></tr></tbody></table><p>名称 <code>www</code>会称为子域名<code>www.teaper.dev</code>，值填写你 <code>Github Page</code> 最后提示的网址前部分，<code>teaper.github.io</code>中的<code>teaper</code>是我github用户名，你对应的就是你自己的用户名  </p><p>到此为止，输入 <a href="http://www.teaper.dev">http://www.teaper.dev</a> 就会自动去找 github 服务器，但是github服务器找不到我们的博客位置，这时候就需要在 <code>hexoblog/public</code> 下创建一个 <code>CNAME</code> 文件标记博客地址，填入你要显示的子域名  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.teaper.dev</span><br></pre></td></tr></table></figure><p>最后，重新使用 <code>hexo d</code> 命令提交到 github 即可使用自定义域名访问  </p><h4 id="站点地图"><a href="#站点地图" class="headerlink" title="站点地图"></a>站点地图</h4><p>站点地图是提供给搜索引擎快速收录网站信息用的，里面包含了该网站所有可访问的网址链接，这里我们一般就使用谷歌和百度  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save   <span class="comment">#谷歌</span></span><br><span class="line">npm install hexo-generator-baidu-sitemap --save     <span class="comment">#百度</span></span><br></pre></td></tr></table></figure><p>在<code>_config.yml</code>中添加以下配置  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># SiteMap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure><p>使用<code>hexo g &amp;&amp; hexo s</code>之后，会看到 <code>public</code> 文件夹下多出了<code>sitemap.xml</code>和<code>baidusitemap.xml</code>这两个文件，使用 <code>hexo d</code> 将它们提交到 <code>github</code><br>在地址栏输入<a href="http://www.teaper.dev／sitemap.xml" rel="external nofollow noopener noreferrer" target="_blank">http://www.teaper.dev／sitemap.xml</a>和<a href="http://www.teaper.dev／baidusitemap.xml" rel="external nofollow noopener noreferrer" target="_blank">http://www.teaper.dev／baidusitemap.xml</a>可以看到文件就成功了  </p><p><strong>谷歌</strong>去 <a href="https://search.google.com/search-console" rel="external nofollow noopener noreferrer" target="_blank">Search Console</a>添加一个资源，名称就是 <a href="www.teaper.dev">www.teaper.dev</a> ，点击左侧列表中的<strong>站点地图</strong>，添加新的站点，输入站点文件的位置 <code>http://www.teaper.dev/sitemap.xml</code> ，注意不是 https 哦！提交之后谷歌会抓取，一天之后会有结果的～  </p><p><strong>百度</strong>去<a href="https://link.jianshu.com/?t=http://zhanzhang.baidu.com/dashboard/index" rel="external nofollow noopener noreferrer" target="_blank">百度站长平台</a>注册一个账号，然后需要使用 DNS 解析验证以下网站所有权，然后也是添加站点，指定站点地图文件的网址，由于百度实在垃圾，收录不到 github 的站点信息，所以我就不写了  </p><p><img src="https://i.loli.net/2019/05/30/5ceeb0550664b92514.png" alt>  </p><h4 id="谷歌自定义搜索"><a href="#谷歌自定义搜索" class="headerlink" title="谷歌自定义搜索"></a>谷歌自定义搜索</h4><p>进入<a href="https://link.juejin.im/?target=https%3A%2F%2Fcse.google.com%2F" rel="external nofollow noopener noreferrer" target="_blank">谷歌自定义搜索</a>，然后新增一个搜索引擎，输入 <code>www.teaper.dev</code> ，搜索引擎名称也叫 <code>www.teaper.dev</code> ；然后在<strong>修改搜索引擎</strong>中的设置选项卡，添加你要搜索的网址，最少写个 <code>https://www.teaper.dev</code> 吧，其他的留给你自己折腾  </p><h4 id="Google-Analytics分析"><a href="#Google-Analytics分析" class="headerlink" title="Google Analytics分析"></a>Google Analytics分析</h4><p>主要是为了统计数一下网址的浏览量和阅读量<br><a href="https://analytics.google.com" rel="external nofollow noopener noreferrer" target="_blank">Google Analytics</a>注册一个账号，然后创建资源和媒体，添加网址，成功之后可以看到一个 <code>UA-140493383-1</code> 的 <code>GA Code</code> </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3inq43qlnj30my06ajry.jpg" alt></p><p>将它配置在 <code>_config.yml</code> 中即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Google Analytics</span><br><span class="line">ga: UA-140493383-1</span><br></pre></td></tr></table></figure><p>追进程序代码可以不用写，因为 <code>hexoblog/themes/replica/layout/_partial/head.ejs</code>中已经有以下这段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(&apos;_widget/google-analytics&apos;) %&gt;</span><br></pre></td></tr></table></figure><h4 id="Live2D-血小板"><a href="#Live2D-血小板" class="headerlink" title="Live2D 血小板"></a>Live2D 血小板</h4><p>进入<code>hexoblog/themes/replica/source</code>主题文件夹，克隆<a href="https://github.com/JIAOBANTANG/live2d-xuexiaoban" rel="external nofollow noopener noreferrer" target="_blank">血小板</a>项目源码  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:JIAOBANTANG/live2d-xuexiaoban.git</span><br></pre></td></tr></table></figure><p>会有一个 <code>live2d</code> 文件夹和一个 <code>index.html</code> 文件，我们要做的就是把 <code>index.html</code> 中的内容写入到对应模板文件中  </p><p>在<code>themes/replica/layout/_partial/head.ejs</code>中引入css样式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= config.root %&gt;live2d/css/live2d.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>head.ejs</code>同级的<code>footer.ejs</code>中的Body标签内<span style="color:#ff0000">(最外层)</span>追加以下 div 块  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Live2D血小板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"landlord"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message"</span> <span class="attr">style</span>=<span class="string">"opacity:0"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"live2d"</span> <span class="attr">width</span>=<span class="string">"560"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">class</span>=<span class="string">"live2d"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class="hide-button"&gt;隐藏&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var message_Path = '/live2d/'</span></span><br><span class="line"><span class="undefined">    var home_Path = 'https://www.teaper.dev/'</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live2d/js/live2d.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/live2d/js/message.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    loadlive2d("live2d", "/live2d/model/xiaoban/model.json");</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用 <code>hexo g &amp;&amp; hexo s</code> 重新生成文件后就可以看到效果了，有没有小激动啊？嘤嘤嘤～～～</p><h4 id="音乐控件"><a href="#音乐控件" class="headerlink" title="音乐控件"></a>音乐控件</h4><p>使用jQuery音乐插件<a href="http://www.jq22.com/demo/QPlayer-master20170104/" rel="external nofollow noopener noreferrer" target="_blank">QPlayer</a>，找到它的<a href="https://github.com/Jrohy/QPlayer" rel="external nofollow noopener noreferrer" target="_blank">github</a>地址，将其克隆到电脑上 <span style="color:#ff0000">(随便一个地方，只要不在 hexoblog 中就行)<span>  </span></span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:Jrohy/QPlayer.git</span><br></pre></td></tr></table></figure><p>进入文件夹，可以看到有这些文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── css</span><br><span class="line">│   └── player.css  <span class="comment">#播放器样式</span></span><br><span class="line">├── img</span><br><span class="line">│   ├── 2.png       <span class="comment">#上/下一曲按钮</span></span><br><span class="line">│   └── audio_sprite.png        <span class="comment">#其他按钮</span></span><br><span class="line">├── index.html  <span class="comment">#演示页面（需要使用Firefox打开）</span></span><br><span class="line">├── js</span><br><span class="line">│   ├── jquery.marquee.min.js   <span class="comment">#不明</span></span><br><span class="line">│   ├── jquery.min.js   <span class="comment">#普通jquery</span></span><br><span class="line">│   └── player.js   <span class="comment">#播放器功能实现</span></span><br><span class="line">└── README.md   <span class="comment">#没啥用的</span></span><br></pre></td></tr></table></figure><p>经过一段时间的兼容性比对，确定没问题之后，我决定使用以下方案：  </p><p>将<code>player.css</code>复制到<code>hexoblog/themes/replica/source/css</code>中  将<code>img</code>文件夹整个复制到<code>hexoblog/themes/replica/source</code>中  将<code>jquery.marquee.min.js</code>和<code>player.js</code>复制到<code>hexoblog/themes/replica/source/js</code>中 <span style="color:#ff0000">(jquery.min.js就不要了)</span>  </p><p>将<code>index.html</code>中的以下<code>&lt;script&gt;&lt;/script&gt;</code>部分全部拷贝，粘贴在新建的<code>hexoblog/themes/replica/source/js/playlist.js</code>中，然后html上使用 src 引入该 js 文件  </p><p>由于它自带的这些音乐列表无法使用，所以我把我的分享出来  </p><details><summary>我的playlist.js歌单列表</summary><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> playlist = [</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Lovely Day"</span>,<span class="attr">artist</span>:<span class="string">"朴信惠"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/2925e0aa5e1dbbac899c4dc95661bad6/5ceb6418/G006/M07/1C/18/poYBAFS5wk6AXMkqADCFZFnRisU820.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20170711/20170711145703533.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"起风了"</span>,<span class="attr">artist</span>:<span class="string">"买辣椒也用券"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/d6cde41d2513b5d55822d9b736f069d5/5ceb64f5/G117/M04/09/11/VZQEAFyLqDSAMZdUAEimgFeiNtg723.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://p2.music.126.net/diGAyEmpymX8G7JcnElncQ==/109951163699673355.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"心如止水"</span>,<span class="attr">artist</span>:<span class="string">"Ice Paper"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/b3f975be33635ba5306f0487ddbc0074/5ceb64d3/G117/M08/13/1F/tQ0DAFx5A3uAfPOBAC1GYIo2lU0616.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://p1.music.126.net/MLQl_7poLz2PTON6_JZZRQ==/109951163938219545.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"临安初雨"</span>,<span class="attr">artist</span>:<span class="string">"小旭音乐"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/f059a518f3a31cd91be1aaf3070ccae9/5ceb5466/G012/M02/09/04/rIYBAFUJqVSAfHZcAB13gGBS5S4671.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20130531/20130531162457903.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"一百万个可能"</span>,<span class="attr">artist</span>:<span class="string">"Christine Welch"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/7b0fea66de0212e7f36c0557b4a54f0d/5ceb550a/G001/M01/1D/1D/QQ0DAFSNgAeAPiAIAENKHp_Pbbw776.mp3"</span>,<span class="attr">cover</span>:<span class="string">"https://y.gtimg.cn/music/photo_new/T002R300x300M000004IWoIx34J0fT.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"神谕法则"</span>,<span class="attr">artist</span>:<span class="string">"SING女团"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/1d629a349060ed2fbe736d6fa7a34b8a/5ceb567a/G141/M08/0B/10/zQ0DAFujeo2APYF4ADhbc0IcpIY564.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190218/20190218200851155.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"轮回之境"</span>,<span class="attr">artist</span>:<span class="string">"CRITTY"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/62485366c101badd2b1aa1ba8b5efbd8/5ceb56d5/G013/M01/05/0D/TQ0DAFUKu3GAEIQ5AD1w-bfK0P4695.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190322/20190322004553123011.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"404 not found"</span>,<span class="attr">artist</span>:<span class="string">"REOL"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/7cab120be79c215f84bb504ddfb95006/5ceb5500/G157/M05/17/13/fZQEAFy4nK6AQzP-ADxLRpnEs6Q820.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20181226/20181226152454854.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Because of You"</span>,<span class="attr">artist</span>:<span class="string">"Kelly Clarkson"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/5978f3fda40537f06a5f88f9544eba20/5ceb576f/G009/M04/1C/09/qYYBAFT9zkiAGaRUADWa8vjlrM0384.mp3"</span>,<span class="attr">cover</span>:<span class="string">"https://upload.wikimedia.org/wikipedia/en/thumb/c/cb/Because_of_You_Single.PNG/220px-Because_of_You_Single.PNG?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"China-X"</span>,<span class="attr">artist</span>:<span class="string">"徐梦圆"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/f81d9488f62defdc4a1ae36eeca32124/5ceb5930/G056/M04/1D/10/2IYBAFakY0iAB4D0ADc4AfWXG_g876.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20170413/20170413190130260.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Cry On My Shoulder"</span>,<span class="attr">artist</span>:<span class="string">"Superstar"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/265c1bdd202e4240f394e1dff6776ad9/5ceb5990/G076/M09/04/17/7IYBAFgullaARyg6ADoevPs0ye4394.mp3"</span>,<span class="attr">cover</span>:<span class="string">"https://i.ytimg.com/vi/46VPqRVD9C8/hqdefault.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"I Could Be The One"</span>,<span class="attr">artist</span>:<span class="string">"Donna Lewis"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/f1d0f08b04c35638ef1141097d9ddfdf/5ceb5a01/G008/M07/14/05/SA0DAFUK1DuAPFNoADc38GF12LY937.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://pic.pimg.tw/locking1218/1387317563-867639266_n.png?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Love home"</span>,<span class="attr">artist</span>:<span class="string">"纯音乐"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/d9e6bb48091953cc7b97732c92aafd2d/5ceb5b0a/G060/M01/1F/01/HJQEAFcFCnmAPq5MACZrRhHLltY343.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20130531/20130531162457903.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Lydia"</span>,<span class="attr">artist</span>:<span class="string">"F.I.R."</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/67e04c0b2648bcd8bbd9567e8f2e5cce/5ceb5a12/G009/M03/14/1B/SQ0DAFT7tOSAZfkgADpd7U9r--c363.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20181219/20181219180413855.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Mermaid girl"</span>,<span class="attr">artist</span>:<span class="string">"森永真由美"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/1de7882c5c53c56f05b20259b877ec6b/5ceb5ca7/G057/M0A/05/13/2YYBAFZ9w6aAckLxACwlF6vARdM570.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190114/20190114120339434.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"My Love"</span>,<span class="attr">artist</span>:<span class="string">"Westlife"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/f9685fd7284d0c543ebfba327aabc5b8/5ceb59e6/G011/M03/1A/18/q4YBAFUJpaOAP5qMADkJjLkKC14038.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190110/20190110173511430.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"PLANET"</span>,<span class="attr">artist</span>:<span class="string">"ラムジ"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/fcace83c0b69e90a0967c0301e24c29b/5ceb5d70/G097/M08/03/1B/oQ0DAFkGqw6AdT6_ADtw0uWrvgc250.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20151219/20151219102713856.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Sakura"</span>,<span class="attr">artist</span>:<span class="string">"いきものがかり"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/b6b3c9825a502250eaefd6603757bd29/5ceb5df5/G015/M09/0B/09/r4YBAFUbB-CAN7FRAFZ5gzCshG0445.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20160911/20160911161922354.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"~君がくれたもの~"</span>,<span class="attr">artist</span>:<span class="string">"茅野愛衣、戸松遥"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/e019ea8d77a3d29b5da4d0284a9d6fa0/5ceb5e49/G012/M05/0E/04/TA0DAFUHca-Afk1DAFYYaiaECms593.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20150227/20150227114508898329.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"Take Me Hand"</span>,<span class="attr">artist</span>:<span class="string">"DAISHI DANCE"</span>,<span class="attr">mp3</span>:<span class="string">"http://fdfs.xmcdn.com/group42/M0B/03/80/wKgJ81rjI5jSyYh7AB--YNV-lLs148.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://imagev2.xmcdn.com/group42/M0A/F0/1D/wKgJ9Frhz9jzNZANAAA_25jQd_Y118.jpg!op_type=3&amp;columns=640&amp;rows=640?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"不怨"</span>,<span class="attr">artist</span>:<span class="string">"袁姗姗"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/2711214e5ef74b5bc500480161ecea82/5ceb63d2/G011/M0A/04/15/q4YBAFULdx2AE4H9AENngUa7Wo4830.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20180913/20180913164746762.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"参商"</span>,<span class="attr">artist</span>:<span class="string">"不才"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/c3ced3e8f5053f6b5e89ce33888925a0/5ceb642a/G070/M05/14/19/JpQEAFe1rZCAR9AkAEb7mM3NYbQ587.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20150821/20150821160527934958.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"抽离"</span>,<span class="attr">artist</span>:<span class="string">"徐良、刘丹萌"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/3f0f9ca0256fa4a8ecb41830da96dc0b/5ceb653d/G011/M08/13/01/Sw0DAFUKP6yAJYifAD8vjhnvGXs436.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190311/20190311135913203.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"渡情"</span>,<span class="attr">artist</span>:<span class="string">"鞠婧祎"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/896dfc68690ed5ba3b64fd15e8315377/5ceb6637/G158/M08/1C/11/PocBAFyh1vGAYZuyACiPb1k99KI437.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190110/20190110174817500.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"诀别诗"</span>,<span class="attr">artist</span>:<span class="string">"胡彦斌"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/a3bcceb8c79bf85be0abbf5a63918ebc/5ceb6587/G007/M02/13/18/p4YBAFS4GimAK4jGADw8R0t4sj8307.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20170921/20170921171126282.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"七秀坊"</span>,<span class="attr">artist</span>:<span class="string">"月之门"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/04cb4548a0ec4ad79feaad68a4084f3c/5ceb66c5/G009/M08/15/17/qYYBAFUPfnWAM9_tAD79Msb3GDk803.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20150716/20150716204240137592.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"City"</span>,<span class="attr">artist</span>:<span class="string">"羽肿"</span>,<span class="attr">mp3</span>:<span class="string">"http://www.170hi.com/kw/other.web.nf01.sycdn.kuwo.cn/resource/n2/32/74/1955672015.mp3"</span>,<span class="attr">cover</span>:<span class="string">"https://images.shazam.com/coverart/t446909531-b1440714641_s400.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"さくら~あなたに"</span>,<span class="attr">artist</span>:<span class="string">"兰草薄荷"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/1a703819efa017badd4d83f1c71ec749/5cec9b2f/G110/M04/0C/03/TpQEAFl2WkSARXuyAEkReouicLU314.mp3"</span>,<span class="attr">cover</span>:<span class="string">"https://images-na.ssl-images-amazon.com/images/I/416sZkxLvxL._SX355_.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"爱丫爱丫"</span>,<span class="attr">artist</span>:<span class="string">"By2"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/02d2ec41fcdb134f54b3c2636f19b85f/5cec9b8e/G010/M05/12/0F/Sg0DAFUKNk-AZfDxADilOF7pdfM473.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20170602/20170602141818448.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"風の住む街"</span>,<span class="attr">artist</span>:<span class="string">"磯村由紀子"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/59144ec64af815622b3df4554a0c68bd/5cec9b46/G012/M05/03/18/TA0DAFUJEmuAPmOxAEXoAIFZ2qs558.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20150430/20150430163440818299.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"该怎么"</span>,<span class="attr">artist</span>:<span class="string">"楼一萱"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/1a06cd43353e4746b5dac57c45cc6749/5cec9d49/G114/M09/1C/05/UpQEAFvlVceACD-ZADVdCPwr-iA411.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190322/20190322042458484661.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"歌に形はないけれど"</span>,<span class="attr">artist</span>:<span class="string">"花たん"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/385ce61a125c8080023133eb57a443c5/5cec9be0/G004/M03/04/11/pIYBAFT9fuKAUY6FAFCQthJknCc986.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20151219/20151219145533755.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"黑白颠倒"</span>,<span class="attr">artist</span>:<span class="string">"夏婉安"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/347ad36442427cf0ecda097f3781b3e3/5cec9e04/G141/M01/1E/0F/LYcBAFufUyCAatIcAD0voHvO4cw539.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190417/20190417172223938.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"红昭愿"</span>,<span class="attr">artist</span>:<span class="string">"音阙诗听"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/630026d94f59d394b76128295e0f88ee/5cec9b31/G089/M05/0F/18/-YYBAFlqur6AKhY_ACpPcyzNiC0500.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20170721/20170721162945806.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"后会无期"</span>,<span class="attr">artist</span>:<span class="string">"徐良、汪苏泷"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/5501a5fc48fbe9a8d4378f1a174bc1e8/5cec9d0f/G006/M07/14/17/poYBAFS_vVqAUNBEADO387ANGhg481.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190311/20190311135913203.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"花开半夏"</span>,<span class="attr">artist</span>:<span class="string">"爱朵女孩"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/d5dba4b64ecd202259247ad0a13caf7b/5cec9f28/G011/M03/07/05/q4YBAFT64JeASLqEAC1HoCCRI34922.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190322/20190322000546528435.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"嫁衣"</span>,<span class="attr">artist</span>:<span class="string">"吴虹飞&amp;幸福大街"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/c08023b444083ff486a88ba731d9310a/5cec9f6f/G121/M05/0D/1B/uQ0DAFo6DNyAAdj1AFDSyM4wM0M117.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20111123/20111123150044954.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"解药"</span>,<span class="attr">artist</span>:<span class="string">"孙紫晴"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/e09caaf84b38439c8ac76f9530c05ad6/5cec9c53/G135/M06/01/07/Z5QEAFuKgSyAZYInADpA09oxkQk172.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20130531/20130531161511554.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"矜持"</span>,<span class="attr">artist</span>:<span class="string">"姚贝娜"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/3a3059c31a353951d48de294c6a9c75d/5ceca028/G009/M06/0D/1F/qYYBAFUPb-uAEZ9FAD87WofR9HQ889.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20140304/20140304140958863665.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"锦鲤抄"</span>,<span class="attr">artist</span>:<span class="string">"银临、云の泣"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/638010b766f2c9887dbe83f82f1e86f2/5cec9ddc/G010/M06/1C/14/Sg0DAFUJgEeAMyZoADvachXfuK0962.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20160815/20160815163511387.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"看到风"</span>,<span class="attr">artist</span>:<span class="string">"冯提莫"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/5ed4d8fe7238de9fe612fa8669b69461/5cec9d9a/G157/M06/0D/00/PYcBAFyjBc-AO1lkAE3-W_SdmR4725.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190102/20190102180610282.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"佛系少女"</span>,<span class="attr">artist</span>:<span class="string">"冯提莫"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/580d96772ae5c347197378774d633f45/5ceca13d/G110/M03/14/10/TpQEAFvuN3aAP7ezADCfVNXrcYE490.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190102/20190102180610282.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"可不可以"</span>,<span class="attr">artist</span>:<span class="string">"张紫豪"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/9325794f4bf6d4962273458b3a6cfe21/5cec9e56/G130/M05/12/00/YpQEAFrxTvOAQ8I-ADrUXaC6U88058.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20180829/20180829150149484.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"客官不可以"</span>,<span class="attr">artist</span>:<span class="string">"徐良、小凌"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/2690d6871e18645aa36a5630d998b213/5cec9e79/G006/M09/17/19/poYBAFTAPymAFwZsADhhbRy94q8040.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20190311/20190311135913203.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"仙剑问情"</span>,<span class="attr">artist</span>:<span class="string">"萧人凤"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/c910346617457a39c89f76bf9d535953/5ceca4b8/G001/M01/08/13/QQ0DAFS3AtGAK1RmAD3r0yHdNHY032.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20150112/20150112102446121545.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"桃源恋歌"</span>,<span class="attr">artist</span>:<span class="string">"GARNiDELiA"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/e2cf4d84ad7ab534608a0d10690c9a84/5ceca446/G123/M09/0C/00/uw0DAFq6hR2AHseOADgmvMarDHg157.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20181101/20181101183056556.jpg?param=106x106"</span>,&#125;,</span><br><span class="line">&#123;<span class="attr">title</span>:<span class="string">"美丽的神话"</span>,<span class="attr">artist</span>:<span class="string">"白冰、胡歌"</span>,<span class="attr">mp3</span>:<span class="string">"http://fs.open.kugou.com/c6a73961afc6cf436901c57e32ebd00c/5ceca27f/G003/M06/17/0F/Qw0DAFS5DVaADRFnAFCJpAjWxrM130.mp3"</span>,<span class="attr">cover</span>:<span class="string">"http://singerimg.kugou.com/uploadpic/pass/softhead/100/20110704/20110704111056705.jpg?param=106x106"</span>,&#125;,</span><br><span class="line"><span class="comment">/*&#123;title:"",artist:"",mp3:".mp3",cover:".jpg?param=106x106",&#125;,*/</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">var</span> isRotate = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> autoplay = <span class="literal">false</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></details><p>如果想添加歌曲，推荐一个网站<a href="http://www.biaobaishike.com/yinyue.php" rel="external nofollow noopener noreferrer" target="_blank">音乐外链获取</a>，选择酷狗音乐搜索  </p><p>文件都复制好了，就要把播放器植入到网页中，还是在主题模板文件中  </p><p>将以下代码插入到<code>head.ejs</code>的<code>&lt;head&gt;</code>标签内  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= config.root %&gt;css/player.css"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将QPlayer音乐播放插件主要代码插入到<code>footer.ejs</code>中，放在<a href="#live2d-血小板">血小板</a>插件前面即可，然后将<code>jquery.marquee.min.js</code>换成了全网通用的  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- QPlayer音乐播放器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"QPlayer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"pContent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"player"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"cover"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ctrl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"musicTag marquee"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span> - <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"artist"</span>&gt;</span>Artist<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"timer left"</span>&gt;</span>0:00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"contr"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"rewind icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"playback icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fastforward icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"liebiao icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ssBtn"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"adf"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">id</span>=<span class="string">"playlist"</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="js/jquery.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="js/jquery.marquee.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/2.2.4/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">'text/javascript'</span> <span class="attr">src</span>=<span class="string">'//cdn.jsdelivr.net/jquery.marquee/1.4.0/jquery.marquee.min.js'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 歌单列表playlist.js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/playlist.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/player.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">bgChange</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> lis= $(<span class="string">'.lib'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;lis.length; i+=<span class="number">2</span>)</span></span><br><span class="line"><span class="javascript">lis[i].style.background = <span class="string">'rgba(246, 246, 246, 0.5)'</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = bgChange;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>好了，启动服务后应该就可以预览效果了，如果要添加歌曲，直接在配置文件加就行，缺点就是国外用户无法听歌，因为有墙，他们访问不到酷狗  </p><h4 id="评论插件"><a href="#评论插件" class="headerlink" title="评论插件"></a>评论插件</h4><p>在<code>themes/replica/layout/_widget</code> 文件夹中可以看到，该主题提供了两个评论插件<a href="https://disqus.com/" rel="external nofollow noopener noreferrer" target="_blank">disqus</a>和<a href="https://github.com/gitalk/gitalk#install" rel="external nofollow noopener noreferrer" target="_blank">gitalk</a>，默认使用<code>gitalk</code>，否则使用<code>disqus</code>  </p><p><span style="color:#ff0000">注意：默认使用 gitalk ,只有翻墙的用户不能使用 gitalk 时才能使用 disqus，稍后在源码中可以看到逻辑，所以我这里就用<code>gitalk</code>示范</span>  </p><p>根据github上的<a href="https://github.com/gitalk/gitalk/blob/master/readme-cn.md" rel="external nofollow noopener noreferrer" target="_blank">说明文档</a>，有两种安装方式：  </p><p><strong>方式一</strong>：直接在模板文件中引入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- or --&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>方式二</strong>：使用npm进行安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save gitalk</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">'gitalk/dist/gitalk.css'</span></span><br><span class="line">import Gitalk from <span class="string">'gitalk'</span></span><br></pre></td></tr></table></figure><p>然后，需要在页面模板文件引入相关<code>&lt;div&gt;</code>标签，通过以下<code>javascript</code>进行调用  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span><br><span class="line">  clientID: <span class="string">'GitHub Application Client ID'</span>,</span><br><span class="line">  clientSecret: <span class="string">'GitHub Application Client Secret'</span>,</span><br><span class="line">  repo: <span class="string">'GitHub repo'</span>,</span><br><span class="line">  owner: <span class="string">'GitHub repo owner'</span>,</span><br><span class="line">  admin: [<span class="string">'GitHub repo owner and collaborators, only these guys can initialize github issues'</span>],</span><br><span class="line">  id: location.pathname,      <span class="comment">// Ensure uniqueness and length less than 50</span></span><br><span class="line">  distractionFreeMode: <span class="literal">false</span>  <span class="comment">// Facebook-like distraction free mode</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.render(<span class="string">'gitalk-container'</span>)</span><br></pre></td></tr></table></figure><p>好在<code>replica</code>主题下的<code>layout/_widget/gitalk.ejs</code>文件中已经帮助我们配置好了，不需要我们操作上面两步，不过还需要进一步改进一下，由于 <code>github issue</code> 的 <code>label</code> 长度被限制在了50个字，所以我们采用 <code>Md5</code> 对 <code>id</code> 进行加密 </p><details><summary>gitalk.ejs文件内容</summary><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入MD5的js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'container'</span> <span class="attr">id</span>=<span class="string">"gitalk-container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> gitalk = <span class="keyword">new</span> Gitalk(&#123;</span></span><br><span class="line"><span class="javascript">        clientID: <span class="string">'&lt;%= config.gitalk.client_id %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        clientSecret: <span class="string">'&lt;%= config.gitalk.client_secret %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        repo: <span class="string">'&lt;%= config.gitalk.repo %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        owner: <span class="string">'&lt;%= config.gitalk.owner %&gt;'</span>,</span></span><br><span class="line"><span class="javascript">        admin: [<span class="string">'&lt;%= config.gitalk.owner %&gt;'</span>],</span></span><br><span class="line"><span class="javascript">        <span class="comment">/*添加id属性，使用MD5加密，注意后面的逗号*/</span></span></span><br><span class="line"><span class="undefined">    id: md5(location.pathname),</span></span><br><span class="line"><span class="javascript">        distractionFreeMode: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="javascript">    gitalk.render(<span class="string">'gitalk-container'</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></details><p>并且在<code>replica</code>主题下的<code>layout/_partial/article.ejs</code>中已经引入<code>div标签</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- if-else逻辑，如果gitalk不能使用才使用disqus，但是disqus只有翻墙之后的用户才能使用，并且满足前一条if-else逻辑 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> <span class="attr">if</span> (<span class="attr">config.gitalk</span> ) &#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_widget</span>/<span class="attr">gitalk</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125;<span class="attr">else</span>&#123; %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%-</span> <span class="attr">partial</span>('<span class="attr">_widget</span>/<span class="attr">disqus</span>') %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br></pre></td></tr></table></figure><p>从上面可以看到一个判断，如果使用<code>config.gitalk</code>有值就引入<code>gitalk</code>的<code>div</code>以及相关样式，否则使用<code>disqus</code>  </p><blockquote><p>Disqus使用方法：去<a href="https://disqus.com/" rel="external nofollow noopener noreferrer" target="_blank">Disqus</a>创建一个网站，将名字配置到<code>_config.yml</code>即可  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">disqus: teaperdev   <span class="comment">#配置disqus</span></span><br></pre></td></tr></table></figure><p>不多说，继续<code>gitalk</code>配置，在<code>hexoblog/_config.yml</code>中配置如下参数  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitalk</span></span><br><span class="line">gitalk:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span>      </span><br><span class="line">  client_id: 79a82d93fcd761032f45        </span><br><span class="line">  client_secret: b784392d66d81a991565a56598f2d369e71e21ad    </span><br><span class="line">  repo: hexoblog<span class="comment">#你要新建一个仓库来保存这些comments，这里repo就使用当前博客的</span></span><br><span class="line">  owner: teaper    <span class="comment">#管理员用户和仓库所有者(gitalk.ejs中admin和owner都是owner的值，所以这里只写owner)</span></span><br></pre></td></tr></table></figure><p>其中<code>Client Id</code>需要去<a href="https://github.com/settings/applications/new" rel="external nofollow noopener noreferrer" target="_blank">github创建应用程序</a>获取，<code>Authorization callback URL</code> 主页地址和回调地址填写你的网站地址<span style="color:#ff0000">(注意：两个地址后面都要加上/，https或http无所谓，例如我的：<a href="https://www.teaper.dev/">https://www.teaper.dev/</a>)</span>  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3ky8py2asj31hc156jvr.jpg" alt>  </p><p>配置好，使用<code>hexo g &amp;&amp; hexo s</code>重新运行服务后应该可以看到效果了，不过还需要使用<code>hexo d</code>命令进一步将其提交到服务器，才能知道回调地址是否有效  </p><h4 id="日常维护"><a href="#日常维护" class="headerlink" title="日常维护"></a>日常维护</h4><p>使用 <code>hexo d</code>命令只是将 <code>public</code> 文件夹中的静态资源文件提交到 <code>github page</code>，并没有把原始的整个博客存起来，所以我们要把 <code>hexoblog</code> 中的内容提交到 <code>master</code> 分支，相信大家都会  </p><p>其次，要注意，如果你像我一样，对<code>themes</code>下的某个主题做了自定义，一定要将修改过得主题用 git 提交到一个单独的仓库中，因为上面那步，<strong>把 <code>hexoblog</code> 中的内容提交到 <code>master</code> 分支</strong>时，是不会把主题也给提交上去的 <span style="color:#ff0000">(不要试图去改什么忽略文件，巨坑)</span>  </p><blockquote><p>最后附上我修改后的主题：<a href="https://github.com/teaper/replica" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/teaper/replica.git</a>  </p></blockquote><h5 id="重新部署博客需要哪些步骤？"><a href="#重新部署博客需要哪些步骤？" class="headerlink" title="重新部署博客需要哪些步骤？"></a>重新部署博客需要哪些步骤？</h5><p>假设你系统挂了，需要重新部署博客，首先去克隆你 <code>master</code> 分支上的 <code>hexoblog</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/teaper/hexoblog.git    <span class="comment">#克隆博客</span></span><br><span class="line"><span class="built_in">cd</span> hexoblog <span class="comment">#文件夹</span></span><br><span class="line">git co master   <span class="comment">#切换到master分支</span></span><br></pre></td></tr></table></figure><p>你会发现它没有<code>node_modules</code>文件夹，也没有日志文件<code>yarn-error.log</code>，主题文件夹下的 <code>replica</code> 主题下居然没有主题，别急，一个一个来  </p><p>首先克隆 <code>replica</code> 主题，现在知道保存修改之后的主题的重要性了吧？  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes   </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/teaper/replica.git     <span class="comment">#克隆主题</span></span><br><span class="line"><span class="built_in">cd</span> ..   <span class="comment">#回到上级目录hexoblog</span></span><br></pre></td></tr></table></figure><p>接下来就要把我们以前 <code>npm</code> 安装过的包重新安装回来  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install     <span class="comment">#安装博客依赖包</span></span><br><span class="line">hexo g &amp;&amp; hexo s        <span class="comment">#生成静态资源并且启动服务</span></span><br></pre></td></tr></table></figure><p>是不是和之前的一样，<strong>有木有？有木有？</strong><br>剩下的事，不用我说了吧？日常使用～～emmmmmmm  </p><h5 id="hexo博客样式问题多怎么办？"><a href="#hexo博客样式问题多怎么办？" class="headerlink" title="hexo博客样式问题多怎么办？"></a>hexo博客样式问题多怎么办？</h5><p>有时候启动服务就乱了，我的办法是重复执行<code>hexo cl</code>和<code>hexo g &amp;&amp; hexo s</code>，直到正常为止<br>还有第二种可能性就是，主题自带的插件包太老了，例如：<code>hexo-renderer-marked</code>，渲染<code>markdown</code>乱七八糟，解决方法如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save      <span class="comment">#卸载它</span></span><br><span class="line">npm install hexo-renderer-marked --save     <span class="comment">#重新安装新版</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> github pages </tag>
            
            <tag> node.js </tag>
            
            <tag> npm </tag>
            
            <tag> git </tag>
            
            <tag> rss </tag>
            
            <tag> sitemap </tag>
            
            <tag> google Analytics </tag>
            
            <tag> Live2D </tag>
            
            <tag> disqus </tag>
            
            <tag> gitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/2019/05/26/markdown-format/"/>
      <url>/2019/05/26/markdown-format/</url>
      
        <content type="html"><![CDATA[<p><a href="#标题"><span style="color:#B900ff;">标题</span></a><br><a href="#列表"><span style="color:#B900ff;">列表</span></a><br><a href="#引用"><span style="color:#B900ff;">引用</span></a><br><a href="#图片与链接"><span style="color:#B900ff;">图片与链接</span></a><br><a href="#粗体和斜体"><span style="color:#B900ff;">粗体和斜体</span></a><br><a href="#删除线"><span style="color:#B900ff;">删除线</span></a><br><a href="#表格"><span style="color:#B900ff;">表格</span></a><br><a href="#内联代码"><span style="color:#B900ff;">内联代码</span></a><br><a href="#语法突出"><span style="color:#B900ff;">语法突出</span></a><br><a href="#任务列表"><span style="color:#B900ff;">任务列表</span></a><br><a href="#表情符号"><span style="color:#B900ff;">表情符号</span></a>  </p><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote><h6 id="一级标题"><a href="#一级标题" class="headerlink" title="# 一级标题"></a># 一级标题</h6><h6 id="二级标题"><a href="#二级标题" class="headerlink" title="## 二级标题"></a>## 二级标题</h6><h6 id="三级标题"><a href="#三级标题" class="headerlink" title="### 三级标题"></a>### 三级标题</h6></blockquote><p>以此类推,总共六级,建议在<code>#</code>后面加上空格(标准写法);换行在当行后面加两个空格再回车  </p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>无序列表加 <code>-</code> 或 <code>*</code> 有序列表加 <code>1.</code> <code>2.</code> <code>3.</code> 符号  </p><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">* 1          -1</span><br><span class="line">* 2    或    -2</span><br><span class="line">* 3          -3</span><br></pre></td></tr></table></figure><ul><li>1  </li><li>2  </li><li>3  </li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Item1</span><br><span class="line">2. Item2</span><br><span class="line">3. Item3</span><br></pre></td></tr></table></figure><ol><li>Item1  </li><li>Item2  </li><li>Item3  </li></ol><h4 id="待办事项"><a href="#待办事项" class="headerlink" title="待办事项"></a>待办事项</h4><p>待办事项使用 <code>- [ ]</code> 加事项内容，勾选复选框在 <code>[ ]</code> 使用 <code>x</code> </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[x] 已勾选的待办事项</span><br><span class="line"><span class="bullet">- </span>[ ] 未勾选的待办事项</span><br><span class="line"><span class="code">    - [x] 子集已勾选待办事项</span></span><br><span class="line"><span class="code">    - [ ] 子集未勾选待事项</span></span><br><span class="line"><span class="bullet">- </span>[x] 回到一级待办事项</span><br></pre></td></tr></table></figure><ul><li><input checked disabled type="checkbox"> 已勾选的待办事项</li><li><input disabled type="checkbox"> 未勾选的待办事项<ul><li><input checked disabled type="checkbox"> 子集已勾选待办事项</li><li><input disabled type="checkbox"> 子集未勾选待事项</li></ul></li><li><input checked disabled type="checkbox"> 回到一级待办事项</li></ul><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>如果你需要引用一小段别处的句子,就要用引用的格式 <code>&gt;</code> 例如这样<br><code>&gt; 这里是引用</code>  </p><blockquote><p>这里是引用  </p></blockquote><h4 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h4><p>插入图片和插入链接很像,区别在于一个<code>!</code>号,插入图片需要<code>URL</code>地址<br>注意:<code>[]</code>与<code>()</code>之间没有空格  </p><h5 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h5><p><code>[TEAPER](https://www.teaper.cn)</code><br><a href="https://www.teaper.cn" rel="external nofollow noopener noreferrer" target="_blank">TEAPER</a>  </p><h5 id="锚链接"><a href="#锚链接" class="headerlink" title="锚链接"></a>锚链接</h5><p>锚链接起始位置为：<code>[标题](#标题)</code><br>目标位置为：<code>#### 标题</code>  </p><blockquote><p>注意：锚链接起始位置中的<code>(#标题)</code>，不论目标位置是几号标题，这里都只写一个<code>#</code>，并且后面不留空格，紧接着标题名字；并且<code>()</code>内标题名字中的大写字母需要转换成小写字母，有空格或<code>、</code>需要把空格或<code>、</code>替换成<code>-</code>，有<code>.</code>的需要删除<code>.</code>，并且标题名字中不能包含<code>&amp;￥$【】？*%@!{}/\,:;&quot;&#39;&lt;&gt;~</code>等特殊符号；<code>[]</code>中的标题文本保持和目标位置一致即可</p></blockquote><h5 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h5><p><code>![](https://github.blog/wp-content/uploads/2019/01/Company@2x-2.png)</code><br><img src="https://github.blog/wp-content/uploads/2019/01/Company@2x-2.png" alt></p><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><p>Markdown的粗体和斜体也非常简单,用<code>**粗体**</code>或者两个<code>__粗体__</code>包含一段文字就是<strong>粗体</strong>,用一个<code>*斜体*</code>或者一个<code>_斜体_</code>包含一段文字就是<em>斜体</em>  </p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>使用两个<code>～～</code>包含一段文字效果如下<br><del>删除线</del></p><h4 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h4><p>表格可能是Markdown比较累人的地方,注意表格上行空行不打空格，下行空行打两个空格，右边直接换行，<code>:</code> 打在哪边就表示对应方向的对齐，不写 <code>:</code> 默认左对齐  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| Java | C# | Python |</span><br><span class="line">| :------ | :-------: | ------: |</span><br><span class="line">| 支持 | 支持 | 不支持 |</span><br><span class="line">| 不支持 | 支持 | 支持 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Java</th><th align="center">C#</th><th align="right">Python</th></tr></thead><tbody><tr><td align="left">支持</td><td align="center">支持</td><td align="right">不支持</td></tr><tr><td align="left">不支持</td><td align="center">支持</td><td align="right">支持</td></tr></tbody></table><h4 id="内联代码"><a href="#内联代码" class="headerlink" title="内联代码"></a>内联代码</h4><p>只需要用一个撇号 <span style="color:#ff0000">(数字1左边那个键)</span> 包裹中间的代码,用 <strong>Tap</strong> 键缩进<br><code>Markdown</code>给了你多少钱,我双倍!  </p><h4 id="语法突出"><a href="#语法突出" class="headerlink" title="语法突出"></a>语法突出</h4><p>首行由三个撇号加代码检索标准（例如:java bash C++）开头；尾行三个撇号；代码在中间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Markdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"可以使用三个撇号包围代码,第一行撇号后面指定代码语言(推荐)"</span>);</span><br><span class="line">    System.out.println(<span class="string">"或者简单的将代码缩进四个空格"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码收缩"><a href="#代码收缩" class="headerlink" title="代码收缩"></a>代码收缩</h4><p>一对<code>&lt;details&gt;&lt;/details&gt;</code>标签内加一对<code>&lt;summary&gt;&lt;/summary&gt;</code>标签，在<code>&lt;summary&gt;</code>标签内写收缩说明，标签后第二行开始写需要收缩的内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;details&gt;</span><br><span class="line">&lt;summary&gt;CLICK ME&lt;/summary&gt;</span><br><span class="line"></span><br><span class="line">**&lt;summary&gt;标签与正文间一定要空一行！！！**</span><br><span class="line">&lt;/details&gt;</span><br></pre></td></tr></table></figure><details><summary>Markdown方法</summary><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Markdown</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"可以使用三个撇号包围代码,第一行撇号后面指定代码语言(推荐)"</span>);</span><br><span class="line">    System.out.println(<span class="string">"或者简单的将代码缩进四个空格"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h4 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h4><p>在<a href="https://github.com/" rel="external nofollow noopener noreferrer" target="_blank">gitHub</a>中,如果你想向某人发表评论,你可以在他们名字前面加<code>@</code>符号:hello@TEAPER  </p><h4 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h4><p>GitHub支持表情符号,语法<code>:ide:</code>,可以查看<a href="https://www.webpagefx.com/tools/emoji-cheat-sheet/" rel="external nofollow noopener noreferrer" target="_blank">表情大全</a>  </p><h4 id="徽章"><a href="#徽章" class="headerlink" title="徽章"></a>徽章</h4><p>徽章一般使用一个开源项目<a href="https://shields.io/" rel="external nofollow noopener noreferrer" target="_blank">shields.io</a>制作  </p><p><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a> <a href="https://996.icu" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><img src="https://img.shields.io/badge/-%E9%9A%BE%E7%82%B9-blueviolet.svg" alt="难点"> <img src="https://img.shields.io/badge/-%E9%87%8D%E7%82%B9-red.svg" alt="重点"> <img src="https://img.shields.io/badge/-%E5%9F%BA%E7%A1%80-important.svg" alt="基础"> <img src="https://img.shields.io/badge/-%E7%AE%80%E5%8D%95-sccess.svg" alt="简单"> <img src="https://img.shields.io/badge/-%E5%86%B7%E9%97%A8-9cf.svg" alt="冷门"><br><img src="https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E7%B2%BE%E9%80%9A-blueviolet.svg" alt="要求精通"> <img src="https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E7%86%9F%E6%82%89-red.svg" alt="要求熟悉"> <img src="https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E4%BA%86%E8%A7%A3-important.svg" alt="要求了解">  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[![LICENSE](https://img.shields.io/badge/license-Anti%20996-blue.svg)](https://github.com/996icu/996.ICU/blob/master/LICENSE) [![996.icu](https://img.shields.io/badge/link-996.icu-red.svg)](https://996.icu)  </span><br><span class="line">![难点](https://img.shields.io/badge/-%E9%9A%BE%E7%82%B9-blueviolet.svg) ![重点](https://img.shields.io/badge/-%E9%87%8D%E7%82%B9-red.svg) ![基础](https://img.shields.io/badge/-%E5%9F%BA%E7%A1%80-important.svg) ![简单](https://img.shields.io/badge/-%E7%AE%80%E5%8D%95-sccess.svg) ![冷门](https://img.shields.io/badge/-%E5%86%B7%E9%97%A8-9cf.svg)  </span><br><span class="line">![要求精通](https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E7%B2%BE%E9%80%9A-blueviolet.svg) ![要求熟悉](https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E7%86%9F%E6%82%89-red.svg) ![要求了解](https://img.shields.io/badge/%E8%A6%81%E6%B1%82-%E4%BA%86%E8%A7%A3-important.svg)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/2019/05/24/buildermodel/"/>
      <url>/2019/05/24/buildermodel/</url>
      
        <content type="html"><![CDATA[<p><span style="color:#B900ff;">分离了对象子组件的单独构造<span style="color:#ff0000;">(由<code>Builder</code>建造者负责)</span>和装配<span style="color:#ff0000;">(由<code>Director</code>装配者负责)</span>的分离；从而可以构造出复杂的对象<br>这个模式适用于：某个对象的构造过程复杂的情况下使用<br>由于实现了构建和装配的解耦，不同的构造器，相同的装配，也可以做出不同的对象，相同的构造器，不同的顺序装配也可以做出不同的对象，这也就是实现了构建算法，装配算法的解耦，实现了更好的复用</span>  </p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote><p>构建复杂产品之后的组装工作，通常和工厂模式配合使用<br>StringBuilder类的append方法<br>JDOM中、DomBuilder、SaxBuilder  </p></blockquote><h4 id="模式结构"><a href="#模式结构" class="headerlink" title="模式结构"></a>模式结构</h4><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3chltu6iaj30sa0i8dgm.jpg" alt>  </p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><p>建造者模式中有建造者和装配者，首先建造者要建造什么产品，需要一个对象 <code>AirShip</code> 宇宙飞船类，宇宙飞船由三个组件 (轨道舱、发动机、逃逸塔) 组成，并且提供一个 <code>launch()</code> 方法发射飞船<br><span style="color:#ff0000;">注意：一般我们直接将组件写成多个<code>.class</code>文件，而不是全放在一个类文件里，这里简写一下而已</span>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】建造者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 宇宙飞船类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AirShip</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> OrbitalModel orbitalModel;    <span class="comment">//轨道舱</span></span><br><span class="line"><span class="keyword">private</span> Engine engine;   <span class="comment">//发动机</span></span><br><span class="line"><span class="keyword">private</span> EscapeTower escapeTower;  <span class="comment">//逃逸塔</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">launch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"发射！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrbitalModel <span class="title">getOrbitalModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orbitalModel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrbitalModel</span><span class="params">(OrbitalModel orbitalModel)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orbitalModel = orbitalModel;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">getEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEngine</span><span class="params">(Engine engine)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> EscapeTower <span class="title">getEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> escapeTower;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEscapeTower</span><span class="params">(EscapeTower escapeTower)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.escapeTower = escapeTower;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//轨道舱类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrbitalModel</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OrbitalModel</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发动机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String nameString;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Engine</span><span class="params">(String nameString)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.nameString = nameString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNameString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> nameString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNameString</span><span class="params">(String nameString)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nameString = nameString;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//逃逸塔</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EscapeTower</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">EscapeTower</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有具体组件了，就可以开始创建我们的创造者，创造者负责创造组件，那么就需要一个创造者接口 <code>AirShipBuilder</code> ，用于建造各种器件；以及它的实现类 <code>SxtAirShipBuilder</code> 去建造具体的器件属性  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】建造者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 帮助构建子组件类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirShipBuilder</span> </span>&#123;</span><br><span class="line"><span class="function">Engine <span class="title">builderEngine</span><span class="params">()</span></span>;<span class="comment">//构建发动机</span></span><br><span class="line"><span class="function">OrbitalModel <span class="title">builderOrbitalModel</span><span class="params">()</span></span>;<span class="comment">//构建轨道舱</span></span><br><span class="line"><span class="function">EscapeTower <span class="title">builEscapeTower</span><span class="params">()</span></span>;<span class="comment">//构建逃逸塔</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】建造者实现类，继承建造者类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 说明：带Builder的接口名都是使用了建造者模式，例如：StringBuilder、DomBuilder、SaxBuilder  </span></span><br><span class="line"><span class="comment"> * 以后项目中如果使用到设计模式，也要这样去命名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SxtAirShipBuilder</span> <span class="keyword">implements</span> <span class="title">AirShipBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">builderEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建发动机组件"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Engine(<span class="string">"奔腾发动机"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> OrbitalModel <span class="title">builderOrbitalModel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建轨道舱"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OrbitalModel(<span class="string">"灵动轨道舱"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> EscapeTower <span class="title">builEscapeTower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"构建逃逸塔"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EscapeTower(<span class="string">"华容逃逸塔"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般我们看到的带 <code>Builder</code> 的接口名都是使用了建造者模式，根据《阿里巴巴Java开发手册》，当我们在项目中使用了相应设计模式的时候，也要拼接对应模式的英文，达到见名知意  </p><p>建造者完成了具体器件的建造，需要交给装配者进行器件的组装，这里定义一个装配者接口 <code>AirShipDirector</code> (见名知意：建造者接口名带Director) 以及它的实现类 <code>SxtAirShipDirector</code>   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】装配者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AirShipDirector</span> </span>&#123;</span><br><span class="line"><span class="function">AirShip <span class="title">directorAirShip</span><span class="params">()</span></span>;<span class="comment">//组装飞船对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】装配者实现类，继承装配者接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SxtAirShipDirector</span> <span class="keyword">implements</span> <span class="title">AirShipDirector</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AirShipBuilder builder;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SxtAirShipDirector</span><span class="params">(AirShipBuilder builder)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.builder = builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AirShip <span class="title">directorAirShip</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//调用建造者接口，创造组件</span></span><br><span class="line">Engine engine = builder.builderEngine();</span><br><span class="line">OrbitalModel orbitalModel= builder.builderOrbitalModel();</span><br><span class="line">EscapeTower escapeTower = builder.builEscapeTower();</span><br><span class="line"></span><br><span class="line"><span class="comment">//将组件组装成飞船对象</span></span><br><span class="line">AirShip airShip = <span class="keyword">new</span> AirShip();</span><br><span class="line">airShip.setEngine(engine);</span><br><span class="line">airShip.setOrbitalModel(orbitalModel);</span><br><span class="line">airShip.setEscapeTower(escapeTower);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> airShip;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>装配者实现类需要具体组件，所以需要定义一个组件接口 <code>AirShipBuilder</code> ，使用该接口获取具体组件信息，将其封装在一个宇宙飞船对象 <code>AirShip</code> 中，返回给需要飞船的客户  </p><p>客户需要飞船，只需要通过装配者 <code>AirShipDirector</code> 以及他的实例 <code>SxtAirShipDirector</code> 获取一个宇宙飞船对象，<code>SxtAirShipDirector</code> 实例需要一个建造者对象<code>AirShipBuilder</code>，这里就直接 <code>new</code> 一个即可  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【建造者模式】测试建造者模式，创造飞船</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">AirShipDirector airShipDirector = <span class="keyword">new</span> SxtAirShipDirector(<span class="keyword">new</span> SxtAirShipBuilder());</span><br><span class="line">AirShip airShip = airShipDirector.directorAirShip();</span><br><span class="line">System.out.println(airShip.getEngine().getNameString());</span><br><span class="line">airShip.launch();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拿到飞船对象，直接通过它的建造者的建造方法 <code>directorAirShip()</code> 去组装飞船即可，最后可以输出以下结果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">构建发动机组件</span><br><span class="line">构建轨道舱</span><br><span class="line">构建逃逸塔</span><br><span class="line">奔腾发动机</span><br><span class="line">发射！</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/2019/05/19/factory-mode/"/>
      <url>/2019/05/19/factory-mode/</url>
      
        <content type="html"><![CDATA[<p><span style="color:#B900ff;">核心作用：实现了创建者和调用者的分离</span><br><span style="color:#B900ff;">核心本质：实例化对象，用工厂方法代替<code>new</code>操作，将选择实现类、创建对象统一管理和控制，从而将调用者跟我们的实现类解耦</span>  </p><h4 id="常见的三种工厂模式"><a href="#常见的三种工厂模式" class="headerlink" title="常见的三种工厂模式"></a>常见的三种工厂模式</h4><ul><li>简单工厂模式：用来生产同一等级结构中的任意产品（对于新的产品需要修改已有代码）</li><li>工厂方法模式：用来生产同一等级结构中的固定产品（支持任意产品）</li><li>抽象工厂模式：用来生产不同产品族的全部产品（对于增加新的产品无能为力，支持增加产品族）</li></ul><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote><p>JDK中的Calendar的getInstance方法<br>JDBC的connection 对象的获取<br>Hibernate中的sessionFactory的session创建<br>Spring 的 IOC容器创建管理bean对象<br>反射中Class对象的newInstance  </p></blockquote><h4 id="面向对象设计的基本原则"><a href="#面向对象设计的基本原则" class="headerlink" title="面向对象设计的基本原则"></a>面向对象设计的基本原则</h4><ul><li>OCP（开闭原则 Open-Closed Principe）：一个软件的实体应当对拓展开放，对修改关闭  </li><li>DIP（依赖倒转原型，Dependence Inversion Principle）：要针对接口编程，不要针对实现编程。</li><li>LoD（迪米特法则，Law of Demeter）：只与你得朋友通信，而避免和陌生人通信</li></ul><p>首先，我们需要一个车类接口，给比亚迪和奥迪继承，并实现车类接口的<code>run()</code>方法，输出什么车在跑  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂模式】车类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂模式】奥迪车类，继承车类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"奥迪在跑！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂模式】比亚迪车类，继承车类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Byd</span> <span class="keyword">implements</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"比亚迪在跑！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么没有工厂模式的情况下，我们要如何输出对应车类的实现呢？  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂模式】在没有工厂模式的情况下</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car c1 = <span class="keyword">new</span> Audi();</span><br><span class="line">Car c2 = <span class="keyword">new</span> Byd();</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面我们可以看出，如果我们要实现对应车类，需要每次都去<code>new</code>对应实现，如果车类很多，几百种，那么名称就记不过来，因此我们需要一个自己会判断的工厂，要什么就自动给什么</p><h4 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h4><p>简单工厂模式 也可以叫做静态工厂模式，就是工厂一般使用静态方法 通过接收参数的形式来返回不同的对象实例  </p><p><strong>写法一：</strong><br>直接采用<code>if</code>去判断需要的是什么车，然后将对象返回  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【简单工厂模式】写法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createCar</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">"奥迪"</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"比亚迪"</span>.equals(type))&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Byd();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【简单工厂模式】测试写法一</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car c1 = CarFactory.createCar(<span class="string">"奥迪"</span>);</span><br><span class="line">Car c2 = CarFactory.createCar(<span class="string">"比亚迪"</span>);</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>写法二：</strong>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【简单工厂模式】写法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createAudi</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createByd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Byd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【简单工厂模式】测试写法二</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car c1 = CarFactory2.createAudi();</span><br><span class="line">Car c2 = CarFactory2.createByd();</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中不难看出，我们的工厂代码中需要知道各种车子类的实现，如果要添加新的车类，首先需要新建一个<code>.class</code>文件，然后还要修改<code>Factory.class</code>，在里面添加判断或<code>new</code>相应的对象，没有满足OCP原则 (开闭原则)  </p><p><span style="color:#ff0000;">缺点：新增产品无能为力，不修改代码的话是无法拓展的</span>  </p><h4 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h4><p>为了避免简单工厂模式不完全满足OCP原则的缺点，可以通过工厂方法模式来解决<br>工厂方法模式和简单工厂模式最大的不同在于，简单工厂模式只有一个<span style="color:#ff0000;">（对于一个项目或者一个独立的模块而言）</span>工厂类，而工厂模式有一组实现了相同接口的工厂类  </p><p>首先创建一个工厂接口，给其他工厂类继承  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂方法模式】车类接口，实现创建车方法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"><span class="function">Car <span class="title">createCar</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂方法模式】奥迪车工厂，继承车类接口，创建奥迪车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudiFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Audi();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂方法模式】比亚迪车工厂，继承车类接口，创建比亚迪车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BydFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Byd();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂方法模式】奔驰车工厂，继承车类接口，创建奔驰车</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BenzFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Car <span class="title">createCar</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Benz();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【工厂方法模式】测试两个工厂类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Car c1 = <span class="keyword">new</span> AudiFactory().createCar();</span><br><span class="line">Car c2 = <span class="keyword">new</span> BydFactory().createCar();</span><br><span class="line">c1.run();</span><br><span class="line">c2.run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果我们需要添加一个奔驰车类，只需要创建一个奔驰车对象继承车类接口，再创建一个奔驰车工厂，继承车工厂类接口即可，不需要修改代码段，解决了简单工厂模式的弊端；但是其自身需要创建很多类，不利于管理  </p><h4 id="简单工厂模式和工厂方法模式比较"><a href="#简单工厂模式和工厂方法模式比较" class="headerlink" title="简单工厂模式和工厂方法模式比较"></a>简单工厂模式和工厂方法模式比较</h4><p> <strong>结构复杂度</strong>  </p><ul><li><p>从这个角度比较，显然简单工厂要占优势;简单工厂只需要一个工厂类，而工厂方法模式的工厂类随着产品的个数增多而增加</p></li><li><p>这样就会使类的个数越来越多，无疑是增加了结构的复杂程度  </p></li><li><p><em>代码复杂度*</em>  </p></li><li><p>代码复杂度和结构复杂度是一对矛盾，既然简单工厂模式在结构方面比较简洁，那么代码方面肯定是要比工厂方法模式的复杂的了</p></li><li><p>简单工厂模式的工厂类随着产品的个数增多而增加很多方法。而工厂方法模式每个具体工厂只完成一项产品的任务，代码简洁</p></li></ul><p><strong>客户端编制难度</strong>  </p><ul><li>工厂方法模式虽然在工厂类结构中引入了接口从而满足了OCP，但是在客户端代码中需要对工厂进行实例化</li><li>而简单工厂类是一个静态类。在客户端无法实例化  </li></ul><p><strong>管理上的难度</strong>  </p><ul><li>这是个关键的问题</li><li>扩展，工厂方法模式完全满足于OCP,即他又非常良好的拓展性，那是否就说明了简单工厂模式就没有了拓展性呢？</li><li>答案是否定的。简单工厂模式同样具有良好的拓展性。拓展的时候，仅需要修改少量的代码。修改工厂类的代码就可以满足拓展性的要求了</li></ul><p><span style="color:#ff0000;">根据设计理论建议：工厂方法模式。而实际上，我们一般还是使用<strong>简单工厂模式</strong></span></p><h4 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h4><p>用来生产不同产品族的全部产品<span style="color:#ff0000;">（对于增加新的产品无能为力，支持增加产品族）</span><br>抽象工厂模式是工厂模式的升级版本；在有多个业务品种，业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式  </p><blockquote><p>举个例子：我们需要多个产品族，且有一系列不同规格的产品  </p></blockquote><table><thead><tr><th>产品1</th><th>产品2</th><th>产品3</th><th>规格</th></tr></thead><tbody><tr><td>发动机</td><td>座椅</td><td>轮胎</td><td>高端产品族</td></tr><tr><td>发动机</td><td>座椅</td><td>轮胎</td><td>中端产品族</td></tr><tr><td>发动机</td><td>座椅</td><td>轮胎</td><td>低端产品族</td></tr></tbody></table><p>首先创建发动机、座椅、轮胎接口类，并实现对应的方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】发动机类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高端发动机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"高端发动机时速：800km/h"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"高端发动机启动时间：30s"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//低端发动机</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowEngine</span> <span class="keyword">implements</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"低端发动机时速：300km/h"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"低端发动机启动时间：80s"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】座椅类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高端座椅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxurySeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"高端座椅：支持自动按摩！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//低端座椅</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowSeat</span> <span class="keyword">implements</span> <span class="title">Seat</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">massage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"低端座椅：不支持自动按摩！"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】轮胎类接口</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//高端轮胎</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LuxuryTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"高端轮胎：使用寿命5年"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//低端轮胎</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LowTyre</span> <span class="keyword">implements</span> <span class="title">Tyre</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">revolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"低端轮胎：使用寿命2年"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后针对产品族，创建产品工厂，用来创建产品，然后高端产品工厂和低端产品工厂继承产品工厂生成高端或低端产品  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】创建产品族</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"><span class="function">Engine <span class="title">createEngine</span><span class="params">()</span></span>;<span class="comment">//创建发动机</span></span><br><span class="line"><span class="function">Seat <span class="title">createSeat</span><span class="params">()</span></span>;<span class="comment">//创建座椅</span></span><br><span class="line"><span class="function">Tyre <span class="title">createTyre</span><span class="params">()</span></span>;<span class="comment">//创建轮胎</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】高端产品族工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LuxuryCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxuryEngine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Seat <span class="title">createSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxurySeat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Tyre <span class="title">createTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LuxuryTyre();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】低端产品族工厂</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LowCarFactory</span> <span class="keyword">implements</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Engine <span class="title">createEngine</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowEngine();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Seat <span class="title">createSeat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowSeat();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Tyre <span class="title">createTyre</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LowTyre();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试使用抽象工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【抽象工厂模式】测试</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//高端产品</span></span><br><span class="line">CarFactory factory = <span class="keyword">new</span> LuxuryCarFactory();</span><br><span class="line">Engine engine = factory.createEngine();</span><br><span class="line">Seat seat = factory.createSeat();</span><br><span class="line">Tyre tyre = factory.createTyre();</span><br><span class="line">engine.run();</span><br><span class="line">engine.start();</span><br><span class="line">seat.massage();</span><br><span class="line">tyre.revolve();</span><br><span class="line"></span><br><span class="line"><span class="comment">//低端产品</span></span><br><span class="line">CarFactory factory2 = <span class="keyword">new</span> LowCarFactory();</span><br><span class="line">Engine engine2 = factory2.createEngine();</span><br><span class="line">Seat seat2 = factory2.createSeat();</span><br><span class="line">Tyre tyre2 = factory2.createTyre();</span><br><span class="line">engine2.run();</span><br><span class="line">engine2.start();</span><br><span class="line">seat2.massage();</span><br><span class="line">tyre2.revolve();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/05/19/singleton-model/"/>
      <url>/2019/05/19/singleton-model/</url>
      
        <content type="html"><![CDATA[<p><span style="color:#B900ff;">核心作用：保证一个类只有一个示例，并且提供一个访问该实例的全局访问点</span>  </p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><blockquote><p>Windows的Task Manager（任务管理器）就是典型的单例模式<br>Windows的Recycle Bin（回收站）也是典型的单例模式，在整个系统中，回收站一直维护着一个实例<br><span style="color:#ff0000;">项目中，读取配置文件的类，一般也只有一个对象，没有必要每次使用配置文件数据，每次new一个对象去读取</span><br>网站的计数器，一般也采用单例模式，否则难以同步<br>应用程序的日志功能，一般都使用单例模式，由于共享的日志文件一直处于打开状态，因为只能一个实例去操作，否则内容不好追加<br><span style="color:#ff0000;">数据库连接池的设计一般也采用单例模式，因为数据库连接是一种数据库资源</span><br>操作系统的文件系统，也是最大的单例模式的具体例子，一个操作系统只能有一个文件系统<br>Application 也是单例的典型应用（servlet 编程中会涉及到）<br><span style="color:#ff0000;">在Spring框架中，每个bean默认就是单例的，这样做的优点就是方便Spring IOC容器进行管理</span><br>在servlet编程中，每个servlet也是单例<br><span style="color:#ff0000;">在Spring MVC框架/struts2框架中，控制器对象也是单例</span>  </p></blockquote><h4 id="单例模式的优点"><a href="#单例模式的优点" class="headerlink" title="单例模式的优点"></a>单例模式的优点</h4><p>由于单例模式只生成一个实例，减少系统性能开销，当一个对象的产生需要比较多的资源时（例如：读取配置、产生其他依赖对象时），则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决  </p><p>单例模式可以在系统设置全局的访问点，优化环共享资源访问（例如：可以设计一个单例类，负责所有数据表的映射处理）  </p><h4 id="常见的五种单例模式实现方式："><a href="#常见的五种单例模式实现方式：" class="headerlink" title="常见的五种单例模式实现方式："></a>常见的五种单例模式实现方式：</h4><p>主要：  </p><ul><li>饿汉式（线程安全，调用效率高；但是，不能延时加载）  </li><li>懒汉式（线程安全，调用效率不高；但是，可以延时加载）  </li></ul><p>其他：  </p><ul><li>双重检测锁式（用于JVM底层内部模型原因，偶尔出现问题，<span style="color:#ff0000;">不建议使用</span>）  </li><li>静态内部类式（线程安全，调用效率高，可以延时加载）</li><li>枚举式（线程安全，调用率高，不能延时加载，并且天然的防止反射和反序列化漏洞）  </li></ul><h4 id="饿汉式实现"><a href="#饿汉式实现" class="headerlink" title="饿汉式实现"></a>饿汉式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】饿汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 解说：</span></span><br><span class="line"><span class="comment"> * 类初始化的时候，不管你要不要都提供一个静态的私有对象instance</span></span><br><span class="line"><span class="comment"> * 静态变量会在类装载时初始化，此时不会涉及，多个线程对象的访问该对象的问题</span></span><br><span class="line"><span class="comment"> * 虚拟机保证只转载一次该类，肯定不会发生并发访问的问题，因此可以省略synchronized关键字</span></span><br><span class="line"><span class="comment"> * 再私有化构造器，不让创建其他对象 </span></span><br><span class="line"><span class="comment"> * 只提供静态私有方法返回仅有的一个对象instance</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> * 如果只是加载类，不调用类的getInstance()方法，会造成资源浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo01</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、只留一个私有的对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="comment">/*final*/</span> SingletonDemo01 instance= <span class="keyword">new</span> SingletonDemo01();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、提供私有方法返回私有对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="comment">/*synchronized*/</span> <span class="function">SingletonDemo01 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式实现"><a href="#懒汉式实现" class="headerlink" title="懒汉式实现"></a>懒汉式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】懒汉式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 解说：</span></span><br><span class="line"><span class="comment"> * 类初始化的时候，只创建静态的私有对象instance，并没有进行初始化(默认值：null)</span></span><br><span class="line"><span class="comment"> * 虚拟机保证只转载一次该类，肯定不会发生并发访问的问题，因此可以省略synchronized关键字</span></span><br><span class="line"><span class="comment"> * 再私有化构造器，不让创建其他对象 </span></span><br><span class="line"><span class="comment"> * 提供静态私有方法，判断是否初始化，如果未初始化就给对象进行初始化（延时加载、懒加载、真正用的时候才加载）</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> * 资源利用率高了，而且每次调用getInstance()方法都要等待其他对象调用完，并发效率低</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo02</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、创建一个静态私有对象，但是不初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo02 instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、提供静态私有方法，判断是否初始化，如果未初始化就给对象进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo02 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> SingletonDemo02();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检测锁式实现"><a href="#双重检测锁式实现" class="headerlink" title="双重检测锁式实现"></a>双重检测锁式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】双重检测锁式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 解说：</span></span><br><span class="line"><span class="comment"> * 这个模式同步内容下方到if内部，提高了执行的效率</span></span><br><span class="line"><span class="comment"> * 不必每次获取对象时都进行同步，只有第一次才同步创建了以后就没必要</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> * 由于编译器优化原因和JVM底层内部模型原因，偶尔会出现问题，所以不建议使用（仅做参考）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo03</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、创建一个静态私有对象，但是不初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo03 instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo03 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">SingletonDemo03 sc;</span><br><span class="line"><span class="keyword">synchronized</span> (SingletonDemo03.class) &#123; </span><br><span class="line">sc = instance;</span><br><span class="line"><span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">synchronized</span> (SingletonDemo03.class) &#123;</span><br><span class="line"><span class="keyword">if</span> (sc == <span class="keyword">null</span>) &#123;</span><br><span class="line">sc = <span class="keyword">new</span> SingletonDemo03();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">instance = sc;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类式实现"><a href="#静态内部类式实现" class="headerlink" title="静态内部类式实现"></a>静态内部类式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】静态内部类式（懒加载）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 解说：</span></span><br><span class="line"><span class="comment"> * 外部类没有static属性，则不会像饿汉式那样立刻加载对象</span></span><br><span class="line"><span class="comment"> * 初始化SingletonDemo04类的时候，并不会立即初始化它的静态内部类  </span></span><br><span class="line"><span class="comment"> * 只有调用getInstance()方法，才会调用它的静态内部类去创建实例对象，实现延时加载（懒加载）</span></span><br><span class="line"><span class="comment"> * 加载类时是线程安全的，instance对象是static final类型，保证内存中只有一个实例存在，而且只能被赋值一次，从而保证线程安全</span></span><br><span class="line"><span class="comment"> * 兼并了并发高效调用和延时加载的优势</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo04</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、在静态内部类SingletonClassInstance中定义一个对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonClassInstance</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SingletonDemo04 instance = <span class="keyword">new</span> SingletonDemo04();<span class="comment">//使用final禁止修改</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、提供静态私有方法，返回内部类实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonDemo04 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SingletonDemo04.SingletonClassInstance.instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举式实现"><a href="#枚举式实现" class="headerlink" title="枚举式实现"></a>枚举式实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】枚举单例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> * 优点：</span></span><br><span class="line"><span class="comment"> * 实现简单</span></span><br><span class="line"><span class="comment"> * 枚举本身就是单例模式，由JVM从根本上提供保障，避免了反射和反序列化的漏洞，调用效率比较高</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺点：</span></span><br><span class="line"><span class="comment"> * 没有延时加载（懒加载）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SingletonDemo05 &#123;</span><br><span class="line"><span class="comment">// 枚举元素本身就是单例对象，定义一个枚举的元素，它就代表单例的一个实例</span></span><br><span class="line">INSTANCE;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加自己需要的操作。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">singletonOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//功能处理代码块</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">那么如何选用呢？</span><br>如果是单例对象，要求占用资源少，不需要延时加载的话</p><ul><li><strong>枚举式</strong> 好于 <strong>饿汉式</strong>  </li></ul><p>如果是单例对象，要求占用资源大，需要延时加载的话</p><ul><li><strong>静态内部类式</strong> 好于 <strong>懒汉式</strong>  </li></ul><h4 id="破解单例模式"><a href="#破解单例模式" class="headerlink" title="破解单例模式"></a>破解单例模式</h4><p>虽然说单例模式被我们设计成只有一个对象，不过我们依然可以使用<strong>反射</strong>、<strong>反序列化</strong>破解除枚举之外的其他四种单例模式，让它创建多个对象  </p><blockquote><p>使用反射破解懒汉式  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】使用反射和反序列化破解单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//先输出两个懒汉式对象的值</span></span><br><span class="line">SingletonDemo06 instance1 = SingletonDemo06.getInstance();</span><br><span class="line">SingletonDemo06 instance2 = SingletonDemo06.getInstance();</span><br><span class="line">System.out.println(instance1+<span class="string">"\n"</span>+instance2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用反射破解懒汉式</span></span><br><span class="line">Class&lt;SingletonDemo06&gt; clazz =  (Class&lt;SingletonDemo06&gt;) Class.forName(<span class="string">"cn.teaper.www.singletonmode.SingletonDemo06"</span>);</span><br><span class="line">Constructor&lt;SingletonDemo06&gt; c = clazz.getDeclaredConstructor(<span class="keyword">null</span>);</span><br><span class="line">c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">SingletonDemo06 s3 = c.newInstance();</span><br><span class="line">SingletonDemo06 s4 = c.newInstance();</span><br><span class="line">System.out.println(s3+<span class="string">"\n"</span>+s4);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先输出<code>instance1</code>和<code>instance2</code>的值，确定是同一个对象，然后使用反射破解懒汉式，再输出两个对象，可以发现运行结果变成  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@7b3300e5    <span class="comment">#instance1</span></span><br><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@7b3300e5    <span class="comment">#instance2</span></span><br><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@2e5c649     <span class="comment">#s3</span></span><br><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@136432db    <span class="comment">#s4</span></span><br></pre></td></tr></table></figure><p>很明显利用反射可以直接破解懒汉式，那么<strong>如何防止懒汉式被破解呢？</strong><br>可以判断对象是否存在，不存在则<strong>抛出运行时异常</strong>，就此防止懒汉式被破解  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】测试懒汉式（如何防止反射和反序列化漏洞）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo06</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo06 instance;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo06</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//抛出异常防止反射破解</span></span><br><span class="line"><span class="keyword">if</span>(instance!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> SingletonDemo06();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用反序列化破解懒汉式  </p></blockquote><p>要使用反射，首先懒汉式的类就要继承<code>Serializable</code>类  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】测试懒汉式（如何防止反射和反序列化漏洞）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo06</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;   <span class="comment">//继承Serializable类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1、创建一个静态私有对象，但是不初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo06 instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo06</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、提供静态私有方法，判断是否初始化，如果未初始化就给对象进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> SingletonDemo06();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先使用序列化将值存储在<code>a.txt</code>中，然后再进行反序列化输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】使用反射和反序列化破解懒汉式单例模式</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//先输出两个懒汉式对象的值</span></span><br><span class="line">SingletonDemo06 instance1 = SingletonDemo06.getInstance();</span><br><span class="line">SingletonDemo06 instance2 = SingletonDemo06.getInstance();</span><br><span class="line">System.out.println(instance1+<span class="string">"\n"</span>+instance2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用反序列化破解懒汉式</span></span><br><span class="line"><span class="comment">//序列化</span></span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"../a.txt"</span>);</span><br><span class="line">ObjectOutputStream oos = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">oos.writeObject(instance1);</span><br><span class="line">oos.close();</span><br><span class="line">fos.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"../a.txt"</span>));</span><br><span class="line">SingletonDemo06 s3 = (SingletonDemo06) ois.readObject();</span><br><span class="line">System.out.println(s3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到输出结果是不同的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@7b3300e5    <span class="comment">#instance1</span></span><br><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@7b3300e5    <span class="comment">#instance2</span></span><br><span class="line">cn.teaper.www.singletonmode.SingletonDemo06@7cf10a6f    <span class="comment">#s3</span></span><br></pre></td></tr></table></figure><p>那么如何<strong>防止被反序列化破解</strong>呢？<br>只需要添加一个私有方法<code>reaObject()</code>返回instance对象即可  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】测试懒汉式（如何防止反射和反序列化漏洞）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonDemo06</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、创建一个静态私有对象，但是不初始化</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> SingletonDemo06 instance;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、私有化构造器</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SingletonDemo06</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//抛出异常破解反射</span></span><br><span class="line"><span class="keyword">if</span>(instance!=<span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、提供静态私有方法，判断是否初始化，如果未初始化就给对象进行初始化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonDemo06 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> SingletonDemo06();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//防止反序列化破解</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Object <span class="title">reaObject</span><span class="params">()</span> <span class="keyword">throws</span> ObjectStreamException</span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;<span class="comment">//在反序列化时会直接调用reaObject()方法返回instance对象，而不会把反序列化的新对象返回</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="五种单例模式的执行效率"><a href="#五种单例模式的执行效率" class="headerlink" title="五种单例模式的执行效率"></a>五种单例模式的执行效率</h4><p>这里我们采用的是多线程下进行的测试，不同环境下的值有所不同  </p><table><thead><tr><th>单例模式</th><th>执行时间</th></tr></thead><tbody><tr><td>饿汉式</td><td>22ms</td></tr><tr><td>懒汉式</td><td>636ms</td></tr><tr><td>静态内部类式</td><td>28ms</td></tr><tr><td>枚举式</td><td>32ms</td></tr><tr><td>双重检测锁式</td><td>65ms</td></tr></tbody></table><p>要测试多线程下单例模式的执行效率，需要借助一个<code>CountDownLatch</code>类  </p><blockquote><p>同步辅助类，在完成一组正在其他线程中执行的操作之前，它允许一个或多个线程一直等待<br><code>countDown()</code>当前线程调用此方法，则计数减一（建议放在finally里执行）<br><code>await()</code>调用此方法会一直阻塞当前线程，直到倒计时为零  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 【单例模式】测试多线程模式下五种单例模式的执行效率</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> threadNum = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadNum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">Object o = SingletonDemo02.getInstance();<span class="comment">//SingletonDemo01可以换成你想要测试的单例类</span></span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">countDownLatch.await();<span class="comment">//线程阻塞，直到计数器为0，才继续往下执行</span></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"总耗时："</span>+(end-start));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云ubuntu 16.04.5 server建站日志</title>
      <link href="/2019/05/19/ubuntu1604-server-gitea/"/>
      <url>/2019/05/19/ubuntu1604-server-gitea/</url>
      
        <content type="html"><![CDATA[<h4 id="【一】预先准备"><a href="#【一】预先准备" class="headerlink" title="【一】预先准备"></a>【一】预先准备</h4><p>本地系统：<strong>Arch Linux</strong><br>阿里云购买一个轻量服务器，地域随便,镜像选择<code>Ubuntu16.04</code>系统镜像 <span style="color:#ff0000;">(示例ip:39.108.51.25)</span><br>阿里云购买一个域名 <span style="color:#ff0000;">(示例域名:teaper.dev)</span>  </p><p>准备好以下安装包：  </p><blockquote><p><a href="https://www.oracle.com/technetwork/java/javase/downloads/index.html" rel="external nofollow noopener noreferrer" target="_blank">jdk-8u172-linux-x64.tar.gz</a><br><a href="https://tomcat.apache.org/download-90.cgi" rel="external nofollow noopener noreferrer" target="_blank">apache-tomcat-9.0.11.tar.gz</a><br><a href="https://dev.mysql.com/downloads/repo/apt/" rel="external nofollow noopener noreferrer" target="_blank">mysql-apt-config_0.8.10-1_all.deb</a><br><a href="https://dl.gitea.io/gitea/" rel="external nofollow noopener noreferrer" target="_blank">gitea-1.5.0-linux-amd64</a>  </p></blockquote><h4 id="【二】服务器系统配置"><a href="#【二】服务器系统配置" class="headerlink" title="【二】服务器系统配置"></a>【二】服务器系统配置</h4><p>登录阿里云控制台 -&gt; 轻量应用服务器 -&gt; 服务器运维 -&gt; 远程连接<br>单击”秘钥管理” -&gt; 创建秘钥,选择第二项<strong>导入已有秘钥</strong>，然后将你本机SSH生成的<code>id_rsa.pub</code>的密文粘贴上去即可  </p><details><summary style="color:#ff0000;">本机没有 id_rsa.pub 秘钥文件</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S openssh   <span class="comment">#ArchLinux/Manjaro安装ssh服务，Ubuntu/deepin/Kali/Debian请将pacman改成apt</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span>    <span class="comment">#输入常用邮箱，一路按Enter</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh   <span class="comment">#进入.ssh隐藏文件夹</span></span><br><span class="line">gedit id_rsa.pub       <span class="comment">#打开公钥并,复制id_rsa.pub文件中的密文</span></span><br></pre></td></tr></table></figure></details>在“远程连接”选项卡，点击“设置密码”，初始化一个服务器root密码  <p>回到客户端选项卡，单击“<a href="https://help.aliyun.com/document_detail/59083.html?spm=5176.10173289.107.1.6c5d2e77cHI0NI#windows" rel="external nofollow noopener noreferrer" target="_blank">《Putty配置说明》</a>”，按照说明操作，由于我本机是Arch Linux的系统，并且支持SSH命令，所以接下来的命令是以linux系统为标准的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@39.108.51.25  <span class="comment">#无需密码，直接登录成功</span></span><br></pre></td></tr></table></figure><p>这时已经自动使用<code>root</code>用户登录了服务器系统，此时命令行开头为 <code>root@iZwz9emoxkbmiopxeez3sfZ:</code>,其中 <code>iZwz9emoxkbmiopxeez3sfZ</code> 为主机名  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo   <span class="comment">#测试sudo,由于我是用SSH的root用户登录的,后面有些命令就省略了sudo</span></span><br></pre></td></tr></table></figure><p>若第一行出现以下错误信息  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo: unable to resolve host iZwz9emoxkbmiopxeez3sfZ</span><br></pre></td></tr></table></figure><p>则修改修改hosts文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts  <span class="comment">#使用vim修改hosts文件,输入i进入install模式</span></span><br><span class="line">--------------------添加---------------------</span><br><span class="line">127.0.0.1       iZwz9emoxkbmiopxeez3sfZ</span><br><span class="line">---------------------------------------------</span><br></pre></td></tr></table></figure><p>按Esc键退出INSERT模式,输入:wq,按回车保存退出(提示冒号q不保存退出)<br>再次输入sudo测试一下是否正常  </p><h5 id="配置源"><a href="#配置源" class="headerlink" title="配置源"></a>配置源</h5><p><span style="color:#ff0000;">提示:粘贴之后特别注意前两行是否被修改,有的话重新粘贴前两行</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br><span class="line">-------------------------------粘贴源---------------------------------</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial universe</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates universe</span><br><span class="line"> </span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security universe</span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">apt-get update</span><br><span class="line">apt-get upgrade   <span class="comment">#更新时可能出现一个窗口,选择第一个install the package's version,回车</span></span><br></pre></td></tr></table></figure><p>由于我们每次使用SSH登录都要输入IP地址，IP地址太麻烦记不住怎么办，这时候我们可以到阿里云控制台 -&gt; 轻量应用服务器 -&gt; 站点设置 -&gt; 域名，单击”添加域名”按钮，设置一个已注册的域名<span style="color:#ff0000;">(示例域名:git.teaper.dev)</span><br>添加成功之后，解析状态会显示<strong>未解析</strong>，是因为<code>git.teaper.dev</code>是<code>teaper.dev</code>的一个子域名，所以需要去你的域名服务商官网，DNS解析一条<strong>A记录</strong>，样式如下：  </p><table><thead><tr><th>记录类型</th><th>主机记录</th><th>解析线路</th><th>记录值</th><th>MX优先级</th><th>TTL</th></tr></thead><tbody><tr><td>A</td><td>git</td><td>默认</td><td>39.108.51.25</td><td>–</td><td>10分钟</td></tr></tbody></table><p>下次使用ssh登录，就可以写成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@git.teaper.dev  <span class="comment">#登录</span></span><br></pre></td></tr></table></figure><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><p>在本机电脑新建一个文件夹<span style="color:#ff0000;">(例如:pkg)</span>,将预先准备的安装包放进<code>pkg</code>文件夹中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scp -r pkg root@git.teaper.dev:/pkg  <span class="comment">#上传目录</span></span><br><span class="line">------------------------------scp相关补充-----------------------</span><br><span class="line">scp fileName root@IP:fileName  <span class="comment">#上传文件</span></span><br><span class="line">scp -r /opt/folderName root@IP:/opt/folderName  <span class="comment">#上传目录</span></span><br><span class="line">scp root@IP:fileName /dewnloads/fileName   <span class="comment">#下载文件到指定目录</span></span><br><span class="line">---------------------------------------------------------------</span><br><span class="line"> </span><br><span class="line">ssh root@git.teaper.dev  <span class="comment">#登录进去看下</span></span><br><span class="line"><span class="built_in">cd</span> /pkg</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure><h4 id="【三】软件安装"><a href="#【三】软件安装" class="headerlink" title="【三】软件安装"></a>【三】软件安装</h4><p>服务器没有图形界面，一个<code>bash</code>界面不够用，可以安装此工具辅助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">apt-get install git   <span class="comment">#安装git</span></span><br><span class="line"> </span><br><span class="line">apt install screen    <span class="comment">#安装screen</span></span><br><span class="line">-----------------补充------------</span><br><span class="line">screen -S name  <span class="comment">#新建窗口</span></span><br><span class="line">screen -ls   <span class="comment">#窗口列表</span></span><br><span class="line">screen -r name  <span class="comment">#进入目标窗口</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出并删除窗口</span></span><br><span class="line">Ctrl+A+D  <span class="comment">#退出,但保留窗口继续运行</span></span><br><span class="line">--------------------------------</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：到这里，基本系统配置已经完成，最好在阿里云控制台 -&gt; 轻量应用服务器 -&gt; 服务器运维 -&gt; 快照，创建一个快照，方便下次恢复</span></p><h5 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h5><p>我之前在博客<a href="https://www.teaper.dev/2019/05/21/ubuntu1604-install-java/">Ubuntu16.04搭建Java开发环境</a>中安装本机 <code>MySQL</code> 都没有用到安装包，为什么这里又要了呐?<br>之前本机是<code>Ubuntu</code>的桌面版本,<code>MySQL</code>版本为 5.7，如果我们使用 5.7 版本安装方法安装，则会出现 <code>MySQL</code> 不提示设置root密码的情况，那么就无法登录 <code>MySQL</code>，所以我们这里安装<code>MySQL8.0</code>，那么 <code>MySQL8.0</code> 和 <code>MySQL5.7</code> 之间的加密方式不一样，所以后期需要配置  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /pkg/     <span class="comment">#进入安装包文件夹</span></span><br><span class="line">dpkg -i mysql-apt-config_0.8.10-1_all.deb  <span class="comment">#选择第一项,mysql8.0,最后OK</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install mysql-server   <span class="comment">#安装mysql</span></span><br></pre></td></tr></table></figure><p>中途需要输入两次root密码,第三次按shift+上选择第二项5.0X回车继续安装   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---------------------以下命令选用--------------------</span><br><span class="line">sudo service mysql status   <span class="comment">#检查MySQL服务器的状态</span></span><br><span class="line">sudo service mysql stop    <span class="comment">#停止MySQL服务器</span></span><br><span class="line">sudo service mysql start   <span class="comment">#重新启动MySQL服务器</span></span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tap | grep mysql      <span class="comment">#查询是否成功</span></span><br><span class="line"> </span><br><span class="line">--------------------------------成功出现------------------------------</span><br><span class="line">tcp6     0    0 [::]:33060     [::]:*        LISTEN      10170/mysqld</span><br><span class="line">tcp6     0    0 [::]:mysql     [::]:*        LISTEN      10170/mysqld</span><br><span class="line">---------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>如果安装成功，我们就可以使用root账号登录MySQL并设置用户了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p  <span class="comment">#登录</span></span><br><span class="line">mysql&gt; select version();<span class="comment">#查看mysql版本</span></span><br><span class="line">+-----------+</span><br><span class="line">| version() |</span><br><span class="line">+-----------+</span><br><span class="line">| 8.0.12    |</span><br><span class="line">+-----------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; show variables like <span class="string">'default_authentication_plugin'</span>; <span class="comment">#查看默认身份验证方式</span></span><br><span class="line">+-------------------------------+-----------------------+</span><br><span class="line">| Variable_name                 | Value                 |</span><br><span class="line">+-------------------------------+-----------------------+</span><br><span class="line">| default_authentication_plugin | mysql_native_password |</span><br><span class="line">+-------------------------------+-----------------------+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.01 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; select host,user,plugin from mysql.user;<span class="comment">#查看用户的身份验证方式</span></span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| host      | user             | plugin                |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| localhost | mysql.infoschema | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | caching_sha2_password |</span><br><span class="line">| localhost | root             | mysql_native_password |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">4 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure><p>可以看到MySQL8.0的认证方式有 <code>caching_sha2_password</code> 和 <code>mysql_native_password</code> ，目前默认的是 <code>mysql_native_password</code>；这两种验证方式<br>其中 <code>caching_sha2_password</code> 是MySQL8.0的， <code>mysql_native_password</code> 是Mysql5.0的，至于为什么现在默认是5.0的，是因为我们上面 <code>apt-get install mysql-server</code> 时选择了第二项5.X，按照MySQL官方的说法叫做降级<br>那么我么为什么不用8.0的加密呢?是因为我们目前用的数据库客户端，比如Navicat最新版还无法识别8.0的加密方式，无法进行远程连接  </p><details><summary style="color:#ff0000;">如果本地root用户不是 mysql_native_password 认证方式,解决方案如下: </summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"> </span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED BY <span class="string">'root'</span> PASSWORD EXPIRE NEVER;  <span class="comment">#修改加密规则</span></span><br><span class="line">Query OK, 0 rows affected (0.05 sec)</span><br><span class="line"><span class="comment">#说明:两个'root'指查看用户的身份验证方式结果中的user列,localhost指host列</span></span><br><span class="line"> </span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'Root Password'</span>;   <span class="comment">#注意:这里root指本地root用户</span></span><br><span class="line">Query OK, 0 rows affected (0.09 sec)</span><br><span class="line"> </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES; <span class="comment">#刷新权限</span></span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br></pre></td></tr></table></figure></details><p>目前我们可以看到root的host为locahost，只支持本地访问，若要配置远程，需要设置为%  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE USER SET HOST = <span class="string">"%"</span> WHERE USER = <span class="string">"root"</span>;  <span class="comment">#设置root支持远程登录</span></span><br></pre></td></tr></table></figure><p>当然，<strong>为了安全起见</strong>，我们一般会设置一个远程用户<span style="color:#ff0000;">(示例:teaper)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'teaper'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;  <span class="comment">#创建teaper用户,密码自定义</span></span><br><span class="line">GRANT ALL ON *.* TO <span class="string">'teaper'</span>@<span class="string">'%'</span> WITH GRANT OPTION;  <span class="comment">#授权</span></span><br><span class="line">FLUSH PRIVILEGES;  <span class="comment">#刷新权限</span></span><br></pre></td></tr></table></figure><p>为了后面 gitea 的使用，我们需要创建一个远程 gitea 用户，并且只赋予它执行 gitea 数据库的权限，对其他数据库没有权限获取，用于存储 gitea 平台信息  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER <span class="string">'gitea'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">'password'</span>;           <span class="comment">#创建gitea用户,密码自定义</span></span><br><span class="line">GRANT ALL ON gitea.* TO <span class="string">'gitea'</span>@<span class="string">'%'</span>;        <span class="comment">#赋予gitea数据库的增删改查权限</span></span><br><span class="line">CREATE DATABASE gitea;          <span class="comment">#创建gitea数据库</span></span><br><span class="line">SHOW DATABASES;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"> </span><br><span class="line">QUIT        <span class="comment">#退出数据库</span></span><br></pre></td></tr></table></figure><p>由于 MySQL 使用的是 3306 的端口，所以我们还需要去阿里云控制台 -&gt; 轻量应用服务器 -&gt; 安全 -&gt; 防火墙 -&gt; 添加规则，添加 3306 端口  </p><table><thead><tr><th>应用类型</th><th>协议</th><th>端口范围</th></tr></thead><tbody><tr><td>MYSQL</td><td>TCP</td><td>3306</td></tr></tbody></table><p>这样的话，就可以用 Navicat 远程 MySQL 了  </p><h5 id="安装JDK1-8"><a href="#安装JDK1-8" class="headerlink" title="安装JDK1.8"></a>安装JDK1.8</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir /usr/jvm      <span class="comment">#创建jvm文件夹</span></span><br><span class="line">tar -xzvf jdk-8u172-linux-x64.tar.gz -C /usr/jvm</span><br><span class="line">vim /etc/profile     <span class="comment">#配置环境变量</span></span><br><span class="line">-------------------------------末尾追加---------------------------------</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/jvm/jdk1.8.0_172</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=&#123;JAVA_HOME&#125;/jre</span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:&#123;JAVA_HOME&#125;/lib:<span class="variable">$&#123;JRE_HOME&#125;</span>/lib</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">-----------------------------------------------------------------------</span><br><span class="line">update-alternatives  --install /usr/bin/java java /usr/jvm/jdk1.8.0_172/bin/java 300</span><br><span class="line">update-alternatives  --install /usr/bin/javac javac /usr/jvm/jdk1.8.0_172/bin/javac 300</span><br><span class="line">update-alternatives --config java</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><h5 id="安装Tomcat9"><a href="#安装Tomcat9" class="headerlink" title="安装Tomcat9"></a>安装Tomcat9</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf apache-tomcat-9.0.11.tar.gz -C /usr/<span class="built_in">local</span>/    <span class="comment">#解压到/usr/local/文件夹</span></span><br><span class="line">vim /etc/profile     <span class="comment">#配置环境变量</span></span><br><span class="line">---------------------末尾追加---------------------</span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/<span class="built_in">local</span>/apache-tomcat-9.0.11</span><br><span class="line">---------------------PATH添加--------------------</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$TOMCAT_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line">------------------------------------------------</span><br><span class="line">sh /etc/profile          <span class="comment">#使环境变量生效</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/apache-tomcat-9.0.11/</span><br><span class="line">vim conf/server.xml</span><br><span class="line">--------------------------修改----------------------------</span><br><span class="line"><span class="comment">#修改端口8080为80</span></span><br><span class="line">&lt;Connector port=<span class="string">"80"</span> protocol=<span class="string">"HTTP/1.1"</span></span><br><span class="line">               connectionTimeout=<span class="string">"20000"</span></span><br><span class="line">               redirectPort=<span class="string">"8443"</span> /&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改defaultHost为已解析的域名</span></span><br><span class="line">&lt;Engine name=<span class="string">"Catalina"</span> defaultHost=<span class="string">"git.teaper.dev"</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#修改Host name为已解析的域名</span></span><br><span class="line">&lt;Host name=<span class="string">"git.teaper.dev"</span>  appBase=<span class="string">"webapps"</span></span><br><span class="line">        unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</span><br><span class="line"> </span><br><span class="line"><span class="comment">#&lt;Host&gt;标签中新增一项</span></span><br><span class="line">&lt;Context docBase=<span class="string">"/项目名称"</span> path=<span class="string">""</span> debug=<span class="string">"0"</span> reloadable=<span class="string">"true"</span>/&gt;</span><br><span class="line">----------------------------------------------------------</span><br><span class="line">./bin/startup.sh  <span class="comment">#启动tomcat</span></span><br></pre></td></tr></table></figure><h5 id="安装docker和docker-compose"><a href="#安装docker和docker-compose" class="headerlink" title="安装docker和docker-compose"></a>安装docker和docker-compose</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">docker  <span class="comment">#查看是否有安装</span></span><br><span class="line">-------------------卸载旧版本------------------</span><br><span class="line">apt-get remove docker docker-engine docker.io</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">#添加Docker软件源</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get install apt-transport-https ca-certificates  curl software-properties-common</span><br><span class="line">curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository <span class="string">"deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#安装Docker CE(社区版)</span></span><br><span class="line">apt-get update -y</span><br><span class="line">apt-get install docker-ce -y</span><br><span class="line"> </span><br><span class="line"><span class="comment">#设置开机启动</span></span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br><span class="line"> </span><br><span class="line"><span class="comment">#把当前用户加入docker组</span></span><br><span class="line">groupadd docker</span><br><span class="line">usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#测试 docker</span></span><br><span class="line">docker run hello-world</span><br><span class="line">vim /etc/docker/daemon.json  <span class="comment">#编辑该文件,使用Docker中国官方镜像</span></span><br><span class="line">---------------daemon.json----------------</span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">     <span class="string">"https://registry.docker-cn.com"</span></span><br><span class="line">   ]</span><br><span class="line"> &#125;</span><br><span class="line">------------------------------------------</span><br><span class="line"> </span><br><span class="line"><span class="comment">#重启服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br><span class="line"> </span><br><span class="line"><span class="comment">#安装 docker composer</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br><span class="line"> </span><br><span class="line"><span class="comment">#安装 docker composer自动补全命令</span></span><br><span class="line">curl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></pre></td></tr></table></figure><h5 id="搭建gitea平台"><a href="#搭建gitea平台" class="headerlink" title="搭建gitea平台"></a>搭建gitea平台</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">adduser git     <span class="comment">#服务器新建git用户,输入两次密码,一路回车</span></span><br><span class="line">id git  <span class="comment">#记下git用户UID和GID (示例:UID:1001 GID:1001)</span></span><br><span class="line">mkdir /usr/<span class="built_in">local</span>/gitea &amp;&amp; <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/gitea         <span class="comment">#新建并进入gitea文件夹</span></span><br><span class="line">cp /pkg/gitea-1.5.0-linux-amd64  /usr/<span class="built_in">local</span>/gitea</span><br><span class="line">vim docker-compose.yml      <span class="comment">#创建docker-compose.yml文件,注意空格缩进,每级别4个空格</span></span><br><span class="line">-------------docker-compose.yml编辑--------------</span><br><span class="line">version: <span class="string">"2"</span></span><br><span class="line">networks:</span><br><span class="line">  gitea:</span><br><span class="line">    external: <span class="literal">false</span></span><br><span class="line">services:</span><br><span class="line">  server:</span><br><span class="line">    image: gitea/gitea:latest</span><br><span class="line">    environment:</span><br><span class="line">      - USER_UID=1001     <span class="comment">#UID</span></span><br><span class="line">      - USER_GID=1001       <span class="comment">#GID</span></span><br><span class="line">    restart: always</span><br><span class="line">    networks:</span><br><span class="line">      - gitea</span><br><span class="line">    volumes:</span><br><span class="line">      - ./gitea:/data</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">"3000:3000"</span>        <span class="comment">#http 3000端口</span></span><br><span class="line">      - <span class="string">"10022:22"</span>         <span class="comment">#SSH 22端口</span></span><br><span class="line">    depends_on:</span><br><span class="line">      - db</span><br><span class="line">  db:</span><br><span class="line">    image: mysql:8.0</span><br><span class="line">    restart: always</span><br><span class="line">    environment:</span><br><span class="line">      - MYSQL_ROOT_PASSWORD=rootpassword    <span class="comment">#自定义修改</span></span><br><span class="line">      - MYSQL_USER=gitea</span><br><span class="line">      - MYSQL_PASSWORD=giteapassword    <span class="comment">#自定义修改</span></span><br><span class="line">      - MYSQL_DATABASE=gitea</span><br><span class="line">    networks:</span><br><span class="line">      - gitea</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql</span><br><span class="line">--------------------------------------------------</span><br><span class="line">docker-compose up -d  <span class="comment">#运行docker-compose.yml文件</span></span><br></pre></td></tr></table></figure><p>最后打开<a href="http://git.teaper.dev:3000" rel="external nofollow noopener noreferrer" target="_blank">http://git.teaper.dev:3000</a>即可，如果不行，则去阿里云防火墙配置一个3000端口  </p><table><thead><tr><th>应用类型</th><th>协议</th><th>端口范围</th></tr></thead><tbody><tr><td>自定义</td><td>TCP</td><td>3000</td></tr></tbody></table><p>再次进入<a href="git.teaper.dev:3000" rel="external nofollow noopener noreferrer" target="_blank">git.teaper.dev:3000</a>，单击注册按钮，进行配置，记得把所有域名改成<code>git.teaper.dev</code>，另外如果有没修改的也不用担心，我们可以直接修改<a href="https://docs.gitea.io/zh-cn/config-cheat-sheet/" rel="external nofollow noopener noreferrer" target="_blank">gitea配置</a>，顺便解决一下端口号的问题  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/<span class="built_in">local</span>/gitea/gitea/gitea/conf/app.ini   <span class="comment">#修改gitea配置</span></span><br><span class="line">--------------------------app.ini修改或新增----------------------------</span><br><span class="line">[server]</span><br><span class="line">ROOT_URL         = https://git.teaper.dev/    <span class="comment">#https路径（将3000端口号删除）</span></span><br><span class="line">DISABLE_SSH      = <span class="literal">true</span>                       <span class="comment">#禁用SSH</span></span><br><span class="line"> </span><br><span class="line">[service]</span><br><span class="line">REGISTER_EMAIL_CONFIRM            = <span class="literal">true</span>     <span class="comment">#启用注册邮件激活</span></span><br><span class="line">DISABLE_REGISTRATION            =<span class="literal">true</span>   <span class="comment">#禁用注册，启用后只能用管理员添加用户</span></span><br><span class="line">REQUIRE_SIGNIN_VIEW             =<span class="literal">true</span>   <span class="comment">#是否所有页面都必须登录后才可访问</span></span><br><span class="line"> </span><br><span class="line">[markup.asciidoc]</span><br><span class="line">ENABLED = <span class="literal">true</span>     <span class="comment">#是否启用markup，默认为false</span></span><br><span class="line">FILE_EXTENSIONS = .adoc,.asciidoc  <span class="comment">#关联的文档的扩展名，多个扩展名用都好分隔</span></span><br><span class="line">RENDER_COMMAND = <span class="string">"asciidoc --out-file=- -"</span>  <span class="comment">#工具的命令行命令及参数</span></span><br><span class="line">IS_INPUT_FILE = <span class="literal">false</span>  <span class="comment">#输入方式是最后一个参数为文件路径还是从标准输入读取</span></span><br><span class="line">---------------------------------------------------------------------</span><br></pre></td></tr></table></figure><p>登录 gitea 之后，我们可以新建一个仓库，试着 clone 一下，不出以外的话，HTTP 方式应该是成功的，再去添加下本机公钥，试试 SSH 方式 clone，SSH 的话需要输入密码，就算输入 root 密码都依然无法登录，其原因是我们用容器安装的 gitea，所有 SSH Key 在 gitea 目录中，并没有同步到主机的 .ssh 隐藏文件夹中，所以我们暂时在 app.ini 中禁用掉 SSH  </p><p>使用 Nginx 做反向代理  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install nginx       <span class="comment">#安装nginx</span></span><br></pre></td></tr></table></figure><p>使用 HTTPS 加密<br>去阿里云域名管理平台申请免费 SSL 证书，勾选自动添加解析记录，申请通过后将证书下载到本地，文件夹重命名为 cert，里面有两个文件 <code>.pem</code> 和 <code>.key</code>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">scp -r cert root@git.teaper.dev:/etc/nginx/cert   #上传证书</span><br><span class="line">vim /etc/nginx/nginx.conf   #配置nginx</span><br><span class="line">-----------------------------------------------</span><br><span class="line">events &#123;</span><br><span class="line">    #...省略其他配置</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    #...省略其他配置，主要配置以下部分</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  git.teaper.dev;</span><br><span class="line">        charset utf-8;</span><br><span class="line">        rewrite ^ https://git.teaper.dev;   #强制使用https</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;       #443端口</span><br><span class="line">        server_name  git.teaper.dev;        #域名</span><br><span class="line">        charset utf-8;</span><br><span class="line">        ssl on;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">        ssl_certificate         cert/214981108460483.pem;   #两个证书路径</span><br><span class="line">        ssl_certificate_key     cert/214981108460483.key;</span><br><span class="line">        ssl_session_timeout     10m;</span><br><span class="line">        ssl_session_cache       shared:SSL:10m;</span><br><span class="line">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        location /&#123;</span><br><span class="line">            proxy_pass  http://127.0.0.1:3000;  #需要被代理的端口</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header X-Forwarded-Proto https;</span><br><span class="line">        &#125;</span><br><span class="line">        location ~ .*\.(js|css|png)$ &#123;</span><br><span class="line">            proxy_pass  http://127.0.0.1:3000;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------------------</span><br><span class="line">nginx -s reload   #重启</span><br></pre></td></tr></table></figure><p>由于我们 nginx 配置中需要用到 443 端口,所以还需要去轻量服务器  -&gt; 防火墙添加 443 端口  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Ubuntu16.04 </tag>
            
            <tag> MySQL8.0 </tag>
            
            <tag> Gitea </tag>
            
            <tag> Nginx </tag>
            
            <tag> SSL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven+Spring+SpringMVC+MyBatis整合</title>
      <link href="/2019/05/19/maven-spring-springmvc-mybatis/"/>
      <url>/2019/05/19/maven-spring-springmvc-mybatis/</url>
      
        <content type="html"><![CDATA[<h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境:"></a>开发环境:</h4><p>系统：Arch Linux<br>JDK-1.8<br>Eclipse-4.10<br>Tomcat-9.0<br>浏览器：Chrome   </p><h4 id="技术"><a href="#技术" class="headerlink" title="技术:"></a>技术:</h4><p>项目管理：Maven-3.6.0<br>动态Web模块：Dynamic Web Module-4.0<br>基础框架：Spring+SpringMVC+MyBatis<br>数据库：10.1.37-MariaDB（ArchLinux下的MySQL）<br>前端框架：bootstrap-3.3.7+jquery-3.3.1.min.js<br>分页：pagehelper<br>逆向工程：MyBatis Generator   </p><h4 id="功能"><a href="#功能" class="headerlink" title="功能:"></a>功能:</h4><p>分页查询<br>数据校验(前端:jquery校验+后端:JSR303校验)<br>ajax请求<br>Rest风格的URI   </p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构:"></a>目录结构:</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Project Explorer视图下</span></span><br><span class="line">|ssm </span><br><span class="line">|---src/main/java</span><br><span class="line">||---cn.teaper.www   <span class="comment">//包路径</span></span><br><span class="line">||---controller      <span class="comment">//控制器</span></span><br><span class="line">||---dao         <span class="comment">//数据库dao</span></span><br><span class="line">||---pojo        <span class="comment">//实体类</span></span><br><span class="line">||---service     <span class="comment">//服务层</span></span><br><span class="line">||---test        <span class="comment">//测试类</span></span><br><span class="line">||---tools        <span class="comment">//工具类</span></span><br><span class="line">|---src/main/resources</span><br><span class="line">||---mapper      <span class="comment">//存放mapper文件</span></span><br><span class="line">||---applicationContext.xml      <span class="comment">//Spring核心配置文件</span></span><br><span class="line">||---database.properties     <span class="comment">//数据库连接信息</span></span><br><span class="line">||---mybatis-config.xml      <span class="comment">//</span></span><br><span class="line">||---spring-mvc.xml          <span class="comment">//</span></span><br><span class="line">|---src/test/java       <span class="comment">//手动创建(可选)</span></span><br><span class="line">|---src/test/resources      <span class="comment">//手动创建(可选)</span></span><br><span class="line">|---JRE System Library[JavaSE-<span class="number">1.8</span>]</span><br><span class="line">|---Maven Dependencies</span><br><span class="line">|---src</span><br><span class="line">|   |---main</span><br><span class="line">|       |---webapp</span><br><span class="line">|           |---META-INF</span><br><span class="line">|           |---<span class="keyword">static</span>  <span class="comment">//手动创建</span></span><br><span class="line">|               |---bootstrap-<span class="number">3.3</span>.7.dist    </span><br><span class="line">|           |---WEB-INF     <span class="comment">//重新生成</span></span><br><span class="line">|               |---lib</span><br><span class="line">|               |---views       <span class="comment">//手动创建，用于存放视图文件</span></span><br><span class="line">|           |---index.jsp   <span class="comment">//重新创建</span></span><br><span class="line">|---target</span><br><span class="line">|---mbg.xml</span><br><span class="line">|---pom.xml</span><br><span class="line">|---ssm.sql     <span class="comment">//数据库SQL文件</span></span><br><span class="line">|---doc         <span class="comment">//项目文档(gitbook)</span></span><br></pre></td></tr></table></figure><h3 id="项目环境搭建"><a href="#项目环境搭建" class="headerlink" title="项目环境搭建"></a>项目环境搭建</h3><h4 id="创建Maven工程"><a href="#创建Maven工程" class="headerlink" title="创建Maven工程:"></a>创建Maven工程:</h4><p>单击 File -&gt; New -&gt; Maven Projct   </p><p>勾选 <code>Use defaut Workspace location</code> 复选框,<code>Browse..</code>项目存放位置,单击 <code>Next</code><br>选则相应模板 <code>org.apache.maven.archetypes maven-archetype-webapp 1.0</code><br>单击 <code>Next</code>,输入基本信息:  </p><blockquote><p>Group Id：组名字（例如：cn.teaper）<br>Artifact Id：项目名称（例如：ssm）<br>Version：版本号,默认0.0.1-SNAPSHOT<br>Packing：项目包结构（例如：cn.teaper.www）  </p></blockquote><p>单击 <code>Finish</code> 完成  </p><p>把<code>src/main/webapp</code>下默认的文件和文件夹删除  </p><p>右击项目 -&gt; Properties -&gt; Project Facets 中修改 Java 版本为 1.8,取消勾选 <code>Dynamic Web Module(2.3)</code>，选择4.0，保存一下，再重新勾选，单击下方 <code>further configruation available</code>,输入<code>Content directory</code> 地址为 <code>src/main/webapp</code> ，勾选 <code>Generate~</code> 复选框，再保存一下;<br>web.xml内容为以下样式即可：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>ssm<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>default.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>选择 <code>Java Build Path</code> ，在 Source 窗口下置输出路径 output folder ，确保每个文件夹都输出在 <code>*/target/classes</code> 目录中;选择 <code>Deployment Assembly</code> , Remove 掉不需要的设置 <code>(src/test/*)</code><br><span style="color:#ff0000;">注意:如果<code>Project Facets</code>中无法修改版本信息，就在 <code>Navigator</code> 视图中编辑<code>org.eclipse.wst.common.project.facet.core.xml</code>文件，<code>Navigator</code> 视图在 windows &gt; show viwe 中找</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">faceted-project</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fixed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"java"</span> <span class="attr">version</span>=<span class="string">"1.8"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"jst.web"</span> <span class="attr">version</span>=<span class="string">"3.1"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">installed</span> <span class="attr">facet</span>=<span class="string">"wst.jsdt.web"</span> <span class="attr">version</span>=<span class="string">"1.0"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">faceted-project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果 src/main/java、src/test/java、src/test/resources 目录不存在；则在 Navigator 视图中手动创建上面三个文件夹( Navigator 视图在 windows -&gt; show view 中打开)<br>最终目录结构如上图所示  </p><h4 id="引入jar包"><a href="#引入jar包" class="headerlink" title="引入jar包:"></a>引入jar包:</h4><p>打开 pom.xml, 把<a href="https://mvnrepository.com/" rel="external nofollow noopener noreferrer" target="_blank">maven仓库</a>中的 dependency 信息粘贴到 pom.xml 的 dependencies 标签中，每个模块的 dependency 和它所包含的 jar 包如下  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line">SpringMVC模块:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">spring-webmvc-4.3.7.RELEASE.jar</span><br><span class="line">spring-aop-4.3.7.RELEASE.jar</span><br><span class="line">spring-beans-4.3.7.RELEASE.jar</span><br><span class="line">spring-context-4.3.7.RELEASE.jar</span><br><span class="line">spring-core-4.3.7.RELEASE.jar</span><br><span class="line">commons-logging-1.2.jar</span><br><span class="line">spring-expression-4.3.7.RELEASE.jar</span><br><span class="line">spring-web-4.3.7.RELEASE.jar</span><br><span class="line"></span><br><span class="line">Spring-jdbc模块:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">spring-jdbc-4.3.7.RELEASE.jar</span><br><span class="line">spring-beans-4.3.7.RELEASE.jar</span><br><span class="line">spring-core-4.3.7.RELEASE.jar</span><br><span class="line">commons-logging-1.2.jar</span><br><span class="line">spring-tx-4.3.7.RELEASE.jar</span><br><span class="line"></span><br><span class="line">Spring面向切面编程:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">spring-aspects-4.3.7.RELEASE.jar</span><br><span class="line">aspectjweaver-1.8.9.jar </span><br><span class="line"></span><br><span class="line">Spring单元测试模块:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">spring-test-4.3.7.RELEASE.jar</span><br><span class="line"></span><br><span class="line">mybatis模块:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis-3.4.2.jar</span><br><span class="line"></span><br><span class="line">mybatis逆向工程:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis-generator-core-1.3.5.jar</span><br><span class="line"></span><br><span class="line">引入pagehelper分页插件: </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">pagehelper-5.1.2.jar</span><br><span class="line">jsqlparser-1.0.jar </span><br><span class="line"></span><br><span class="line">controller返回JSON字符串的支持:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">jackson-databind-2.9.6.jar </span><br><span class="line">jackson-annotations-2.9.0.jar</span><br><span class="line">jackson-core-2.9.6.jar</span><br><span class="line"></span><br><span class="line">mybatis整合spring的适配包:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">mybatis-spring-1.3.1.jar</span><br><span class="line"></span><br><span class="line">数据库连接池mysql驱动:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">c3p0-0.9.1.2.jar</span><br><span class="line">mysql-connector-java-5.1.41.jar</span><br><span class="line"></span><br><span class="line">其他:</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">jstl-1.2.jar</span><br><span class="line">javax.servlet-api-3.1.0.jar</span><br><span class="line">juint4.12.jar </span><br><span class="line">jackson-databind-2.9.6.jar 返回JSON字符串的支持</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">hibernate-validator-5.2.4.Final.jar     JSR303后端校验</span><br><span class="line">validation-api-1.1.0.Final.jar      validation验证注解</span><br><span class="line">jboss-logging-3.2.1.Final.jar</span><br><span class="line">classmate-1.1.0.jar</span><br></pre></td></tr></table></figure><h4 id="引入Bootstrap前端框架"><a href="#引入Bootstrap前端框架" class="headerlink" title="引入Bootstrap前端框架"></a>引入Bootstrap前端框架</h4><p>下载用于生产环境的<a href="https://getbootstrap.com/docs/3.3/" rel="external nofollow noopener noreferrer" target="_blank">Bootstrap</a>,解压后得到bootstrap-3.3.7-dist文件夹，使用方法参考<a href="https://v3.bootcss.com/getting-started/#template" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a><br>在项目的webapp目录下新建static文件夹,将bootstrap-3.3.7-dist文件夹放置在它下面，在static文件夹下新建css、js、img文件夹，用于存放其他网页文件<br>下载<a href="http://jquery.com/" rel="external nofollow noopener noreferrer" target="_blank">jquery</a>,将其解压得到的jquery-3.3.1.min.js放置在static/js文件夹中<br>在webapp目录下新建index.jsp，在head标签中引入，注意jquery需要在最上面  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jquery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/js/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入bootstrop样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编写SSM整合的XML文件"><a href="#编写SSM整合的XML文件" class="headerlink" title="编写SSM整合的XML文件"></a>编写SSM整合的XML文件</h4><h5 id="编写web-xml"><a href="#编写web-xml" class="headerlink" title="编写web.xml"></a>编写web.xml</h5><p>让项目启动时就启动<strong>Spring容器</strong>，这时候就需要一个<code>contextConfigLocation</code>(使用快捷键<code>Alt+/</code>根据提示生成)，classpath指定配置文件路径  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- needed for ContextLoaderListener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Bootstraps the root web application context before servlet initialization --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候需要在src/main/resources创建出applicationContext.xml，如果我们没有模板  </p><blockquote><p>需要先查看Eclipse的版本号：Help -&gt;About Eclipse<br>再去Spring<a href="http://spring.io/tools/sts/all" rel="external nofollow noopener noreferrer" target="_blank">插件官网</a>复制与Eclipse版本相对应的Update Sites<br>网址<br>在Eclipse的Help -&gt; Install New Software..中Add的Work  with地址，名字随便，地址填写上面复制的Update Sites网址<br>勾选四个带/Spring IDE的复选框,finsh完成,静待安装完成,重启Eclipse  </p></blockquote><p>创建applicationContext.xml可以右击选择New -&gt; Other -&gt; Spring Bean Configuration File;创建完回到web.xml继续进行配置  </p><p>配置<strong>SpringMVC的前端控制器</strong>,用于拦截所有请求,classpath指定SpringMVC配置文件路径，由于我的spring-mvc.xml在src/main/resources下，所以需要指定，如果不想使用init-param标签指定配置文件路径，则需要在web.xml的同级别目录(例如：webapp)下创建一个和<code>org.springframework.web.servlet.DispatcherServlet</code>同名的<code>springDispatcherServlet-servlet.xml</code>；需要拦截所有请求,把url-pattern设置为<code>/</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The front controller of this Spring Web application, responsible for handling all application requests --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Map all requests to the DispatcherServlet for handling --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们也先在src/main/resources创建Spring Bean Configuration File文件spring-mvc.xml  </p><p>配完SpringMVC，那么顺便把它所带的<strong>字符编码过滤器</strong>也一并配置了，init-param在初始化响应的时候指定encoding类型为utf-8，默认是false，在Spring3.0版本只有一个forceEncoding，由于我们用的4.3版本，需要配置forceRequestEncoding和forceReponseEncoding；/*拦截所有请求  </p><blockquote><p><code>&lt;filter-class&gt;</code>路径可以通过<code>Ctrl+Shift+T</code>查找<code>CharacterEncodingFilter</code>获得相关类信息   </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceRequestEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceReponseEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;init-param&gt;</span></span><br><span class="line"><span class="comment">&lt;param-name&gt;forceEncoding&lt;/param-name&gt;</span></span><br><span class="line"><span class="comment">   &lt;param-value&gt;true&lt;/param-value&gt;</span></span><br><span class="line"><span class="comment">&lt;/init-param&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为我们要使用REST风格的URI,将页面普通的post请求转为指定的delete或者put请求，所以还需要一个过滤器<br><span style="color:red;">注意:当我们有多个过滤器的时候，字符编码过滤器一定要在所有过滤器之前</span></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 4、使用REST风格的URI，将页面普通的post请求转为指定的delete或者put请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- REST风格的PUT请求转换过滤器(可选) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写spring-mvc-xml"><a href="#编写spring-mvc-xml" class="headerlink" title="编写spring-mvc.xml"></a>编写spring-mvc.xml</h5><p>SpringMVC的配置文件主要负责网站的跳转逻辑配置<br>打开spring-mvc.xml，在下方的Namespace视图下，勾选beans、context、mvc组件，回到Source视图<br>我们需要扫描所有包，首先，在src/main/java下创建目录结构，结构如上图所示，包括dao、controller、pojo、service、test、tool等<br>由于她是SpringMVC组件，我们不需要它扫描所有包，只需要扫描控制器Controller，所以通过<code>&lt;context:include-filter/&gt;</code>指定，所有带@Controller注解的就会被标识为控制器，被扫描进去<br>使用<code>use-default-filters=&quot;false&quot;</code>禁用默认扫描规则(默认扫描全部，包括@Controller)  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.teaper.www"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置图解析器，方便页面返回，这里我们把所有JSP文件存放在/WEB-INF/views/文件夹下，这里需要手动创建文件夹views<br>prefix指定视图文件所在路径，路径结尾必须有<code>/</code><br>suffix指定视图文件是以.jsp为后缀的文件  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/views/"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解析器配置完还需要<strong>俩个标准</strong>配置<br><code>default-servlet-handler</code>将spring不能处理的请求交给tomcat；它会像一个检查员，对进入<code>springDispatcherServlet</code>的URI进行筛查，如果发现是静态资源的请求，就将该请求转由Web应用服务器默认的Servlet处理，如果不是静态资源的请求，才由DispatcherServlet继续处理<br><code>annotation-driven</code>能支持Springmvc更高级的一些功能,例如:JSR303校验，ajax的映射动态请求   </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写applicationContext-xml"><a href="#编写applicationContext-xml" class="headerlink" title="编写applicationContext.xml"></a>编写applicationContext.xml</h5><p>applicationContext.xml是Spring的核心配置文件，主要配置和业务逻辑有关系的，例如数据源，事务控制等<br>打开applicationContext.xml，在下方的Namespace视图下，勾选aop、beans、context、tx组件，回到Source视图<br>配置<strong>数据源</strong>，我们用的是c3p0，数据库连接信息来自于properties文件，所以我们需要在src/main/resources下创建database.properties，为了和其他配置信息区别开来，我们加上<code>jdbc.</code>前缀，结果如下  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=123</span><br></pre></td></tr></table></figure><p>数据库我们使用MySQL，那么我们需要在MySQL数据库中创建一个叫ssm的database数据库，再创建两张表emp(员工表)和dept(部门表)   </p><p><strong><center>dept(部门表)</center></strong>  </p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>非空？</th><th>主键？</th><th>自增？</th><th>注释</th></tr></thead><tbody><tr><td>dept_id</td><td>int</td><td>11</td><td>yes</td><td>yes</td><td>yes</td><td>部门编号</td></tr><tr><td>dept_name</td><td>varchar</td><td>255</td><td>yes</td><td></td><td></td><td>部门名称</td></tr></tbody></table><p><strong><center>emp(员工表)</center></strong>  </p><table><thead><tr><th>列名</th><th>数据类型</th><th>长度</th><th>非空？</th><th>主键？</th><th>自增？</th><th>注释</th></tr></thead><tbody><tr><td>emp_id</td><td>int</td><td>11</td><td>yes</td><td>yes</td><td>yes</td><td>员工编号</td></tr><tr><td>emp_name</td><td>varchar</td><td>255</td><td>yes</td><td></td><td></td><td>员工姓名</td></tr><tr><td>gender</td><td>char</td><td>1</td><td></td><td></td><td></td><td>性别M/F</td></tr><tr><td>email</td><td>varchar</td><td>255</td><td></td><td></td><td></td><td>邮箱</td></tr><tr><td>fk_dept_id</td><td>int</td><td>11</td><td></td><td></td><td></td><td>部门编号</td></tr></tbody></table><p>要使用properties中的信息，就需要使用context标签读取database.properties文件，使用bean配置数据源  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:database.properties"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"comboPooledDataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.user&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据源配置好了，那么我们所需要的<strong>业务逻辑组件</strong>pojo也需要被扫描进来，它和SpringMVC不同的是，SpringMVC只扫描控制器controller，它通过<code>&lt;context:exclude-filter/&gt;</code>扫描除controller之外的所有  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.teaper.www"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Controller"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置和Myatis的整合</strong>，配置一个sqlSessionFactory工厂，dataSource指定使用我们上面配置好的id为comboPooledDataSource的数据源；configLocation指定mybatis全局文件的位置；mapperLocations指定mybatis的mapper文件位置  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"comboPooledDataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:mapper/*.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们需要在src/main/resources下新建mybatis-config.xml，创建方式可以通过配置DTD文件获得文件模板  </p><blockquote><p>下载<a href="http://mybatis.org/dtd/mybatis-3-config.dtd" rel="external nofollow noopener noreferrer" target="_blank">mybatis-3-config.dtd</a>和<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd" rel="external nofollow noopener noreferrer" target="_blank">mybatis-3-mapper.dtd</a>文件<br>然后打开window -&gt; preferences下搜索xml catalog选项卡<br>点击Add按钮添加dtd文件路径，Key的话，分情况填<br>mybatis-3-config.dtd的Key:<code>-//mybatis.org//DTD Config 3.0//EN</code><br>mybatis-3-mapper.dtd的Key:<code>-//mybatis.org//DTD Mapper 3.0//EN</code>  </p></blockquote><p>其次需要在src/main/resources下新建一个mapper文件夹，用于存放所有的Mapper.xml  </p><p><strong>配置扫描器</strong>，将mybatis的dao接口实现加入到IOC容器中  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.mapper.MapperScannerConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"basePackage"</span> <span class="attr">value</span>=<span class="string">"cn.teaper.www.dao"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置<strong>事务管理器</strong>DataSourceTransactionManager,负责数据源中的开启关闭回滚操作  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSourceTransactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定被控制的数据源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"comboPooledDataSource"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>事务管理器配置好了,我们就可以开启基于注解的事务(常用)和使用XML配置形式的事务(重要)<br>aop:pointcut定义切入点表达式：<code>..</code>表示包下以及其子包都可以切入；<code>(..)</code>表示方法内参数任意多也行<br><code>&lt;aop:advisor&gt;</code>配置事务增强(事务如何切入);引用下方<code>&lt;tx:advice&gt;</code>的id；<code>&lt;pointcut-ref&gt;</code>引用上方<code>&lt;aop:pointcut&gt;</code>的id<br><code>&lt;tx:advice&gt;</code>中的<code>*</code>表示所有方法都是事务方法，<code>get*</code>表示以get开始的所有方法，get方法假设都为查询，使用<code>read-only=&quot;true&quot;</code>指定只读做些许优化，<code>transaction-manager</code>属性指定切入的事务管理器id<br>其中<code>&lt;aop:config/&gt;</code>定义切入点文件,<code>&lt;tx:advice/&gt;</code>对切入点文件中的方法进行增强,transaction-manager指定切入数据的来源  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.teaper.www.service..*(..))"</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"dataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="编写mybatis-config-xml"><a href="#编写mybatis-config-xml" class="headerlink" title="编写mybatis-config.xml"></a>编写mybatis-config.xml</h5><p>在全局configuration标签中配置一些冷门的MyBatis的设置<code>&lt;settings&gt;</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置驼峰命名风格,value="true"开启,这样我们使用MyBatis逆向工程工具的时候就可以生成以驼峰命名风格的bean和Mapper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置所有bean来源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.teaper.www.pojo"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="MyBatis逆向工程工具"><a href="#MyBatis逆向工程工具" class="headerlink" title="MyBatis逆向工程工具"></a>MyBatis逆向工程工具</h4><p>使用<a href="http://www.mybatis.org/generator/index.html" rel="external nofollow noopener noreferrer" target="_blank">mybatis-generator</a>逆向生成bean和Mapper,第一步pom.xml中引入jar包<code>mybatis-generator-core-1.3.5.jar</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写在项目根目录创建mbg.xml,模板<a href="http://www.mybatis.org/generator/configreference/xmlconfig.html" rel="external nofollow noopener noreferrer" target="_blank">参考</a>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE generatorConfiguration</span></span><br><span class="line"><span class="meta">  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"</span></span><br><span class="line"><span class="meta">  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">"DB2Tables"</span> <span class="attr">targetRuntime</span>=<span class="string">"MyBatis3"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 不生成注释 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span> =<span class="string">"suppressAllComments"</span> <span class="attr">value</span> =<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 配置数据库连接信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">"com.mysql.jdbc.Driver"</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">"jdbc:mysql://127.0.0.1:3306/ssm?useSSL=true"</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">"root"</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">"fvh2014"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaTypeResolver</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"forceBigDecimals"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定javabean生成的位置:targetProject=”.\src” 适用于windows;targetProject=”./src”适用于linux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"cn.teaper.pojo"</span> <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"trimStrings"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定SQl映射文件(mapper.xml)生成的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">"mapper"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/resources"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 指定dao接口生成的位置(mapper接口) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">"XMLMAPPER"</span> <span class="attr">targetPackage</span>=<span class="string">"cn.teaper.dao"</span>  <span class="attr">targetProject</span>=<span class="string">"./src/main/java"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"enableSubPackages"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- table指定每个表的生成策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"emp"</span> <span class="attr">domainObjectName</span>=<span class="string">"Emp"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">"dept"</span> <span class="attr">domainObjectName</span>=<span class="string">"Dept"</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在tools包下创建测试的Java代码MBG.java,内容<a href="http://www.mybatis.org/generator/running/runningWithJava.html" rel="external nofollow noopener noreferrer" target="_blank">参考</a>;运行成功后刷新项目,查看目录下是否自动生成了想要的bean和Mapper  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MBG</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">List&lt;String&gt; warnings = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">boolean</span> overwrite = <span class="keyword">true</span>;</span><br><span class="line">File configFile = <span class="keyword">new</span> File(<span class="string">"mbg.xml"</span>);</span><br><span class="line">ConfigurationParser cp = <span class="keyword">new</span> ConfigurationParser(warnings);</span><br><span class="line">Configuration config = cp.parseConfiguration(configFile);</span><br><span class="line">DefaultShellCallback callback = <span class="keyword">new</span> DefaultShellCallback(overwrite);</span><br><span class="line">MyBatisGenerator myBatisGenerator = <span class="keyword">new</span> MyBatisGenerator(config, callback, warnings);</span><br><span class="line">myBatisGenerator.generate(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：MyBatis逆向工程生成的Mapper还不能完全使用，缺少表连接查询，所以需要进一步修改；pojo中除了普通javabean，会有复杂的javaBeanExample.java文件，如果你不需要可以删除</span>  </p><h4 id="修改生成的pojo和Mapper信息"><a href="#修改生成的pojo和Mapper信息" class="headerlink" title="修改生成的pojo和Mapper信息"></a>修改生成的pojo和Mapper信息</h4><p>由于逆向工程生成的SQL缺少联合表的CRUD操作，所以需要在其基础上稍作添加  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//EmpMapper.java新增两个查询</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertSelectiveWithDept</span><span class="params">(Emp record)</span></span>;</span><br><span class="line"><span class="function">Emp <span class="title">selectByPrimaryKeyWithDept</span><span class="params">(Integer empId)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增dept对象，希望查询员工的时候顺便查询其部门信息</span></span><br><span class="line"><span class="keyword">private</span> Dept dept;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Dept <span class="title">getDept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dept;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDept</span><span class="params">(Dept dept)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dept = dept;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 查询员工带部门信息的resultMap --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"WithDeptResultMap"</span> <span class="attr">type</span>=<span class="string">"cn.teaper.www.pojo.Emp"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"emp_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"empId"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"emp_name"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"empName"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"gender"</span> <span class="attr">jdbcType</span>=<span class="string">"CHAR"</span> <span class="attr">property</span>=<span class="string">"gender"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"email"</span> <span class="attr">jdbcType</span>=<span class="string">"VARCHAR"</span> <span class="attr">property</span>=<span class="string">"email"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"fk_dept_id"</span> <span class="attr">jdbcType</span>=<span class="string">"INTEGER"</span> <span class="attr">property</span>=<span class="string">"fkDeptId"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- association指定联合查询部门字段的封装 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">javaType</span>=<span class="string">"cn.teaper.www.pojo.Dept"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"dept_id"</span> <span class="attr">property</span>=<span class="string">"deptId"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"deptName"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--查询员工带部门信息的SQL--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"WithDept_Column_List"</span>&gt;</span></span><br><span class="line">    e.emp_id, e.emp_name, e.gender, e.email, e.fk_dept_id , d.dept_id , d.dept_name</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 查询员工带部门信息的两个方法</span></span><br><span class="line"><span class="comment">  int insertSelectiveWithDept(Emp record);</span></span><br><span class="line"><span class="comment">  Emp selectByPrimaryKeyWithDept(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByExampleWithDept"</span> <span class="attr">parameterType</span>=<span class="string">"cn.teaper.www.pojo.EmpExample"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"distinct"</span>&gt;</span></span><br><span class="line">      distinct</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--指定上方查询的信息，SQL修改成左连接查询--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"WithDept_Column_List"</span> /&gt;</span></span><br><span class="line">    FROM emp e </span><br><span class="line">    LEFT JOIN dept d ON e.fk_dept_id=d.dept_id</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"orderByClause != null"</span>&gt;</span></span><br><span class="line">      order by $&#123;orderByClause&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKeyWithDept"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"WithDeptResultMap"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"WithDept_Column_List"</span> /&gt;</span></span><br><span class="line">    FROM emp e </span><br><span class="line">    LEFT JOIN dept d ON e.fk_dept_id=d.dept_id </span><br><span class="line">    where emp_id = #&#123;empId,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试Mapper接口"><a href="#测试Mapper接口" class="headerlink" title="测试Mapper接口"></a>测试Mapper接口</h4><p>在<code>cn.teaper.www.test</code>中创建一个测试类<code>mapperTest.java</code>测试Dao层的工作  </p><p>由于我们的是Spring项目，所以这里推荐使用Spring单元测试，可以自动注入我们需要的组件，使用Spring单元测步骤如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Dao层的工作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:applicationContext.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mapperTest</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">DeptMapper deptMapper;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试DeptMapper</span></span><br><span class="line"><span class="comment"> * Spring项目推荐使用Spring单元测试，可以自动注入我们需要的组件</span></span><br><span class="line"><span class="comment"> * 1、在pom.xml导入SpringTest的模块spring-test</span></span><br><span class="line"><span class="comment"> * 2、测试类上添加<span class="doctag">@ContextConfiguration</span>注解指定Spring配置文件的位置，帮我们创建出IOC容器；该注解有个属性locations指定配置文件</span></span><br><span class="line"><span class="comment"> * 3、测试类上添加Juint的<span class="doctag">@RunWith</span>注解指定使用哪个单元测试用例  </span></span><br><span class="line"><span class="comment"> * 4、直接使用<span class="doctag">@Autowired</span>要使用的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//1、创建SpringIOC容器</span></span><br><span class="line"><span class="comment">//ApplicationContext ioc = new ClassPathXmlApplicationContext("applicationContext.xml");</span></span><br><span class="line"><span class="comment">//2、从容器中获取Mapper</span></span><br><span class="line"><span class="comment">//DeptMapper bean = ioc.getBean(DeptMapper.class);</span></span><br><span class="line"></span><br><span class="line">System.out.println(deptMapper);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Juint Test运行mapperTest()方法没有报错，并且输出黑色的<strong>org.apache.ibatis.binding.MapperProxy@26adfd2d</strong>就说明正常，通过上面4步已经测试Dao层没有问题了，那么就可以插入一些数据来测试具体的CRUD方法  </p><p>测试插入部门功能insertSelective(Dept record)，需要入参一个dept对象，这里需要先去Dept.java添加两个构造方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为dept生成两个构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">(Integer deptId, String deptName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.deptId = deptId;</span><br><span class="line"><span class="keyword">this</span>.deptName = deptName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Dept</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在mapperTest.java的testDao()方法中追加两行命令，运行之后有添加进去就OK啦  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5、插入几个部门</span></span><br><span class="line">deptMapper.insertSelective(<span class="keyword">new</span> Dept(<span class="keyword">null</span>,<span class="string">"公关部"</span>));</span><br><span class="line">deptMapper.insertSelective(<span class="keyword">new</span> Dept(<span class="keyword">null</span>,<span class="string">"教职部"</span>));</span><br></pre></td></tr></table></figure><p>同理，插入员工也是添加构造方法，调用empMapper的insertSelective()方法；为了后面方便有数据分页，我们使用可以批量操作的SqlSession<strong>批量插入1000条数据</strong>  </p><p>首先在applicationContext.xml中配置一个可以执行批量操作的SqlSession，创建一个sqlSession的bean，引入之前配置好的sqlSessionFactory，MyBatis执行器类型<code>executorType</code>设置为<code>BATCH</code>  </p><blockquote><p>MyBatis执行器类型如下：<br>SIMPLE：这个类型不做特殊的事情，它只为每个语句创建一个PreparedStatement<br>REUSE：这种类型将重复使用PreparedStatements<br>BATCH：这个类型批量更新，且必要地区别开其中的select 语句，确保动作易于理解  </p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置一个可以执行批量操作的SqlSession --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"executorType"</span> <span class="attr">value</span>=<span class="string">"BATCH"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在testDao.java中@Autowired一个SqlSession对象，然后在之前的testDao()方法中追加以下内容<br>使用javaJDK提供的UUID.randomUUID().toString()方法自动生成主键，截取前5个字符拼接变量<code>i</code>,将其拼接到insertSelective()入参中  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7、使用可以执行批量操作的SQLSession批量插入多个员工</span></span><br><span class="line">EmpMapper empMapper = sqlSession.getMapper(EmpMapper.class);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">String uid = UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">5</span>)+i;</span><br><span class="line">empMapper.insertSelective(<span class="keyword">new</span> Emp(<span class="keyword">null</span>,uid,<span class="string">"M"</span>,uid+<span class="string">"@teaper.cn"</span>,<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分页插件PageHelper"><a href="#分页插件PageHelper" class="headerlink" title="分页插件PageHelper"></a>分页插件PageHelper</h4><p><a href="https://github.com/pagehelper/Mybatis-PageHelper" rel="external nofollow noopener noreferrer" target="_blank">PageHelper</a>是Mybatis通用分页插件，首先在pom.xml中引入相关最新jar包，它包含了<code>pagehelper-5.1.2.jar</code>和<code>jsqlparser-1.0.jar</code>包  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入pagehelper分页插件 </span></span><br><span class="line"><span class="comment">pagehelper-5.1.2.jar</span></span><br><span class="line"><span class="comment">jsqlparser-1.0.jar</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在<code>mybatis-config.xml</code>中配置拦截器插件  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    plugins在配置文件中的位置必须符合要求，否则会报错，顺序如下:</span></span><br><span class="line"><span class="comment">    properties?, settings?, </span></span><br><span class="line"><span class="comment">    typeAliases?, typeHandlers?, </span></span><br><span class="line"><span class="comment">    objectFactory?,objectWrapperFactory?, </span></span><br><span class="line"><span class="comment">    plugins?, </span></span><br><span class="line"><span class="comment">    environments?, databaseIdProvider?, mappers?</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后就可以在Controller.java中调用<code>PageHelper.startPage(int pageNum, int pageSize);</code>方法；将startPage后面紧跟的查询<code>empService.getAll();</code>定义为一个分页查询<br>分页查询的结果以及<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" rel="external nofollow noopener noreferrer" target="_blank">分页参数</a>，可以使用PageInfo对象接收，然后使用model将其返回到前端页面   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmps</span><span class="params">(@RequestParam(value=<span class="string">"pn"</span>,defaultValue=<span class="string">"1"</span>)</span>Integer pn,Model model) </span>&#123;</span><br><span class="line"><span class="comment">//这不是一个分页查询</span></span><br><span class="line"><span class="comment">//引入pageHelper分页插件</span></span><br><span class="line"><span class="comment">//在查询之前只需要调用PageHelper.startPage(int pageNum, int pageSize);方法</span></span><br><span class="line">PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//startPage后面紧跟的查询empService.getAll();就是一个分页查询</span></span><br><span class="line">List&lt;Emp&gt; emps = empService.getAll();</span><br><span class="line"><span class="comment">//因为PageInfo包含了非常全面的分页属性以及查询出来的数据，使用PageInfo包装查询结果后，就只需要讲PageInfo交给页面即可</span></span><br><span class="line"><span class="comment">//传入要连续显示的页数5</span></span><br><span class="line">PageInfo page = <span class="keyword">new</span> PageInfo(emps,<span class="number">5</span>);</span><br><span class="line">model.addAttribute(<span class="string">"pageInfo"</span>,page);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"list"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了保险期间，我们需要事先测试下数据，这里使用Spring的单元测试模块<strong>测试MVC</strong><br>在test包下新建一个<code>MvcTest.java</code>文件，基本配置和上面的<a href="#测试mapper接口">测试Mapper接口</a>过程是一样的，不过<code>@ContextConfiguration</code>中只有<code>applicationContext.xml</code>是不够的，还需要加入<code>spring-mvc.xml</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="line">@ContextConfiguration(locations=&#123;<span class="string">"classpath:applicationContext.xml"</span>,<span class="string">"classpath:spring-mvc.xml"</span>&#125;)</span><br></pre></td></tr></table></figure><p>然后在MvcTest中创建一个<code>MockMvc</code>对象来虚拟MVC请求，获取处理结果；使用<code>MockMvc</code>对象之前还需要使用<code>MockMvcBuilders.webAppContextSetup().build()</code>方法初始化它，并且传入SpringMVC的ioc容器<code>WebApplicationContext</code>，SpringMVC容器里边的东西我们可以<code>@Autowired</code>自动装配，但是IOC容器自己需要在Class上使用<code>@WebAppConfiguration</code>才能装配进去；<code>initMokcMvc()</code>初始化方法我们每次都要使用，所以使用Juint的<code>@Before</code>注解标记它</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@WebAppConfiguration</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(locations=&#123;<span class="string">"classpath:applicationContext.xml"</span>,<span class="string">"classpath:spring-mvc.xml"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MvcTest</span> </span>&#123;</span><br><span class="line"><span class="comment">//传入SpringMVC的IOC</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">WebApplicationContext context;</span><br><span class="line"><span class="comment">//虚拟MVC请求，获取处理结果</span></span><br><span class="line">MockMvc mockMvc;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initMokcMvc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mockMvc = MockMvcBuilders.webAppContextSetup(context).build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就可以在class中编写测试方法<code>testPage()</code>了  使用MockMvc的<code>.perform().andReturn()</code>方法拿到返回值，传入一个requestBuilder对象，这里我们可以使用<code>MockMvcRequestBuilders</code>模拟一个get/post请求(这里.get()是get请求)，<code>.param()</code>传入请求参数页面大小和页码，把该抛出异常抛出去<br>请求成功以后，请求域中会有PageInfo，我们可以取出PageInfo中的数据，使用<code>result.getRequest()</code>拿到请求对象</p><blockquote><p>这里安利一个快捷键<code>Ctrl+1 Enter</code>或者<code>Ctrl+2 L</code>可以自动可自动补全代码</p></blockquote><p>使用<code>equest.getAttribute()</code>获取PageInfo对象，打印PageInfo中的内容，查询数据在PageInfo的<code>.getList()</code>方法中可以获取到  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//模拟请求拿到返回值</span></span><br><span class="line">MvcResult result = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/emps"</span>).param(<span class="string">"pn"</span>, <span class="string">"2"</span>)).andReturn();</span><br><span class="line"><span class="comment">//请求成功以后，请求域中会有PageInfo，我们可以取出PageInfo进行验证</span></span><br><span class="line">MockHttpServletRequest request= result.getRequest();</span><br><span class="line">PageInfo pi = (PageInfo) request.getAttribute(<span class="string">"pageInfo"</span>);</span><br><span class="line">System.out.println(<span class="string">"当前页码"</span>+pi.getPageNum());</span><br><span class="line">System.out.println(<span class="string">"总页码"</span>+pi.getPages());</span><br><span class="line">System.out.println(<span class="string">"总记录数"</span>+pi.getTotal());</span><br><span class="line">System.out.println(<span class="string">"在页面需要连续显示的页码"</span>);</span><br><span class="line"><span class="keyword">int</span>[] nums = pi.getNavigatepageNums();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i : nums) &#123;</span><br><span class="line">System.out.println(<span class="string">""</span>+i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取员工数据</span></span><br><span class="line">List&lt;Emp&gt; list = pi.getList();</span><br><span class="line"><span class="keyword">for</span>(Emp emp : list) &#123;</span><br><span class="line">System.out.println(<span class="string">"ID:"</span>+emp.getEmpId()+<span class="string">"==&gt; NAME:"</span>+emp.getEmpName());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：如果运行后报<code>java.lang.NoClass.DefFoundError:javax/servlet/SessionCookieConfig</code>错误，<code>javax/servlet</code>下找不到<code>SessionCookieConfig</code>这个类，原因是Spring4测试的时候需要Servlet3.0的支持，我们在pom中引入<code>javax.servlet-api</code>3.0以上版本的jar包</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="页面数据展示"><a href="#页面数据展示" class="headerlink" title="页面数据展示"></a>页面数据展示</h4><p>项目运行后，首先访问<code>index.jsp</code>，然后<code>index.jsp</code>发送一个<code>/emps</code>请求给controller控制器  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:forward</span> <span class="attr">page</span>=<span class="string">"/emps"</span>&gt;</span><span class="tag">&lt;/<span class="name">jsp:forward</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller控制器处理<code>/emps</code>请求，查到数据，来到<code>list.jsp</code>页面展示，所以我们直接创建一个<code>list.jsp</code>页面<br>要使用Bootstrap需要引入相关样式和js，还有JQuery的js(Jquery.js必须在所有js之前)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"static/js/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入bootstrop样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"static/bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>安利一下路径问题：<br>不以<code>/</code>开始的相对路径，找资源，以当前资源的路径为基准<br>推荐使用以<code>/</code>开始的相对路径，找资源，以服务器的路径(<code>https://localhost:3306</code>)为基准，需要加上项目名，完整路径应该是(<code>https://localhost:3306/ssm/index.jsp</code>)  </p></blockquote><p>当然服务器的路径不是写死的，所以可以直接jsp使用小脚本方式获取服务器路径  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageContext.setAttribute</span>("<span class="attr">APP_PATH</span>",<span class="attr">request.getContextPath</span>());</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br></pre></td></tr></table></figure><p>然后使用<code>APP_PATH</code>替换文件路径中的服务器路径，<strong>替换结果</strong>如下：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;APP_PATH&#125;/static/js/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入bootstrop样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就可以借助bootstrap的<a href="https://getbootstrap.com/docs/3.3/css/" rel="external nofollow noopener noreferrer" target="_blank">CSS样式</a>和<a href="https://getbootstrap.com/docs/3.3/components/" rel="external nofollow noopener noreferrer" target="_blank">组件</a>编写list.jsp页面  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搭建页面信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring+SpringMVC+MyBatis框架整合<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工姓名(empName)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别(gender)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱(email)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>所在部门(deptName)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>卜衔之<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>F<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>www@teaper.cn<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>开发部<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-pencil"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页文字信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>当前记录数：×××<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页条信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"Page navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2kew01il2j30wf07vmyi.jpg" alt><br>前端页面写好了，我们需要把请求的数据解析出来，遍历在<code>&lt;tr&gt;</code>标签中，需要引入jstl和EL表达式  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@taglib</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> prefix=<span class="string">"c"</span>%&gt;</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：要使用jstl需要在pom.xml中引入相关jar文件</span>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么遍历部门信息在列表里，之前的  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>卜衔之<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>F<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>www@teaper.cn<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>开发部<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-pencil"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就要修改成  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;pageInfo.list &#125;"</span> <span class="attr">var</span>=<span class="string">"emp"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.empId &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.empName &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.gender=="M"?"女":"男" &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.email &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;emp.dept.deptName &#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-pencil"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>编辑</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>删除</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分页信息(来源pageInfo)修改为  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 分页文字信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span>总$&#123;pageInfo.pages&#125;页 当前第$&#123;pageInfo.pageNum&#125;页 总$&#123;pageInfo.total&#125;条数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>分页条连续显示的页码(pageInfo.navigatepageNums)修改为  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH &#125;/emps?pn=1"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;pageInfo.hasPreviousPage ==true&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH &#125;/emps?pn=$&#123;pageInfo.pageNum-1&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Previous"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;laquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:forEach</span> <span class="attr">items</span>=<span class="string">"$&#123;pageInfo.navigatepageNums &#125;"</span> <span class="attr">var</span>=<span class="string">"page_Num"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;page_Num == pageInfo.pageNum &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>$&#123;page_Num &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;page_Num != pageInfo.pageNum &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH &#125;/emps?pn=$&#123;page_Num&#125;"</span>&gt;</span>$&#123;page_Num &#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:forEach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c:if</span> <span class="attr">test</span>=<span class="string">"$&#123;pageInfo.hasNextPage ==true&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH &#125;/emps?pn=$&#123;pageInfo.pageNum+1&#125;"</span> <span class="attr">aria-label</span>=<span class="string">"Next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;raquo;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c:if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH &#125;/emps?pn=$&#123;pageInfo.pages&#125;"</span>&gt;</span>末页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>点击发送请求方式：${APP_PATH }/emps?pn=1<br>pn：页码<br>hasPreviousPage：是否有上一页<br>hasNextPage：是否有下一页<br>navigatepageNums：所有导航页号<br>pageNum：当前页</p></blockquote><h4 id="使用ajax返回json方式修改list-jsp"><a href="#使用ajax返回json方式修改list-jsp" class="headerlink" title="使用ajax返回json方式修改list.jsp"></a>使用ajax返回json方式修改list.jsp</h4><p>注释掉<code>Empcontroller.java</code>中的<code>@RequestMapping(&quot;/emps&quot;)</code>，我们重新写过一个返回JSON格式的请求  </p><blockquote><p><code>@ResponseBody</code>需要在<code>pom.xml</code>中导入<code>jackson-databind</code>架包  </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、以JSON方式显示查询结果</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo <span class="title">getEmpsWithJson</span><span class="params">(@RequestParam(value=<span class="string">"pn"</span>,defaultValue=<span class="string">"1"</span>)</span>Integer pn) </span>&#123;</span><br><span class="line">PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line">List&lt;Emp&gt; emps = empService.getAll();</span><br><span class="line">PageInfo page = <span class="keyword">new</span> PageInfo(emps,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询方式不变，只不过之前是使用一个<code>Model</code>对象返回查询结果，现在只需要加上<code>@ResponseBody</code>注解，就可以直接返回<code>JSON</code>格式的字符串<a href="http://jason.sourceforge.net/wp/" rel="external nofollow noopener noreferrer" target="_blank">jason</a><strong>(不清楚看下图)</strong>   </p><p>浏览器打开<a href="http://localhost:8080/ssm/emps?pn=1" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/ssm/emps?pn=1</a>后会显示一连串的JSON格式信息(推荐一个谷歌插件<a href="https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh/related" rel="external nofollow noopener noreferrer" target="_blank">JSON Viewer</a>可以格式化显示)<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g1g5it7e1qj31gv0qadib.jpg" alt>  </p><p>使用<code>getEmpsWithJson()</code>方法直接返回查询结果是OK的<br>但是我们Controller中不只有查询方法，还有update,insert,delete操作<br>所以，我们除了返回查询结果外还要返回失败或成功的提示消息<br>所以在<code>pojo</code>包下新建一个<code>Msg.java</code>，定义两个静态变量<code>code</code>和<code>msg</code>以及两个返回成功/失败方法<br>为了可以把PageInfo中的查询结果也绑定到Msg对象上，并且后面需要用ajax的date字段(&lt;k,v&gt;类型的),所以需要定义一个&lt;key,value&gt;类型的<code>add()</code>方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.teaper.www.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的update,insert,delete返回执行结果消息的类(执行成功还是失败)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line"><span class="comment">//状态码：1（成功） 0(失败)</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line"><span class="comment">//提示信息</span></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="comment">//用户要返回给浏览器的数据  </span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,Object&gt; extend = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.msg = msg;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">getEXtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> extend;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEXtend</span><span class="params">(Map&lt;String, Object&gt; extend)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.extend = extend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义两个成功||失败方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Msg <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Msg result = <span class="keyword">new</span> Msg();</span><br><span class="line">result.setCode(<span class="number">1</span>);</span><br><span class="line">result.setMsg(<span class="string">"处理成功！"</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Msg <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Msg result = <span class="keyword">new</span> Msg();</span><br><span class="line">result.setCode(<span class="number">0</span>);</span><br><span class="line">result.setMsg(<span class="string">"处理失败！"</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个可以快捷绑定pageInfo信息的方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">add</span><span class="params">(String Key,Object value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.getEXtend().put(Key, value);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>getEmpsWithJson()</code>方法，不返回<code>PageInfo</code>对象了，修改成<code>Msg</code>对象，return方式也从<code>return page;</code>改成<code>return Msg.success().add(&quot;pageInfo&quot;,page);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、以JSON方式显示查询结果，@ResponseBody需要在pom.xml中导入jackson-databind架包</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/emps"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">getEmpsWithJson</span><span class="params">(@RequestParam(value=<span class="string">"pn"</span>,defaultValue=<span class="string">"1"</span>)</span>Integer pn) </span>&#123;</span><br><span class="line">PageHelper.startPage(pn, <span class="number">5</span>);</span><br><span class="line">List&lt;Emp&gt; emps = empService.getAll();</span><br><span class="line">PageInfo page = <span class="keyword">new</span> PageInfo(emps,<span class="number">5</span>);</span><br><span class="line"><span class="keyword">return</span> Msg.success().add(<span class="string">"pageInfo"</span>,page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查看执行结果<a href="http://localhost:8080/ssm/emps?pn=5" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/ssm/emps?pn=5</a>如下：<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g1g6tepwdij31gu0qbtb9.jpg" alt><br>已经比之前的JSON多出了<code>code</code>、<code>msg</code>、<code>extend</code>信息  </p><h4 id="使用JavaScript的DOM对象处理JSON数据，返回到页面"><a href="#使用JavaScript的DOM对象处理JSON数据，返回到页面" class="headerlink" title="使用JavaScript的DOM对象处理JSON数据，返回到页面"></a>使用JavaScript的DOM对象处理JSON数据，返回到页面</h4><p>改造<code>index.jsp</code>，为了留下原来的数据，把原来的<code>index,jsp</code>重命名为<code>index-off.jsp</code><br>重新在<code>webapp</code>下创建一个<code>index.jsp</code>，把<code>list.jsp</code>的内容复制到<code>index.jsp</code>中  把原来以JSTL和EL表达式遍历的<code>${pageInfo.list}</code>下的所有数据删除，包括表格数据遍历个分页条显示  </p><!--然后在`</body>`上引入一个js文件`index.js`  --><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@taglib</span> <span class="attr">uri</span>=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> <span class="attr">prefix</span>=<span class="string">"c"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>员工列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%</span></span></span><br><span class="line"><span class="tag"><span class="attr">pageContext.setAttribute</span>("<span class="attr">APP_PATH</span>",<span class="attr">request.getContextPath</span>());</span></span><br><span class="line"><span class="tag">%&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入jQuery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;APP_PATH&#125;/static/js/jquery-3.3.1.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入bootstrop样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;APP_PATH&#125;/static/bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搭建页面信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标题 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Spring+SpringMVC+MyBatis框架整合<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-sm"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 表格数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-12"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 为了jquery获取对象，这里需要一个id:emps_tables --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table table-hover"</span> <span class="attr">id</span>=<span class="string">"emps_tables"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>#<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>员工姓名(empName)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>性别(gender)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>邮箱(email)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>所在部门(deptName)<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页文字信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span> <span class="attr">id</span>=<span class="string">"page_info_area"</span>&gt;</span>总页 当前第页 总条数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 分页条信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span> <span class="attr">id</span>=<span class="string">"page_nav_area"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来在<code>index.jsp</code>的<code>&lt;/body&gt;</code>标签上编写js代码，需要用到Ajax来做异步调用，不会Ajax参照<a href="http://jquery.cuishifeng.cn/jQuery.Ajax.html" rel="external nofollow noopener noreferrer" target="_blank">jQuery API 中文文档</a>    </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="comment">//1、页面加载完成以后，直接发送Ajax请求，获取分页数据</span></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$.ajax(&#123;</span></span><br><span class="line"><span class="javascript">url: <span class="string">"$&#123;APP_PATH&#125;/emps"</span>,</span></span><br><span class="line"><span class="javascript">data: <span class="string">"pn=1"</span>,</span></span><br><span class="line"><span class="javascript">type: <span class="string">"GET"</span>,</span></span><br><span class="line"><span class="javascript">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(result);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新<a href="http://localhost:8080/ssm/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/ssm/</a>页面，在谷歌检索中查看<code>Network</code>面板中的请求信息<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g1g8ptifd0j31hc0fumzh.jpg" alt><br>可以看到有一条<code>emps?pn=1</code>的请求，单击之后可以看到请求信息，接下来<strong>解析请求信息</strong>并显示到对应标签下<br>本页面有分页信息和表格信息，所以创建三个方法  </p><blockquote><p>build_emps_table() 解析显示员工数据<br>build_page_info() 解析显示分页信息<br>build_page_nav() 解析显示分页条  </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、页面加载完成以后，直接发送Ajax请求，获取分页数据</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"$&#123;APP_PATH&#125;/emps"</span>,</span><br><span class="line">data: <span class="string">"pn=1"</span>,</span><br><span class="line">type: <span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line"><span class="comment">//1、解析显示员工数据 build_emps_table()</span></span><br><span class="line">build_emps_table(result);</span><br><span class="line"><span class="comment">//2、解析显示分页信息 build_page_info()</span></span><br><span class="line">build_page_info(result);</span><br><span class="line"><span class="comment">//3、解析显示分页条 build_page_nav()</span></span><br><span class="line">build_page_nav(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们先<strong>解析员工信息</strong><br>获取<code>result.extend.pageInfo.list</code>下的员工信息赋值给<code>emps</code>对象<br>使用JQuery提供的遍历方法遍历信息<code>emps</code>对象，每次遍历都要绑定一个function事件<br>function中定义每条数据的变量，然后用<code>&lt;td&gt;&lt;/td&gt;</code>去接收<br>创建按钮标签，一层一层<code>append</code>进去，最后交由<code>&lt;tr&gt;&lt;/tr&gt;</code>标签封装好<br><code>appendTo</code>定义好的<code>id</code>为<code>emps_tables</code>的<code>&lt;table&gt;&lt;/table&gt;</code>标签中，然后显示到页面  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_emps_table</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> emps = result.extend.pageInfo.list;<span class="comment">//所有员工数据</span></span><br><span class="line">$.each(emps,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(item.empName);</span></span><br><span class="line"><span class="keyword">var</span> empIdTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.empId);</span><br><span class="line"><span class="keyword">var</span> empNameTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.empName);</span><br><span class="line"><span class="keyword">var</span> genderTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.gender==<span class="string">'M'</span>?<span class="string">"女"</span>:<span class="string">"男"</span>);</span><br><span class="line"><span class="keyword">var</span> emailTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.email);</span><br><span class="line"><span class="keyword">var</span> deptNameTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(item.dept.deptName);</span><br><span class="line"><span class="comment">//编辑和删除按钮</span></span><br><span class="line"><span class="comment">/* &lt;button type="button" class="btn btn-primary btn-sm"&gt;</span></span><br><span class="line"><span class="comment">&lt;span class="glyphicon glyphicon-pencil" aria-hidden="true"&gt;&lt;/span&gt;编辑</span></span><br><span class="line"><span class="comment">&lt;/button&gt; </span></span><br><span class="line"><span class="comment">&lt;button type="button" class="btn btn-danger btn-sm"&gt;</span></span><br><span class="line"><span class="comment">&lt;span class="glyphicon glyphicon-trash" aria-hidden="true"&gt;&lt;/span&gt;删除</span></span><br><span class="line"><span class="comment">&lt;/button&gt; */</span></span><br><span class="line"><span class="keyword">var</span> editBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-primary btn-sm"</span>)</span><br><span class="line">.append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-pencil"</span>)).append(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="keyword">var</span> delBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-danger btn-sm"</span>)</span><br><span class="line">.append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-trash"</span>)).append(<span class="string">"删除"</span>);</span><br><span class="line"><span class="keyword">var</span> btnTd = $(<span class="string">"&lt;td&gt;&lt;/td&gt;"</span>).append(editBtn).append(<span class="string">" "</span>).append(delBtn);</span><br><span class="line"><span class="comment">//append方法执行完成以后还会返回原来的元素，所以可以一直.append()下去</span></span><br><span class="line">$(<span class="string">"&lt;tr&gt;&lt;/tr&gt;"</span>).append(empIdTd)</span><br><span class="line">.append(empNameTd)</span><br><span class="line">.append(genderTd)</span><br><span class="line">.append(emailTd)</span><br><span class="line">.append(deptNameTd)</span><br><span class="line">.append(btnTd)</span><br><span class="line">.appendTo(<span class="string">"#emps_tables tbody"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来<strong>解析显示分页信息</strong><br>分页数据在<code>result.extend.pageInfo</code>下，我们只在在<code>id</code>为<code>page_info_area</code>的标签下<code>append</code>就行了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function build_page_info(result)&#123;</span><br><span class="line">$(&quot;#page_info_area&quot;).append(&quot;总&quot;+result.extend.pageInfo.pages+&quot;页 当前第&quot;+result.extend.pageInfo.pageNum+&quot;页 总&quot;+result.extend.pageInfo.total+&quot;条数据&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建<strong>导航条信息</strong><br>根据原来的导航条静态HTML构建</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_page_nav</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">/* &lt;nav aria-label="Page navigation"&gt;</span></span><br><span class="line"><span class="comment">  &lt;ul class="pagination"&gt;</span></span><br><span class="line"><span class="comment">  &lt;li&gt;&lt;a href="#"&gt;首页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;</span></span><br><span class="line"><span class="comment">      &lt;a href="#" aria-label="Previous"&gt;</span></span><br><span class="line"><span class="comment">        &lt;span aria-hidden="true"&gt;&amp;laquo;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">      &lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;1&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;2&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;3&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;4&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;5&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;</span></span><br><span class="line"><span class="comment">      &lt;a href="#" aria-label="Next"&gt;</span></span><br><span class="line"><span class="comment">        &lt;span aria-hidden="true"&gt;&amp;raquo;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">      &lt;/a&gt;</span></span><br><span class="line"><span class="comment">    &lt;/li&gt;</span></span><br><span class="line"><span class="comment">    &lt;li&gt;&lt;a href="#"&gt;末页&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="comment">  &lt;/ul&gt;</span></span><br><span class="line"><span class="comment">&lt;/nav&gt; */</span></span><br><span class="line"><span class="keyword">var</span> ul = $(<span class="string">"&lt;ul&gt;&lt;/ul&gt;"</span>).addClass(<span class="string">"pagination"</span>);</span><br><span class="line"><span class="keyword">var</span> firstPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"首页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="keyword">var</span> prePageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;laquo;"</span>)).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;raquo;"</span>)).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="keyword">var</span> lastPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"末页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">ul.append(firstPageLi).append(prePageLi);</span><br><span class="line"><span class="comment">//页码12345,遍历给UL添加页码提示</span></span><br><span class="line">$.each(result.extend.pageInfo.navigatepageNums,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(item).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line">ul.append(numLi);</span><br><span class="line">&#125;);</span><br><span class="line">ul.append(nextPageLi).append(lastPageLi);</span><br><span class="line"><span class="keyword">var</span> navEle = $(<span class="string">"&lt;nav&gt;&lt;/nav&gt;"</span>).append(ul).appendTo(<span class="string">"#page_nav_area"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构建好还需要完善一下，例如没有上一页数据，首页和上一页按钮不可点，当前页面添加class属性<code>active</code>等，完善后如下：  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析显示分页条</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_page_nav</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ul = $(<span class="string">"&lt;ul&gt;&lt;/ul&gt;"</span>).addClass(<span class="string">"pagination"</span>);</span><br><span class="line"><span class="keyword">var</span> firstPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"首页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="keyword">var</span> prePageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;laquo;"</span>)).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//如果没有上一页数据，首页和上一页按钮设置不可点属性disabled</span></span><br><span class="line"><span class="keyword">if</span>(result.extend.pageInfo.hasPreviousPage == <span class="literal">false</span>)&#123;</span><br><span class="line">firstPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">prePageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> nextPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).append(<span class="string">"&amp;raquo;"</span>)).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="keyword">var</span> lastPageLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(<span class="string">"末页"</span>).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//如果没有下一页数据，末页和下一页按钮设置不可点属性disabled</span></span><br><span class="line"><span class="keyword">if</span>(result.extend.pageInfo.hasNextPage == <span class="literal">false</span>)&#123;</span><br><span class="line">nextPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">lastPageLi.addClass(<span class="string">"disabled"</span>);</span><br><span class="line">&#125;</span><br><span class="line">ul.append(firstPageLi).append(prePageLi);</span><br><span class="line"><span class="comment">//页码12345,遍历给UL添加页码提示</span></span><br><span class="line">$.each(result.extend.pageInfo.navigatepageNums,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(item).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//如果当前页是活动页，设置标签属性为active</span></span><br><span class="line"><span class="keyword">if</span>(result.extend.pageInfo.pageNum == item)&#123;</span><br><span class="line">numLi.addClass(<span class="string">"active"</span>);</span><br><span class="line">&#125;</span><br><span class="line">ul.append(numLi);</span><br><span class="line">&#125;);</span><br><span class="line">ul.append(nextPageLi).append(lastPageLi);</span><br><span class="line"><span class="keyword">var</span> navEle = $(<span class="string">"&lt;nav&gt;&lt;/nav&gt;"</span>).append(ul).appendTo(<span class="string">"#page_nav_area"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了每次进行ajax请求，我们把原来的ajax部分抽取成to_page(pageNum)方法，指定默认加载第一页数据  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、页面加载完成以后，直接发送Ajax请求，获取分页数据</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//去首页</span></span><br><span class="line">to_page(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">to_page</span>(<span class="params">pn</span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url: <span class="string">"$&#123;APP_PATH&#125;/emps"</span>,</span><br><span class="line">data: <span class="string">"pn="</span>+pn,</span><br><span class="line">type: <span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line"><span class="comment">//1、解析显示员工数据 build_emps_table()</span></span><br><span class="line">build_emps_table(result);</span><br><span class="line"><span class="comment">//2、解析显示分页信息 build_page_info()</span></span><br><span class="line">build_page_info(result);</span><br><span class="line"><span class="comment">//3、解析显示分页条 build_page_nav()</span></span><br><span class="line">build_page_nav(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导航条绑定单击事件，调用<code>to_page()</code>方法，传入参数<code>pageNum</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.each(result.extend.pageInfo.navigatepageNums,<span class="function"><span class="keyword">function</span>(<span class="params">index,item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> numLi = $(<span class="string">"&lt;li&gt;&lt;/li&gt;"</span>).append($(<span class="string">"&lt;a&gt;&lt;/a&gt;"</span>).append(item).attr(<span class="string">"href"</span>,<span class="string">"#"</span>));</span><br><span class="line"><span class="comment">//如果当前页是活动页，设置标签属性为active</span></span><br><span class="line"><span class="keyword">if</span>(result.extend.pageInfo.pageNum == item)&#123;</span><br><span class="line">numLi.addClass(<span class="string">"active"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//绑定单击事件，调用to_page()方法</span></span><br><span class="line">numLi.click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">to_page(item);</span><br><span class="line">&#125;);</span><br><span class="line">ul.append(numLi);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>并且在每个标签<code>append()</code>数据前清空原来的数据，这里我就直接写相关代码了    </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次加载前清空表格数据</span></span><br><span class="line">$(<span class="string">"#emps_tables tbody"</span>).empty();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次加载前清空分页信息</span></span><br><span class="line">$(<span class="string">"#page_info_area"</span>).empty();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每次加载前清空分页条</span></span><br><span class="line">$(<span class="string">"#page_nav_area"</span>).empty();</span><br></pre></td></tr></table></figure><p>导航条单击时间搞定了，那么首页、上一页、下一页、末页也绑定单击事件  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//如果没有上一页数据，首页和上一页按钮设置不可点属性disabled</span><br><span class="line">if(result.extend.pageInfo.hasPreviousPage == false)&#123;</span><br><span class="line">firstPageLi.addClass(&quot;disabled&quot;);</span><br><span class="line">prePageLi.addClass(&quot;disabled&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">firstPageLi.click(function()&#123;</span><br><span class="line">to_page(1);</span><br><span class="line">&#125;);</span><br><span class="line">prePageLi.click(function()&#123;</span><br><span class="line">to_page(result.extend.pageInfo.pageNum-1);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//如果没有下一页数据，末页和下一页按钮设置不可点属性disabled</span><br><span class="line">if(result.extend.pageInfo.hasNextPage == false)&#123;</span><br><span class="line">nextPageLi.addClass(&quot;disabled&quot;);</span><br><span class="line">lastPageLi.addClass(&quot;disabled&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">lastPageLi.click(function()&#123;</span><br><span class="line">to_page(result.extend.pageInfo.pages);</span><br><span class="line">&#125;);</span><br><span class="line">nextPageLi.click(function()&#123;</span><br><span class="line">to_page(result.extend.pageInfo.pageNum+1);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了正确性，分页插件提供了一个<a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md" rel="external nofollow noopener noreferrer" target="_blank"><strong>分页合理化参数</strong></a>  </p><blockquote><p><code>reasonable</code>：分页合理化参数，默认值为<code>false</code><br>当该参数设置为 <code>true</code> 时，<code>pageNum&lt;=0</code> 时会查询第一页<br><code>pageNum&gt;pages</code>（超过总数时），会查询最后一页<br>默认<code>false</code> 时，直接根据参数进行查询  </p></blockquote><p>只需要在<code>mybatis-config.xml</code>中的分页插件部分添加一个<code>&lt;property&gt;</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- com.github.pagehelper为PageHelper类所在包名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.github.pagehelper.PageInterceptor"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页参数合理化 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"reasonable"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="新增功能"><a href="#新增功能" class="headerlink" title="新增功能"></a>新增功能</h4><p>在<code>index.jsp</code>中添加<a href="https://getbootstrap.com/docs/3.3/javascript/#modals-usage" rel="external nofollow noopener noreferrer" target="_blank">模态框代码</a>，指定模态框<code>id</code>为<code>empAddModal</code>，通过js绑定添加按钮单击事件来激活  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增按钮模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"empAddModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为新增按钮添加id属性<code>emp_add_modal_btn</code>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span> <span class="attr">id</span>=<span class="string">"emp_add_modal_btn"</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用js绑定单击事件  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增按钮单击事件</span></span><br><span class="line">$(<span class="string">"#emp_add_modal_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">'#empAddModal'</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>修改模态框成我们想要的样子，<code>modal-title</code>修改为<code>员工添加</code>，<code>modal-body</code>中的省略号修改成bootstrap的表单，指定表单每个元素的<code>id</code>和<code>name</code>属性(name属性和javBean保持一致)，<code>placeholder</code>设置默认显示内容，<code>checked=&quot;checked&quot;</code>默认选中一个单选按钮  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 新增按钮模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"empAddModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>员工添加<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>用户名(empName)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"empName_add_input"</span> <span class="attr">placeholder</span>=<span class="string">"empName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>邮箱(email)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email_add_input"</span> <span class="attr">placeholder</span>=<span class="string">"email@teaper.cn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>性别(gender)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"gender1_add_input"</span> <span class="attr">value</span>=<span class="string">"F"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"gender2_add_input"</span> <span class="attr">value</span>=<span class="string">"M"</span>&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>部门名称(deptName)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"fkDeptId"</span> <span class="attr">id</span>=<span class="string">"dept_add_select"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;option value="fkDeptId"&gt;&lt;/option&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g1jj196pdej30we0cnabj.jpg" alt="新增模态框"><br>加载模态框之前，我们需要发送<code>ajax</code>请求<strong>获取部门信息</strong>的<code>json</code><br>抽取<code>ajax</code>请求为<code>getDepts()</code>方法，在弹出模态框之前调用请求  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增按钮单击事件</span></span><br><span class="line">$(<span class="string">"#emp_add_modal_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//发送ajax请求，查出部门信息，显示在下拉列表中</span></span><br><span class="line">getDepts();</span><br><span class="line"><span class="comment">//弹出模态框</span></span><br><span class="line">$(<span class="string">'#empAddModal'</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查出所有部门信息并显示在下拉列表中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDepts</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/depts"</span>,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>DeptController.java</code>，自动装配<code>DeptService</code>对象，调用它的<code>getDepts()</code>方法，封装到<code>Msg</code>中返回给页面  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理部门有关的请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> teaper</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DeptService deptService;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回所有的部门信息</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/depts"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">getDepts</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//查出的所有部门信息</span></span><br><span class="line">List&lt;Dept&gt; list = deptService.getDepts();</span><br><span class="line"><span class="keyword">return</span> Msg.success().add(<span class="string">"depts"</span>,list);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写<code>DeptService.java</code>需要装配<code>DeptMapper</code>，调用它的<code>selectByExample()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DeptMapper deptMapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Dept&gt; <span class="title">getDepts</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List&lt;Dept&gt; list = deptMapper.selectByExample(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByExample"</span> <span class="attr">parameterType</span>=<span class="string">"cn.teaper.www.pojo.DeptExample"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"distinct"</span>&gt;</span></span><br><span class="line">      distinct</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    from dept</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"orderByClause != null"</span>&gt;</span></span><br><span class="line">      order by $&#123;orderByClause&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行之后可以看到请求信息<br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g1jl0b26i3j31hc0kw0uc.jpg" alt="获取部门信息"><br>获取到数据之后我们就可以把数据绑定到下拉列表中<br><code>$(&quot;#dept_add_select&quot;).empty();</code>清空下拉列表中原来的信息<br>遍历<code>depts</code>中的信息到循环输出的<code>&lt;option&gt;&lt;/option&gt;</code>标签中<br>为了后面添加数据，需要绑定每个下拉选项的<code>value</code>属性为部门编号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查出所有部门信息并显示在下拉列表中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDepts</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/depts"</span>,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line">$(<span class="string">"#dept_add_select"</span>).empty();</span><br><span class="line"><span class="comment">//显示部门信息在下拉列表中</span></span><br><span class="line">$.each(result.extend.depts,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#dept_add_select"</span>).append($(<span class="string">"&lt;option&gt;&lt;/option&gt;"</span>).append(<span class="keyword">this</span>.deptName).attr(<span class="string">"value"</span>,<span class="keyword">this</span>.deptId))</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们就可以开发<strong>保存功能</strong><br>首先给保存按钮绑定单击事件，发送ajax的POST请求，这里我们约定一下Rest风格URI请求类型  </p><blockquote><p>URI:<br>/emp/{id}    GET查询员工<br>/emp      POST保存员工<br>/emp/{id}    PUT修改员工<br>/emp/{id}    DELETE删除员工  </p></blockquote><p><span style="color:#ff0000;">查询的时候发<strong>get</strong>请求，新增数据发<strong>post</strong>请求，修改的时候发<strong>put</strong>请求，删除发<strong>delete</strong>请求</span><br>FORM表单<code>$(&quot;#empAddModal form&quot;)</code>的<code>serialize()</code>方法可以获取表单中需要提交的数据  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#emp_save_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//单击模态框中的保存按钮，讲数据提交给服务器</span></span><br><span class="line"><span class="comment">//发送ajax请求保存员工</span></span><br><span class="line"><span class="comment">//alert($("#empAddModal form").serialize());</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:$(<span class="string">"#empAddModal form"</span>).serialize(),</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">alert(result.msg);</span><br><span class="line"><span class="comment">//1、关闭模态框</span></span><br><span class="line">$(<span class="string">"#empAddModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"><span class="comment">//2、来到末页，显示刚才添加的数据</span></span><br><span class="line"><span class="comment">//发送ajax请求显示最后一页的数据即可</span></span><br><span class="line">to_page(totalRecord);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>保存成功之后需要关闭模态框，跳转到最后一页，所以需要发送请求查询最后一页数据，由于不知道最后一页数据是第几页，所以我们定义一个全局变量<code>totalRecord</code>去接收，再每次解析分页数据的时候给它赋值，由于我们不知道具体的页数，所以取最大(即多少条数据就多少页)，因为之前我们配置过<strong>分页参数合理化</strong>，当<code>pageNum</code>大于页数的时候查询最后一页  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> totalRecord;<span class="comment">//总记录数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析显示分页信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_page_info</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//每次加载前清空分页信息</span></span><br><span class="line">$(<span class="string">"#page_info_area"</span>).empty();</span><br><span class="line"></span><br><span class="line">$(<span class="string">"#page_info_area"</span>).append(<span class="string">"总"</span>+result.extend.pageInfo.pages+<span class="string">"页 当前第"</span>+result.extend.pageInfo.pageNum+<span class="string">"页 总"</span>+result.extend.pageInfo.total+<span class="string">"条数据"</span>)</span><br><span class="line">totalRecord = result.extend.pageInfo.total;<span class="comment">//保存总记录数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求发送到<code>EmpController.java</code>，指定请求类型为<code>method = RequestMethod.POST</code><br>为了知道执行结果成功与否，我们也封装成<code>Msg</code>进行返回  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//员工保存</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/emp"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">saveEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">empService.saveEmp(emp);</span><br><span class="line"><span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EmpService.java</code>调取<code>empMapper</code>中的<code>insertSelective()</code>方法  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存员工对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">empMapper.insertSelective(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>insertSelective()</code>方法我们之前<a href="#测试mapper接口">测试Mapper接口</a>的时候测试过了，并且批量插入了1000条数据  </p><p>员工添加基本完成，但是还为了安全性，还需要<strong>进行校验</strong>，例如：已添加的员工不允许再添加，名字格式，邮箱格式等问题  </p><p><strong>前端校验</strong><br>在向数据库提交请求之前，对要提交给服务器的表单数据格式进行校验，创建<code>validate_add_form()</code>方法，返回true/false，校验失败<code>return false;</code>退出方法，不执行后面的ajax数据提交  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、对要提交给服务器的表单数据格式进行校验</span></span><br><span class="line"><span class="keyword">if</span>(!validate_add_form())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>定义<code>validate_add_form()</code>方法<br>通过id属性拿到校验数据，定义正则表达式<code>/(^[a-zA-Z0-9_-]{6,16}$)|(^[\u2E80-\u9FFF]{2,5})/</code>，调用正则表达式的test()方法，判断是否满足格式要求<br>如果校验失败，给个提示信息，放回<code>false</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表单数据校验方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validate_add_form</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//1、拿到校验数据，使用正则表达式校验</span></span><br><span class="line"><span class="keyword">var</span> empName = $(<span class="string">"#empName_add_input"</span>).val();</span><br><span class="line"><span class="keyword">var</span> regName = <span class="regexp">/(^[a-zA-Z0-9_-]&#123;6,16&#125;$)|(^[\u2E80-\u9FFF]&#123;2,5&#125;)/</span>;</span><br><span class="line"><span class="comment">//alert(regName.test(empName));</span></span><br><span class="line"><span class="keyword">if</span>(!regName.test(empName))&#123;</span><br><span class="line"><span class="comment">//alert("用户名可以是2~5位中文或者6~16位英文和数字的组合");</span></span><br><span class="line">show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"error"</span>,<span class="string">"用户名可以是2~5位中文或者6~16位英文和数字的组合"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"success"</span>,<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//校验邮箱信息</span></span><br><span class="line"><span class="keyword">var</span> empEmail = $(<span class="string">"#email_add_input"</span>).val();</span><br><span class="line"><span class="keyword">var</span> regEmail = <span class="regexp">/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regEmail.test(empEmail))&#123;</span><br><span class="line"><span class="comment">//alert("邮箱格式不正确");</span></span><br><span class="line">show_validate_msg(<span class="string">"#email_add_input"</span>,<span class="string">"error"</span>,<span class="string">"邮箱格式不正确"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">show_validate_msg(<span class="string">"#email_add_input"</span>,<span class="string">"success"</span>,<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>show_validate_msg()</code>方法对提示信息进行按需选择<br>修改输入框的边框颜色，需要在输入框的父元素中添加class属性，所以修改前需要先清楚一下样式<br>根据前面<code>validate_add_form()</code>方法传递的参数，设置父元素的颜色属性，还有输入框的下一个标签<code>&lt;span&gt;&lt;/span&gt;</code>标签中的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示校验结果的提示信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show_validate_msg</span>(<span class="params">ele,status,msg</span>)</span>&#123;</span><br><span class="line"><span class="comment">//清楚当前元素的校验状态</span></span><br><span class="line">$(ele).parent().removeClass(<span class="string">"has-success has-error"</span>)</span><br><span class="line">$(ele).next(<span class="string">"span"</span>).text(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"success"</span> == status)&#123;</span><br><span class="line">$(ele).parent().addClass(<span class="string">"has-success"</span>);</span><br><span class="line">$(ele).next(<span class="string">"span"</span>).text(msg);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"error"</span> == status)&#123;</span><br><span class="line">$(ele).parent().addClass(<span class="string">"has-error"</span>);</span><br><span class="line">$(ele).next(<span class="string">"span"</span>).text(msg);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>后端校验</strong><br>在输入<code>empName</code>之后，发送一个ajax请求查询数据是否存在，不存在的话添加，存在的话不允许添加<br>在前端校验后面紧跟后端校验判断，判断保存按钮<code>#emp_save_btn</code>的<code>ajax-va</code>属性值是否为<code>error</code>，是的话就返回<code>false</code>退出保存</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3、对用户名是否可用进行校验</span></span><br><span class="line"><span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">"ajax-va"</span>)==<span class="string">"error"</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么在什么时候给保存按钮添加属性呢？在我们输入完<code>empName</code>之后，输入框的<code>change()</code>事件(文本内容改变之后运行)绑定一个方法，发送ajax查询用户是否存在，不存在就给保存按钮的<code>ajax-va</code>属性绑定<code>error</code>  </p><p>获取输入框中的值，发送ajax信息，传入参数值<code>empName</code>，根据最后的Msg返回结果判断用户名是否可用，可用给保存按钮自定义属性<code>ajax-va</code>赋值<code>success</code>，否则赋值<code>error</code>，并且调用提示信息方法<code>show_validate_msg()</code>输出提示信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//校验用户名是否可用</span></span><br><span class="line">$(<span class="string">"#empName_add_input"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> empName = <span class="keyword">this</span>.value;</span><br><span class="line"><span class="comment">//发送ajax请求校验用户名是否存在</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/checkuser"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:<span class="string">"empName="</span>+empName,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result.code == <span class="number">1</span>)&#123;</span><br><span class="line">show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"success"</span>,<span class="string">"用户名可用"</span>);</span><br><span class="line">$(<span class="string">"#emp_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"success"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"error"</span>,result.extend.va_msg);</span><br><span class="line">$(<span class="string">"#emp_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>编写<code>EmpController</code>，查询用户名是否可用，指定请求方式<code>method</code>为<code>post</code>请求(和ajax中保持一致)<br>返回Msg对象，使用<code>@RequestParam()</code>传入参数，定义一个和js中一致的正则表达式<code>regx</code>  </p><blockquote><p>注意：java中的正则表达式没有<code>/正则表达式/</code>中的<code>/</code>  </p></blockquote><p>使用<code>matches()</code>方法判断用户名的格式，格式错误我们就不查询用户名了，直接调用Msg的请求失败方法，返回失败信息<br>调用<code>empService</code>的<code>checkUser()</code>方法，查询用户是否存在，根据boolean类型返回值，给Msg对象绑定结果  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检查用户名是否可用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> empName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/checkuser"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">checkUser</span><span class="params">(@RequestParam(<span class="string">"empName"</span>)</span>String empName) </span>&#123;</span><br><span class="line"><span class="comment">//先判断用户名是否是合法表达式</span></span><br><span class="line">String regx = <span class="string">"(^[a-zA-Z0-9_-]&#123;6,16&#125;$)|(^[\\u2E80-\\u9FFF]&#123;2,5&#125;)"</span>;</span><br><span class="line"><span class="keyword">if</span>(!empName.matches(regx)) &#123;</span><br><span class="line"><span class="keyword">return</span> Msg.fail().add(<span class="string">"va_msg"</span>, <span class="string">"用户名可以是2~5位中文或者6~16位英文和数字的组合"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//数据库用户名重复校验</span></span><br><span class="line"><span class="keyword">boolean</span> b = empService.checkUser(empName);</span><br><span class="line"><span class="keyword">if</span>(b) &#123;</span><br><span class="line"><span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> Msg.fail().add(<span class="string">"va_msg"</span>, <span class="string">"用户名已存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>empService.checkUser()</code>方法中，可以使用<code>empMapper</code>的<code>countByExample()</code>方法查询用户存不存在，但是它的入参是<code>EmpExample</code>类型，所以还需要new一个<code>EmpExample</code>类型的对象<code>example</code><br>使用<code>example</code>对象的<code>createCriteria()</code>方法给<code>example</code>对象添加查询条件，使用<code>andEmpNameEqualTo()</code>绑定用户名，然后将<code>example</code>传入方法中，最后返回一个long类型的对象，直接返回它是否等于0的布尔值(0表示零条数据，其他数字表示已存在)  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检验用户名是否可用</span></span><br><span class="line"><span class="comment"> * @param empName</span></span><br><span class="line"><span class="comment"> * @return true:代表当前姓名可用，否则不可用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">public boolean checkUser(<span class="built_in">String</span> empName) &#123;</span><br><span class="line">EmpExample example = <span class="keyword">new</span> EmpExample();</span><br><span class="line">Criteria createCriteria = example.createCriteria();</span><br><span class="line">createCriteria.andEmpNameEqualTo(empName);</span><br><span class="line">long count = empMapper.countByExample(example);</span><br><span class="line"><span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"countByExample"</span> <span class="attr">parameterType</span>=<span class="string">"cn.teaper.www.pojo.EmpExample"</span> <span class="attr">resultType</span>=<span class="string">"java.lang.Long"</span>&gt;</span></span><br><span class="line">    select count(*) from emp</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"_parameter != null"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Example_Where_Clause"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>表单验证完成了，但是还有一些小问题，例如我们第一次点击新增输入模态框中的内容，在第二次打开模态框之后还在，当我们点击保存之后，他就不会再次发送ajax请求去验证数据，所以我们在每次点击新增按钮的时候清除一下表单数据<code>reset_form(&quot;#empAddModal form&quot;);</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新增按钮单击事件</span></span><br><span class="line">$(<span class="string">"#emp_add_modal_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空表单样式及内容</span></span><br><span class="line">reset_form(<span class="string">"#empAddModal form"</span>);</span><br><span class="line"><span class="comment">//发送ajax请求，查出部门信息，显示在下拉列表中</span></span><br><span class="line">getDepts();</span><br><span class="line"><span class="comment">//弹出模态框</span></span><br><span class="line">$(<span class="string">"#empAddModal"</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>因为jquery没有reset()方法，而该方法是javascript的DOM对象的，所以加<code>[0]</code>取出<code>#empAddModal form</code>的DOM对象，进行重置，并且还要清除表单中所有标签的<code>has-success has-error</code>类样式清除，还有所有class为<code>help-block</code>的标签内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空表单样式及内容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reset_form</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line">$(ele)[<span class="number">0</span>].reset();</span><br><span class="line"><span class="comment">//清空表单样式</span></span><br><span class="line">$(ele).find(<span class="string">"*"</span>).removeClass(<span class="string">"has-success has-error"</span>);</span><br><span class="line">$(ele).find(<span class="string">".help-block"</span>).text(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端<code>jquery</code>校验完成了，<code>ajax</code>用户名重复校验也完成了，但是，还记得保存按钮<code>#emp_save_btn</code>的<code>ajax-va</code>属性吗？这个好像没有改，如果第一次失败，被设置成<code>error</code>，下次添加就无法保存数据，所以我们还需要进行<strong>JSR303后端校验</strong>  </p><p>第一步：<code>pom.xml</code>中导入<code>hibernate-validator</code>组件包  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSR303后端校验</span></span><br><span class="line"><span class="comment">hibernate-validator-5.2.4.Final.jar</span></span><br><span class="line"><span class="comment">validation-api-1.1.0.Final.jar</span></span><br><span class="line"><span class="comment">jboss-logging-3.2.1.Final.jar</span></span><br><span class="line"><span class="comment">classmate-1.1.0.jar</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.4.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二步：给<code>Emp.java</code>的bean属性添加验证注解  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Pattern</span>(regexp=<span class="string">"(^[a-zA-Z0-9_-]&#123;6,16&#125;$)|(^[\\u2E80-\\u9FFF]&#123;2,5&#125;)"</span>,message=<span class="string">"用户名可以是2~5位中文或者6~16位英文和数字的组合"</span>)</span><br><span class="line"><span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Email或@Pattern</span></span><br><span class="line"><span class="meta">@Pattern</span>(regexp=<span class="string">"^([a-z0-9_\\.-]+)@([\\da-z\\.-]+)\\.([a-z\\.]&#123;2,6&#125;)$"</span>,message=<span class="string">"邮箱格式不正确"</span>)</span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><p>第三步：在保存员工方法中，给参数加<code>@Valid</code>注解，并且会有一个返回值<code>BindingResult</code>类型的<code>result</code>，调用<code>result.hasErrors()</code>方法判断是否匹配正则表达式，匹配就保存，不匹配的话还需要返回错误信息到前端，需要创建一个Map对象，将遍历的错误信息封装成Msg对象返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工保存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * 1、支持JSR303校验</span></span><br><span class="line"><span class="comment"> * 2、导入Hibernate-Validator</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/emp"</span>,method = RequestMethod.POST)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">saveEmp</span><span class="params">(@Valid Emp emp,BindingResult result)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(result.hasErrors()) &#123;</span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//校验失败</span></span><br><span class="line">List&lt;FieldError&gt; errors = result.getFieldErrors();</span><br><span class="line"><span class="keyword">for</span> (FieldError fieldError : errors) &#123;</span><br><span class="line"><span class="comment">//System.out.println("错误的字段名"+fieldError.getField());</span></span><br><span class="line"><span class="comment">//System.out.println("错误信息"+fieldError.getDefaultMessage());</span></span><br><span class="line">map.put(fieldError.getField(), fieldError.getDefaultMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Msg.fail().add(<span class="string">"errorField"</span>, map);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">empService.saveEmp(emp);</span><br><span class="line"><span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第四步：前端保存数据，先把<code>jquery</code>格式校验注释掉，保存员工的时候做判断，<code>result.extend.errorField</code>中的<code>email</code>和<code>empName</code>有没有数据，有数据说明有错误，需要设置提示框样式；没数据正常进行保存操作  </p><p><span style="color:#ff0000;">成功之后记得把注释的内容解开</span></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//保存员工</span></span><br><span class="line">$(<span class="string">"#emp_save_btn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//1、单击模态框中的保存按钮，将数据提交给服务器</span></span><br><span class="line"><span class="comment">//2、对要提交给服务器的表单数据格式进行校验</span></span><br><span class="line"><span class="comment">/* if(!validate_add_form())&#123;</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;; */</span></span><br><span class="line"><span class="comment">//3、对用户名是否可用进行校验</span></span><br><span class="line"><span class="keyword">if</span>($(<span class="keyword">this</span>).attr(<span class="string">"ajax-va"</span>)==<span class="string">"error"</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//4、校验成功发送ajax请求保存员工</span></span><br><span class="line"><span class="comment">//alert($("#empAddModal form").serialize());</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp"</span>,</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:$(<span class="string">"#empAddModal form"</span>).serialize(),</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(result.msg);</span></span><br><span class="line"><span class="keyword">if</span>(result.code == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//员工保存成功</span></span><br><span class="line"><span class="comment">//1、关闭模态框</span></span><br><span class="line">$(<span class="string">"#empAddModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"><span class="comment">//2、来到末页，显示刚才添加的数据</span></span><br><span class="line"><span class="comment">//发送ajax请求显示最后一页的数据即可</span></span><br><span class="line">to_page(totalRecord);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//校验失败，显示失败信息</span></span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">undefined</span> != result.extend.errorField.email)&#123;</span><br><span class="line"><span class="comment">//显示邮箱错误信息</span></span><br><span class="line">show_validate_msg(<span class="string">"#email_add_input"</span>,<span class="string">"error"</span>,result.extend.errorField.email);</span><br><span class="line">$(<span class="string">"#emp_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">undefined</span> != result.extend.errorField.empName)&#123;</span><br><span class="line"><span class="comment">//显示员工名字错误信息</span></span><br><span class="line">show_validate_msg(<span class="string">"#empName_add_input"</span>,<span class="string">"error"</span>,result.extend.errorField.empName);</span><br><span class="line">$(<span class="string">"#emp_save_btn"</span>).attr(<span class="string">"ajax-va"</span>,<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h4><p>创建模态框（和新增模态框一样），修改一些标签的<code>id</code>属性名字  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编辑按钮模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"empUpdateModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span>员工修改<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-horizontal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>用户名(empName)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"empName"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"empName_update_input"</span> <span class="attr">placeholder</span>=<span class="string">"empName"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>邮箱(email)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"email_update_input"</span> <span class="attr">placeholder</span>=<span class="string">"email@teaper.cn"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>性别(gender)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-10"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"gender1_update_input"</span> <span class="attr">value</span>=<span class="string">"F"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> 男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"gender"</span> <span class="attr">id</span>=<span class="string">"gender2_update_input"</span> <span class="attr">value</span>=<span class="string">"M"</span>&gt;</span> 女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"col-sm-2 control-label"</span>&gt;</span>部门名称(deptName)<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-4"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">name</span>=<span class="string">"fkDeptId"</span> <span class="attr">id</span>=<span class="string">"dept_add_select"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;option value="fkDeptId"&gt;&lt;/option&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"emp_update_btn"</span>&gt;</span>更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在解析员工数据的时候，就给每个按钮添加一个<code>class</code>，编辑按钮叫<code>edit_btn</code>，删除按钮叫<code>del_btn</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> editbtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-primary btn-sm edit_btn"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-pencil"</span>)).append(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="keyword">var</span> delBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-danger btn-sm del_btn"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-trash"</span>)).append(<span class="string">"删除"</span>);</span><br></pre></td></tr></table></figure><p>给<strong>编辑按钮绑定单击事件</strong>，可以在解析员工数据的时候绑定，不过太耦合，所以只能在创建按钮之后绑定单击事件<br>这里jquery提供了两个方法，<code>live()</code>适用于<code>jquery 1.7</code>以下版本，我们用的是<code>jquery-3.3.1.min.js</code>，可以使用<code>on()</code>方法  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="string">"编辑"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>确认可以弹出对话框后，发送<code>ajax</code>查询部门列表并显示在下拉列表中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑按钮单击事件</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert("编辑");</span></span><br><span class="line"><span class="comment">//1、查出员工信息，显示员工信息</span></span><br><span class="line"><span class="comment">//2、查出部门信息，并显示部门列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送ajax请求，查出部门信息，显示在下拉列表中</span></span><br><span class="line">getDepts(<span class="string">"#empUpdateModal select"</span>);</span><br><span class="line"><span class="comment">//弹出模态框</span></span><br><span class="line">$(<span class="string">"#empUpdateModal"</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>由于之前的查询部门信息的<code>getDepts()</code>方法不是带参数的，而是写死在添加按钮的，这里我们改成传入按钮id参数的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查出所有部门信息并显示在下拉列表中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDepts</span>(<span class="params">ele</span>)</span>&#123;</span><br><span class="line"><span class="comment">//清空之前下拉列表的值</span></span><br><span class="line">$(ele).empty();</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/depts"</span>,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line">$(<span class="string">"#dept_add_select"</span>).empty();</span><br><span class="line"><span class="comment">//显示部门信息在下拉列表中</span></span><br><span class="line">$.each(result.extend.depts,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> optionEle = $(<span class="string">"&lt;option&gt;&lt;/option&gt;"</span>).append(<span class="keyword">this</span>.deptName).attr(<span class="string">"value"</span>,<span class="keyword">this</span>.deptId);</span><br><span class="line">optionEle.appendTo(ele);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的添加用户按钮弹出模态框也要修改修改，这里我就不再累赘了  </p><p>弹出模态框后，调用<code>getEmp()</code>方法，<strong>查询并且显示员工</strong>在模态框中  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑按钮单击事件</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert("编辑");</span></span><br><span class="line"><span class="comment">//1、查出部门信息，并显示部门列表</span></span><br><span class="line">getDepts(<span class="string">"#empUpdateModal select"</span>);</span><br><span class="line"><span class="comment">//2、查出员工信息，显示员工信息</span></span><br><span class="line">getEmp($(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>))</span><br><span class="line"><span class="comment">//弹出模态框</span></span><br><span class="line">$(<span class="string">"#empUpdateModal"</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要一个员工ID作为参数，由于不知道员工ID，所以，我们在创建编辑和删除按钮的时候就给按钮自定义一个<code>edit-id</code>属性绑定id  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> editBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-primary btn-sm edit_btn"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-pencil"</span>)).append(<span class="string">"编辑"</span>);</span><br><span class="line"><span class="comment">//为编辑按钮添加自定义的属性，来表示当前员工的id</span></span><br><span class="line">editBtn.attr(<span class="string">"edit-id"</span>,item.empId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> delBtn = $(<span class="string">"&lt;button&gt;&lt;/button&gt;"</span>).addClass(<span class="string">"btn btn-danger btn-sm del_btn"</span>).append($(<span class="string">"&lt;span&gt;&lt;/span&gt;"</span>).addClass(<span class="string">"glyphicon glyphicon-trash"</span>)).append(<span class="string">"删除"</span>);</span><br><span class="line"><span class="comment">//为删除按钮添加自定义的属性，来表示当前员工的id</span></span><br><span class="line">delBtn.attr(<span class="string">"del-id"</span>,item.empId);</span><br></pre></td></tr></table></figure><p>发送ajax的GET请求查询员工信息<br><code>input[name=gender]</code>表示所有<code>name</code>属性为<code>gender</code>的输入框，<code>val()</code>方法会自动匹配数组元素  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查出员工信息，显示员工信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEmp</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp/"</span>+id,</span><br><span class="line">type:<span class="string">"GET"</span>,</span><br><span class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//console.log(result);</span></span><br><span class="line"><span class="keyword">var</span> empData = result.extend.emp;</span><br><span class="line">$(<span class="string">"#empName_update_static"</span>).text(empData.empName);</span><br><span class="line">$(<span class="string">"#email_update_input"</span>).val(empData.email);</span><br><span class="line">$(<span class="string">"#empUpdateModal input[name=gender]"</span>).val([empData.gender]);</span><br><span class="line">$(<span class="string">"#empUpdateModal select"</span>).val([empData.fkDeptId]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EmpController.java</code>使用<code>@PathVariable()</code>传入<code>GET</code>请求中的<code>id</code>  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照员工ID查询员工</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/emp/&#123;id&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">getEmp</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span>Integer id) </span>&#123;</span><br><span class="line">Emp emp = empService.getEmp(id);</span><br><span class="line"><span class="keyword">return</span> Msg.success().add(<span class="string">"emp"</span>,emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按照员工ID查询员工</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Emp <span class="title">getEmp</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">Emp emp = empMapper.selectByPrimaryKey(id);</span><br><span class="line"><span class="keyword">return</span> emp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByPrimaryKey"</span> <span class="attr">parameterType</span>=<span class="string">"java.lang.Integer"</span> <span class="attr">resultMap</span>=<span class="string">"BaseResultMap"</span>&gt;</span></span><br><span class="line">    select </span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"Base_Column_List"</span> /&gt;</span></span><br><span class="line">    from emp</span><br><span class="line">    where emp_id = #&#123;empId,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此，查询和显示完成了，接下来就是点击更新按钮<strong>修改员工信息</strong><br>用户名不让修改，所以我们只需要校验邮箱格式，使用之前的表单数据校验方法里的代码即可，然后改下id名字为<code>#email_update_input</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//点击更新按钮更新员工信息</span></span><br><span class="line">$(<span class="string">"#emp_update_btn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">//验证邮箱是否合法</span></span><br><span class="line"><span class="comment">//1、校验邮箱信息</span></span><br><span class="line"><span class="keyword">var</span> empEmail = $(<span class="string">"#email_update_input"</span>).val();</span><br><span class="line"><span class="keyword">var</span> regEmail = <span class="regexp">/^([a-z0-9_\.-]+)@([\da-z\.-]+)\.([a-z\.]&#123;2,6&#125;)$/</span>;</span><br><span class="line"><span class="keyword">if</span>(!regEmail.test(empEmail))&#123;</span><br><span class="line"><span class="comment">//alert("邮箱格式不正确");</span></span><br><span class="line">show_validate_msg(<span class="string">"#email_update_input"</span>,<span class="string">"error"</span>,<span class="string">"邮箱格式不正确"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">show_validate_msg(<span class="string">"#email_update_input"</span>,<span class="string">"success"</span>,<span class="string">""</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2、发送ajax请求保存员工数据</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp/"</span>+$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>),</span><br><span class="line"><span class="comment">//type:"POST",</span></span><br><span class="line"><span class="comment">//data:$("#empUpdateModal form").serialize()+"&amp;_method=PUT",</span></span><br><span class="line">type:<span class="string">"PUT"</span>,</span><br><span class="line">data:$(<span class="string">"#empUpdateModal form"</span>).serialize(),</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(result.msg);</span></span><br><span class="line"><span class="comment">//1、关闭对话框</span></span><br><span class="line">$(<span class="string">"#empUpdateModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"><span class="comment">//2、回到本页面</span></span><br><span class="line">to_page(currentPage);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发送ajax请求，更新数据，需要发送一个员工id，这里我们可以在弹出模态框之前，给更新按钮绑定一个自定义属性<code>edit-id</code>,这样ajax请求的URL就可以使用<code>$(this).attr(&quot;edit-id&quot;)</code>把值提交  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编辑按钮单击事件</span></span><br><span class="line">$(<span class="built_in">document</span>).on(<span class="string">"click"</span>,<span class="string">".edit_btn"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//3、把员工id传递给模态框更新按钮</span></span><br><span class="line">$(<span class="string">"#emp_update_btn"</span>).attr(<span class="string">"edit-id"</span>,$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、弹出模态框</span></span><br><span class="line">$(<span class="string">"#empUpdateModal"</span>).modal(&#123;</span><br><span class="line">backdrop:<span class="string">"static"</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>按照Rest风格的URI，后端<code>EmpController.java</code>中就需要发送PUT请求<br><span style="color:#ff0000;">注意：这里的<code>RequestMapping</code>参数不能简单写id，而是要和<code>EmpMapper.xml</code>中的SQL保持一致，写<code>empId</code>，否则SQL会拼接错误</span></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新员工信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/emp/&#123;empId&#125;"</span>,method = RequestMethod.PUT)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Msg <span class="title">saveEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">empService.updateEmp(emp);</span><br><span class="line"><span class="keyword">return</span> Msg.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>EmpService.java</code>实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工更新</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> emp</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateEmp</span><span class="params">(Emp emp)</span> </span>&#123;</span><br><span class="line">empMapper.updateByPrimaryKeySelective(emp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如此一来，前端ajax请求发送方式就有两种方案<br><strong>方案一：</strong> 前端发POST请求，请求数据拼接<code>&amp;_method=PUT</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、发送ajax请求保存员工数据</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp/"</span>+$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>),</span><br><span class="line">type:<span class="string">"POST"</span>,</span><br><span class="line">data:$(<span class="string">"#empUpdateModal form"</span>).serialize()+<span class="string">"&amp;_method=PUT"</span>,</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">alert(result.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>方案二(推荐)：</strong> 前端发送PUT请求，表单数据体无法封装成Map，tomcat引发血案  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2、发送ajax请求保存员工数据</span></span><br><span class="line">$.ajax(&#123;</span><br><span class="line">url:<span class="string">"$&#123;APP_PATH&#125;/emp/"</span>+$(<span class="keyword">this</span>).attr(<span class="string">"edit-id"</span>),</span><br><span class="line">type:<span class="string">"PUT"</span>,</span><br><span class="line">data:$(<span class="string">"#empUpdateModal form"</span>).serialize(),</span><br><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">alert(result.msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>需要在web.xml配置上HttpPutFormContentFilter过滤器  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- REST风格的PUT请求转换过滤器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>HttpPutFormContentFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>HttpPutFormContentFilter</code>会将请求体中的数据解析包装成一个Map，request会被重新包装，request.getParameter()方法会被重写，最后就会从自己封装的Map中取数据，而不是使用Tomcat只能封装的POST请求数据  </p><p>接下来就是<strong>关闭模态框和刷新结果</strong>，刷新结果直接调用<code>to_page()</code>方法，不过需要传一个当前页码<code>currentPage</code>  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">success:<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"><span class="comment">//alert(result.msg);</span></span><br><span class="line"><span class="comment">//1、关闭对话框</span></span><br><span class="line">$(<span class="string">"#empUpdateModal"</span>).modal(<span class="string">"hide"</span>);</span><br><span class="line"><span class="comment">//2、回到本页面</span></span><br><span class="line">to_page(currentPage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前页码和总记录数一样，直接定义成全局变量，在解析分页信息的时候赋值即可  </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> totalRecord,currentPage; <span class="comment">//总记录数,当前页数</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解析显示分页信息</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">build_page_info</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//每次加载前清空分页信息</span></span><br><span class="line">$(<span class="string">"#page_info_area"</span>).empty();</span><br><span class="line">$(<span class="string">"#page_info_area"</span>).append(<span class="string">"总"</span>+result.extend.pageInfo.pages+<span class="string">"页 当前第"</span>+result.extend.pageInfo.pageNum+<span class="string">"页 总"</span>+result.extend.pageInfo.total+<span class="string">"条数据"</span>)</span><br><span class="line"></span><br><span class="line">totalRecord = result.extend.pageInfo.total;<span class="comment">//保存总记录数</span></span><br><span class="line">currentPage = result.extend.pageInfo.pageNum;   <span class="comment">//保存当前页码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="迁移至MySQL8-0-数据库"><a href="#迁移至MySQL8-0-数据库" class="headerlink" title="迁移至MySQL8.0+数据库"></a>迁移至MySQL8.0+数据库</h3><p>需要在<code>pom.xml</code>中修改<code>mysql-connector-java.jar</code>的版本为对应的mysql8.0+版本(例如：8.0.16)  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;version&gt;5.1.41&lt;/version&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在<code>database.properties</code>的<code>jdbc.url</code>上追加<code>&amp;useSSL=true</code>，开启证书验证  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#jdbc.url=jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">jdbc.url=jdbc:mysql://127.0.0.1:3306/ssm?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-8&amp;useSSL=<span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 框架整合 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> Maven </tag>
            
            <tag> Tomcat </tag>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
            <tag> MyBatis </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArchLinux搭建Java开发环境</title>
      <link href="/2019/05/19/archlinux-installation-instructions/"/>
      <url>/2019/05/19/archlinux-installation-instructions/</url>
      
        <content type="html"><![CDATA[<h3 id="【系统安装篇】"><a href="#【系统安装篇】" class="headerlink" title="【系统安装篇】"></a>【系统安装篇】</h3><h4 id="磁盘空间准备"><a href="#磁盘空间准备" class="headerlink" title="磁盘空间准备"></a>磁盘空间准备</h4><p><span style="color:#ff0000;">注意：安装单系统的跳过此步骤(例如：我)</span><br>Windows：参考<a href="https://jingyan.baidu.com/article/1876c852b7f88f890a13765e.html" rel="external nofollow noopener noreferrer" target="_blank">如何删除磁盘分区</a>;空出一块空闲空间即可<br><a href="https://upload.wikimedia.org/wikipedia/commons/1/1b/Linux_Distribution_Timeline.svg" rel="external nofollow noopener noreferrer" target="_blank">Linux</a>：使用<a href="http://www.runoob.com/linux/linux-comm-fdisk.html" rel="external nofollow noopener noreferrer" target="_blank"><code>fdisk</code></a>命令，简单粗暴</p><h4 id="启动盘制作"><a href="#启动盘制作" class="headerlink" title="启动盘制作"></a>启动盘制作</h4><p>首先去163的镜像源下载镜像文件<a href="http://mirrors.163.com/archlinux/iso" rel="external nofollow noopener noreferrer" target="_blank">archlinux-2019.01.01-x86_64.iso       </a><br><strong>Windows制作方式:</strong> 推荐使用<a href="https://sourceforge.net/projects/usbwriter/" rel="external nofollow noopener noreferrer" target="_blank">usbwriter</a>这款轻量级的工具<br><strong>Linux制作方式:</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fdisk -l   <span class="comment">#查看U盘设备(例如：/dev/sdb)</span></span><br><span class="line">sudo dd <span class="keyword">if</span>=archlinux-2019.01.01-x86_64.iso of=/dev/sdb bs=1440k oflag=sync    <span class="comment">#使用dd命令制作启动盘</span></span><br></pre></td></tr></table></figure><h4 id="修改BIOS引导"><a href="#修改BIOS引导" class="headerlink" title="修改BIOS引导"></a>修改BIOS引导</h4><p>参考百度经验——<a href="https://zhinan.sogou.com/guide/detail/?id=316512718960" rel="external nofollow noopener noreferrer" target="_blank">联想小新笔记本设置U盘启动教程</a><br>在BIOS Setup中的Security选项卡中把Secure Boot设置为Disable<br>在Boot选项卡中把Boot Mode改成Legac Support；Boot Priority改成UEFI First<br><span style="color:#ff0000;">注意：如果没有UEFI选项，请选择BIOS引导(请记住你的引导方式：本教程采用<strong>UEFI</strong>方式)</span><br>保存退出重启  </p><center>【BIOS引导界面】</center>  <p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18tf84370g30hs0dcju0.gif" alt="BIOS">  </p><center>【UEFI引导界面】</center><p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18tgy46kgg30sg0lca9y.gif" alt="UEFI">  </p><p>当屏幕上出现命令行提示符及闪烁的光标时即启动完毕<br><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18ti221p1g30m806o0si.gif" alt>  </p><p>由于我之前系统是Ubuntu，所以Boot Menu上还有Ubuntu的引导按钮，需要<a href="https://jingyan.baidu.com/article/67508eb426c8ad9ccb1ce445.html" rel="external nofollow noopener noreferrer" target="_blank">删除启动菜单多余选项</a>  </p><h4 id="再次确认引导方式"><a href="#再次确认引导方式" class="headerlink" title="再次确认引导方式"></a>再次确认引导方式</h4><p>在命令提示符下执行 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /sys/firmware/efi/efivars    <span class="comment">#如果出现大量信息，则为UEFI引导</span></span><br></pre></td></tr></table></figure><p>如果出现<code>ls: cannot access &#39;/sys/firmware/efi/efivars&#39;: No such file or directory</code>则为BIOS引导  </p><h4 id="检查网络连接"><a href="#检查网络连接" class="headerlink" title="检查网络连接"></a>检查网络连接</h4><p>虚拟机环境下可能是有网络的，如果是笔记本，必定没有网络    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com  <span class="comment">#看是否出现连续的ip信息</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18tirmfuzg30m806otcy.gif" alt="ping">  </p><p>如果没有出现连续信息，那就是网络不通  </p><h4 id="连接网络"><a href="#连接网络" class="headerlink" title="连接网络"></a>连接网络</h4><p>ArchLinux安装是需要网络的，所以必须连上网络，以下提供三种连网方式<span style="color:#ff0000;">(三选一，非多选，推荐一)</span><br><strong>方法一</strong>：使用 WiFi 连接，请使用 wifi-menu 命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu   <span class="comment">#选择wifi，输入密码连接</span></span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：使用DHCP方式连接(需要是有线网并且路由器支持DHCP动态主机设置协议)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhcpcd</span><br></pre></td></tr></table></figure><p><strong>方法三</strong>：使用 ADSL 宽带连接  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pppoe-setup     <span class="comment">#配置</span></span><br><span class="line">systemctl start adsl    <span class="comment">#连接ADSL</span></span><br></pre></td></tr></table></figure><h4 id="更新系统时间"><a href="#更新系统时间" class="headerlink" title="更新系统时间"></a>更新系统时间</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl <span class="built_in">set</span>-ntp <span class="literal">true</span>    <span class="comment">#设置时钟</span></span><br></pre></td></tr></table></figure><h4 id="修改源文件"><a href="#修改源文件" class="headerlink" title="修改源文件"></a>修改源文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/pacman.d/mirrorlist    <span class="comment">#使用vim编辑源文件</span></span><br></pre></td></tr></table></figure><p>在没有<code>#</code>注释的第一行添加以下内容，输入<code>:wq</code>保存退出  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Server = https://mirrors.ustc.edu.cn/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span>   <span class="comment">#使用中科大的源</span></span><br><span class="line">Server = http://mirrors.aliyun.com/archlinux/<span class="variable">$repo</span>/os/<span class="variable">$arch</span> <span class="comment">#阿里源</span></span><br></pre></td></tr></table></figure><h4 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h4><p><span style="color:#ff0000;">注意：分区操作涉及到SSD和机械硬盘，务必想清楚再下手</span><br>这里，我先介绍我目前磁盘情况  </p><blockquote><p>128G固态硬盘+500G机械硬盘</p></blockquote><p>查看目前硬盘情况  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk   <span class="comment">#查看硬盘情况</span></span><br></pre></td></tr></table></figure><p>结果如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">loop0       7:0    0 476.7M 1 loop /rn/archiso/sfs/airootfs      <span class="comment">#iso镜像</span></span><br><span class="line">sda           8:0    0 465.8G  0 disk   <span class="comment">#465.8G的机械硬盘sda </span></span><br><span class="line">└─sda1        8:1    0 465.8G  0 part /mnt/home <span class="comment">#sda下的第一个分区sda1</span></span><br><span class="line">sdb           8:16   1  14.6G  0  disk  <span class="comment">#16G的启动盘</span></span><br><span class="line">├─sdb1    8:17    1  588M  0 part  /runarchiso/bootmnt</span><br><span class="line">└─sda2    8:18    1  64M  0  part</span><br><span class="line">nvme0n1     259:0    0 119.2G  0 disk   <span class="comment">#119.2G固态硬盘nvme0n1 </span></span><br><span class="line">├─nvme0n1p1 259:1    0   100G  0 part /mnt  <span class="comment">#nme0n1第一个分区nvme0n1p1</span></span><br><span class="line">└─nvme0n1p2 259:2 0 19.2G   0  part  /mnt/boot/efi  <span class="comment">#nme0n1第二个分区nvme0n1p2</span></span><br></pre></td></tr></table></figure><p>首先，我们确定要格式化的硬盘有机械硬盘<code>sda</code>和固态硬盘<code>nvme0n1</code><br>那么，目前不论俩个硬盘下的分区如何，都需要被格式化掉<br>假设俩个硬盘格式化好了，那么如何来分区呢？  </p><p>推荐以下分区方案  </p><blockquote><p>固态硬盘(nvme0n1) ：119.2GB分三个区<br>nvme0n1p1  100GB  Linux Filesystem  根/分区<br>nvme0n1p2  9.2GB  EFI System  EFI分区<br>nvme0n1p3  10GB  Linux Swap   交换区  </p><p>机械硬盘(sda)：465.8GB分一个区就好<br>sda1 465.8GB Linux Filesystem  HOME分区  </p></blockquote><p>虚拟机用户只有一个盘就不需要机械硬盘分区方案<br>接下来，就要开始撸命令啦  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/nvme0n1  <span class="comment">#对固态硬盘进行分区</span></span><br></pre></td></tr></table></figure><p>使用delete按钮删除原来的分区，然后重新new新分区，分区大小按照上面方案设置，在Type中选择分区类型(例如：EFI System)，new出三个分区后，选择write按钮，输入yes保存，选择Quit按钮退出  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cfdisk /dev/sda <span class="comment">#对机械硬盘分区</span></span><br></pre></td></tr></table></figure><p>方法和方案同上，分好可以通过<code>lsblk</code>查看分区情况确认无误  </p><h4 id="格式化分区"><a href="#格式化分区" class="headerlink" title="格式化分区"></a>格式化分区</h4><p>上一步分好了分区，但是还没格式化特定类型，如果不格式化或格式化类型错误都会导致后面grub引导错误，从而安装失败，这里请睁大眼睛，按照我的示例一一对应你自己的分区<br><span style="color:#ff0000;">注意：格式化是对硬盘分区操作的,不是硬盘，别看错了</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/nvme0n1p1  <span class="comment">#格式化根分区，类型为ext4</span></span><br><span class="line">mkfs.vfat /dev/nvme0n1p2  <span class="comment">#格式化EFI分区，类型为vfa</span></span><br><span class="line">mkswap -f /dev/nvme0n1p3 <span class="comment">#格式化Swap分区</span></span><br><span class="line">swapon /dev/nvme0n1p3  <span class="comment">#使用swapon命令将Swap分区打开</span></span><br><span class="line">mkfs.ext4 /dev/sda1  <span class="comment">#格式化HOME分区，类型为ext4</span></span><br></pre></td></tr></table></figure><h4 id="挂载分区"><a href="#挂载分区" class="headerlink" title="挂载分区"></a>挂载分区</h4><p>挂载就是把一块分区指定在某个文件夹下，当我们打开这个文件夹的时候，文件夹的空间大小就是使用该分区的存储空间(文件夹不占空间)<br>/mnt文件夹是启动盘中的引导文件夹，由于我们目前所有操作都还在启动盘里，所以需要把硬盘分区挂载到启动盘下的/mnt下，才能进入硬盘进行系统安装和配置，/mnt就相当于打开新系统的大门或者钥匙  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mount /dev/nvme0n1p1 /mnt  <span class="comment">#根分区挂载到/mnt</span></span><br><span class="line"></span><br><span class="line">mkdir /mnt/home  <span class="comment">#创建home文件夹</span></span><br><span class="line">mkdir -p /mnt/boot/EFI   <span class="comment">#创建boot文件夹及其子文件夹EFI</span></span><br><span class="line"></span><br><span class="line">mount /dev/sda1 /mnt/home  <span class="comment">#HOME分区挂载到/mnt/home</span></span><br><span class="line">mount /dev/nvme0n1p2 /mnt/boot/EFI  <span class="comment">#EFI分区挂载到/mnt/boot/EFI</span></span><br></pre></td></tr></table></figure><p>挂载好可以输入<code>lsblk</code>查看下挂载结果  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">NAME        MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda           8:0    0 465.8G  0 disk </span><br><span class="line">└─sda1        8:1    0 465.8G  0 part /home</span><br><span class="line">nvme0n1     259:0    0 119.2G  0 disk </span><br><span class="line">├─nvme0n1p1 259:1    0   100G  0 part /</span><br><span class="line">├─nvme0n1p2 259:2    0   9.2G  0 part /boot/EFI</span><br><span class="line">└─nvme0n1p3 259:3    0    10G  0 part [SWAP]</span><br></pre></td></tr></table></figure><h4 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h4><p>确认硬盘挂载无误之后，我们就可以开始安装系统及其相关组件了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacstrap /mnt base    ​<span class="comment">#安装base组件包到/mnt</span></span><br><span class="line">pacstrap /mnt base-devel    ​<span class="comment">#安装base-devel 开发组件包到/mnt</span></span><br></pre></td></tr></table></figure><h4 id="分区挂载情况写入到fstab中"><a href="#分区挂载情况写入到fstab中" class="headerlink" title="分区挂载情况写入到fstab中"></a>分区挂载情况写入到fstab中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">genfstab -U /mnt &gt;&gt; /mnt/etc/fstab </span><br><span class="line">cat /mnt/etc/fstab  <span class="comment">#检查一下</span></span><br></pre></td></tr></table></figure><h4 id="切换到安装的系统"><a href="#切换到安装的系统" class="headerlink" title="切换到安装的系统"></a>切换到安装的系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arch-chroot /mnt    <span class="comment">#进入/mnt下的系统</span></span><br></pre></td></tr></table></figure><p>这时候，我们就要离开启动盘系统，进入/mnt下安装的新系统ArchLinux进行必要的配置了，后面操作的都是硬盘上ArchLinux上的文件了  </p><h4 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h4><p>配置ArchLinux时间  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime  <span class="comment">#设为上海时间</span></span><br><span class="line">hwclock --systohc --utc     <span class="comment">#设置硬件时间</span></span><br></pre></td></tr></table></figure><h4 id="修改编码格式"><a href="#修改编码格式" class="headerlink" title="修改编码格式"></a>修改编码格式</h4><p>由于新系统没有vim，所以要安装一下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S vim   <span class="comment">#安装vim</span></span><br></pre></td></tr></table></figure><p>使用vim编辑locale.gen文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/locale.gen</span><br></pre></td></tr></table></figure><p>找到<code>en_US.UTF-8 UTF-8</code>和<code>zh_CN.UTF-8 UTF-8</code>，把前面的<code>#</code>号删除，保存退出  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">locale-gen  <span class="comment">#重新生成locale</span></span><br><span class="line"><span class="built_in">echo</span> LANG=en_US.UTF-8 &gt; /etc/locale.conf  <span class="comment">#生成locale.conf文件</span></span><br><span class="line">cat /etc/locale.conf    <span class="comment">#查看一下</span></span><br></pre></td></tr></table></figure><h4 id="创建主机名"><a href="#创建主机名" class="headerlink" title="创建主机名"></a>创建主机名</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> Arch &gt; /etc/hostname   <span class="comment">#这里的Arch就是自定义的主机名</span></span><br><span class="line">vim /etc/hosts  <span class="comment">#编辑hosts文件</span></span><br></pre></td></tr></table></figure><p>添加以下配置：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1   localhost.localdomain   localhost</span><br><span class="line">::1                 localhost.localdomain   localhost</span><br><span class="line">127.0.1.1   Arch.localdomain    Arch</span><br></pre></td></tr></table></figure><h4 id="安装网络连接组件"><a href="#安装网络连接组件" class="headerlink" title="安装网络连接组件"></a>安装网络连接组件</h4><p>这里我提供三种方案，选一个就行<span style="color:#ff0000;">(例如我：无线网络组件)</span>  </p><p><strong>无线网络组件：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S iw wpa_supplicant dialog  <span class="comment">#无线网络</span></span><br></pre></td></tr></table></figure><p>后面重启系统后可以使用<code>wifi-menu</code>命令连网  </p><p><strong>有线网络组件：</strong><br><span style="color:#ff0000;">注意：笔记本用户千万别手欠，觉得自己笔记本也有网线插口就执行以下命令，否则系统安装好，DNS也会无法解析，除非你真的是使用网线方式连的网络</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> dhcpcd     <span class="comment">#进入系统自动连网</span></span><br><span class="line">systemctl start dhcpcd      <span class="comment">#重启后执行此命令启动网络服务</span></span><br></pre></td></tr></table></figure><p><strong>其他网络组件：</strong><br><span style="color:#ff0000;">ADSL电话线方式入网的，现在基本不用了，我写出来也只是为了完善教程</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman -S rp-pppoe pppoe-setup </span><br><span class="line">systemctl start adsl    <span class="comment">#启动ADSL</span></span><br></pre></td></tr></table></figure><h4 id="设置ROOT用户"><a href="#设置ROOT用户" class="headerlink" title="设置ROOT用户"></a>设置ROOT用户</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd  <span class="comment">#设置root密码</span></span><br></pre></td></tr></table></figure><h4 id="安装Intel-ucode-CPU非Intel跳过"><a href="#安装Intel-ucode-CPU非Intel跳过" class="headerlink" title="安装Intel-ucode(CPU非Intel跳过)"></a>安装Intel-ucode(CPU非Intel跳过)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S intel-ucode</span><br></pre></td></tr></table></figure><h4 id="安装Bootloader"><a href="#安装Bootloader" class="headerlink" title="安装Bootloader"></a>安装Bootloader</h4><p>安装引导方式，一开始我们就已经查看过电脑的引导方式了，这里我提供两个方案<span style="color:#ff0000;">(根据你自己的引导方式选择一个)</span>  </p><blockquote><p>BIOS/MBR引导<br>EFI/GPT引导  </p></blockquote><p>如果你的电脑还存在其他系统<span style="color:#ff0000;">(例如:双系统用户)</span>，那么还需要安装<code>os-prober</code>包，它可以自动检测电脑中的其他系统，自动设置到启动选项  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S os-prober</span><br></pre></td></tr></table></figure><p><strong>BIOS/MBR引导</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub  <span class="comment">#安装grub</span></span><br><span class="line">grub-install --target=i386-pc /dev/sdx <span class="comment">#/dev/sdx是已经完成分区的磁盘，grub将安装到它上面(注意：不是分区，不清楚可以用lsblk命令查看)</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg    <span class="comment">#生成配置文件</span></span><br></pre></td></tr></table></figure><p><strong>EFI/GPT引导</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pacman -S grub efibootmgr   <span class="comment">#安装grub与efibootmgr两个包</span></span><br><span class="line">grub-install --target=x86_64-efi --efi-directory=/boot/EFI --bootloader-id=ArchLinux <span class="comment">#部署grub</span></span><br><span class="line">grub-mkconfig -o /boot/grub/grub.cfg    <span class="comment">#生成配置文件</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">如果在上面(两种方式)配置引导的过程中报<code>warning failed to connect to lvmetad，falling back to device scanning.</code>错误；将<code>/etc/lvm/lvm.conf</code>文件中的<code>use_lvmetad = 1</code>改为0，保存，重新配置<code>grub</code></span>  </p><p>为了保证引导正确性，使用vim检查一下配置文件内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p>检查以<code>menuentry</code>开头的代码部分是否有<code>windows 10</code>或其他系统名入口(双系统用户)，示例如下：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">menuentry <span class="string">'Arch Linux'</span> --class arch --class gnu-linux --class gnu --class os <span class="variable">$menuentry_id_option</span> <span class="string">'gnulinux-simple-98746137-6e37-4e0c-a1a6-096b07b1fab3'</span> &#123;</span><br><span class="line">load_video</span><br><span class="line"><span class="built_in">set</span> gfxpayload=keep</span><br><span class="line">insmod gzio</span><br><span class="line">insmod part_gpt</span><br><span class="line">insmod ext2</span><br><span class="line"><span class="keyword">if</span> [ x<span class="variable">$feature_platform_search_hint</span> = xy ]; <span class="keyword">then</span></span><br><span class="line">  search --no-floppy --fs-uuid --<span class="built_in">set</span>=root  98746137-6e37-4e0c-a1a6-096b07b1fab3</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  search --no-floppy --fs-uuid --<span class="built_in">set</span>=root 98746137-6e37-4e0c-a1a6-096b07b1fab3</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">'Loading Linux linux ...'</span></span><br><span class="line">linux/boot/vmlinuz-linux root=UUID=98746137-6e37-4e0c-a1a6-096b07b1fab3 rw  quiet</span><br><span class="line"><span class="built_in">echo</span><span class="string">'Loading initial ramdisk ...'</span></span><br><span class="line">initrd/boot/intel-ucode.img /boot/initramfs-linux.img</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exit</span>    <span class="comment">#退出新系统</span></span><br><span class="line">umount -R /mnt <span class="comment">#取消/mnt挂载</span></span><br><span class="line">reboot <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><h3 id="【桌面安装篇】"><a href="#【桌面安装篇】" class="headerlink" title="【桌面安装篇】"></a>【桌面安装篇】</h3><p>通过上面的操作，不出意外的话，Arch是成功装好了(U盘可以拔了)，但还是命令行界面，接下来我们就要为Arch安装桌面以及配置一些必要参数  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wifi-menu   <span class="comment">#连接wifi</span></span><br></pre></td></tr></table></figure><p>连上之后记得<code>ping www.baidu.com</code>，看看有没有用  </p><h4 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h4><p>如果这里不添加，安装完桌面后，登录界面没有用户出现<span style="color:#ff0000;">(root用户不会出现在gdm登录界面)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -m -g users -s /bin/bash teaper <span class="comment">#添加teaper用户，用户名你自定义</span></span><br><span class="line">passwd teaper <span class="comment">#为teaper用户设置密码</span></span><br></pre></td></tr></table></figure><p>配置新用户的sudo权限  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sudoers #编辑配置文件</span><br></pre></td></tr></table></figure><p>在<code>root ALL = (ALL) ALL</code>下添加<code>teaper ALL = (ALL) ALL</code>;输入<code>:wq!</code>强制保存退出vim  </p><h4 id="安装声卡驱动"><a href="#安装声卡驱动" class="headerlink" title="安装声卡驱动"></a>安装声卡驱动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pacman -S alsa-utils</span><br></pre></td></tr></table></figure><p>Arch Linux默认开启了声音支持，默认静音<br>可通过<code>alsamixer</code>命令＋字母[M] 取消静音  </p><blockquote><p>方向键上下调节音量<br>字母[M]取消静音<br>[Q],[W],[E] 增大 左,右,通道 的音量<br>[Z],[X],[C] 减小 左,右,通道 的音量  </p></blockquote><h4 id="安装显卡驱动"><a href="#安装显卡驱动" class="headerlink" title="安装显卡驱动"></a>安装显卡驱动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep VGA    <span class="comment">#查看显卡型号(例如：Intel Corporation HD Graphics 530)</span></span><br><span class="line">00:02.0 VGA compatible controller: Intel Corporation HD Graphics 530 (rev 06)   </span><br><span class="line">lspci | grep 3D     <span class="comment">#查看独显型号(例如：NVIDIA Corporation GM107M [GeForce GTX 950M])</span></span><br><span class="line">01:00.0 3D controller: NVIDIA Corporation GM107M [GeForce GTX 950M] (rev a2)    <span class="comment">#(rev a2) 表示正在运行，如果是ff则未运行</span></span><br><span class="line"></span><br><span class="line">pacman -S 驱动包名字</span><br></pre></td></tr></table></figure><p>参照下图根据你的显卡类型，选择相应驱动包  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xf86-video-resa   <span class="comment">#——通用的</span></span><br><span class="line">xf86-video-intel    <span class="comment">#——Intel</span></span><br><span class="line">xf86-video-nouveau  <span class="comment">#——Geforce7</span></span><br><span class="line">xf86-video-304xx <span class="comment">#——Geforce6/7</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIogy1g18tjl32sqj30qj09qjsg.jpg" alt="显卡类型"><br>如果你还有独显<code>NVIDIA</code>可以使用,可以一并安装<code>pacman -S xf86-video-intel nvidia</code>  </p><p><span style="color:#fc572f;"><strong>双显卡配置</strong></span><br>参考博客——<a href="https://dclunatic.github.io/2018/09/10/%E7%8B%AC%E6%98%BE/" rel="external nofollow noopener noreferrer" target="_blank">【Arch双显卡问题】</a></p><blockquote><p>什么情况需要配置双显卡？<br>系统中有 Intel 集显和 NVIDIA 独显<br>观察BIOS中的启用的<a href="http://iknow.lenovo.com/detail/dc_102471.html" rel="external nofollow noopener noreferrer" target="_blank">显卡模式</a> <code>Graphic Device</code> 和上方命令运行结果有没有出现集显/独显出现<code>(rev ff)</code>未运行情况。例如我的BIOS中的显卡模式有 <code>UMA only</code>（只用集显）和默认 <code>Discrete</code>（集显独显分开运行）；上方命令结果也没有出现 <code>(rev ff)</code>显卡未启动的情况， 所以不需要进行下方双显卡配置</p></blockquote><p>使用Linux下第三方程序 <code>Bumblebee</code> 来实现类似于显卡模式 <code>ptimus</code> （同时使用Intel VGA及Nvidia VGA）的功能；它通过 <code>virtualGL</code> 或者 <code>primus</code> 来实现独显渲染，集显显示的功能；独立显卡在空闲的时候会被禁用掉</p><p>安装命令<code>pacman -S bumblebee mesa bbswitch</code>；其中 <code>bumblebee</code> 提供是主要程序实现的包，<code>mesa</code> 提供开源的 <code>OpenGL</code> 实现，而 <code>bbswtich</code> 负责切换显卡  </p><blockquote><p>如果你的系统是 32 位的，那么你需要启用 <code>Multilib</code>，要安装 <code>lib32-virtualgl</code> 和 <code>lib32-nvidia-utils</code> 或 <code>lib32-nvidia-340xx-utils</code> 来和 64 位的对应,具体参照上图  </p></blockquote><p>修改配置文件 <code>/etc/bumblebee/bumblebee.conf</code>，将 <code>Driver</code> 的值设置为 <code>nvidia</code>，来让其使用 <code>nvidia</code> 驱动，其次将 <code>PMMethod</code> 的值设置为 <code>bbswitch</code>，让它使用刚刚安装的 <code>bbswitch</code> 来进行显卡的切换。修改配置文件 <code>/etc/modprobe.d/bbswitch.conf</code>，添加 <code>options bbswitch load_state=0 unload_state=0</code> 来设置 <code>bbswitch</code> 的状态。使用命令 <code>modprobe bbswitch</code> 来加载这个模块  </p><p>将要使用 <code>Bumblebee</code> 的用户添加到 <code>bumblebee</code> 组中，<code>gpasswd -a username bumblebee</code>，并将 <code>bumblebeed</code> 服务设为开机启动，<code>systemctl enable bumblebeed</code>，启用它 <code>systemctl start bumblebeed</code>  </p><h4 id="安装X窗口系统"><a href="#安装X窗口系统" class="headerlink" title="安装X窗口系统"></a>安装X窗口系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pacman -S xorg <span class="comment">#安装xorg</span></span><br><span class="line">pacman -S xf86-input-synaptics <span class="comment">#安装触摸板驱动</span></span><br><span class="line">pacman -S ttf-dejavu wqy-microhei   <span class="comment">#安装文泉驿米黑字体</span></span><br><span class="line">pacman -S ttf-dejavu wqy-zenhei wqy-microhei    <span class="comment">#安装常用字体</span></span><br></pre></td></tr></table></figure><h4 id="安装Gnome桌面"><a href="#安装Gnome桌面" class="headerlink" title="安装Gnome桌面"></a>安装Gnome桌面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pacman -S gnome  <span class="comment">#安装gnome</span></span><br><span class="line">pacman -S gnome-tweak-tool <span class="comment">#gnome桌面优化工具</span></span><br><span class="line">pacman -S alacarte  <span class="comment">#桌面菜单编辑器</span></span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> gdm    <span class="comment">#启用gnome窗口管理器服务</span></span><br><span class="line">systemctl <span class="built_in">enable</span> NetworkManager     <span class="comment">#启用网络管理</span></span><br><span class="line">reboot <span class="comment">#重启</span></span><br></pre></td></tr></table></figure><h3 id="【桌面美化篇】"><a href="#【桌面美化篇】" class="headerlink" title="【桌面美化篇】"></a>【桌面美化篇】</h3><p>至此，Arch已经有图形界面了，不过有些丑，还需要配置一下<br>在设置-&gt;设备-&gt;键盘处配置快捷键   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">名称                      命令                         快捷键</span><br><span class="line">终端            gnome-terminal          Super+R</span><br><span class="line">系统监视器  gnome-system-monitor    Ctrl+Alt+Backspace</span><br><span class="line">文件管理    nautilus                        Super+E</span><br><span class="line">Synapse     synapse                 Ctrl+空格</span><br></pre></td></tr></table></figure><p>由于我们每次打开软件都要去开始菜单，所以我这里推荐一个好用的软件<code>synapse</code>，他可以直接搜索应用名称，启动<code>synapse</code>的快捷键为<code>Ctrl+空格</code>，使用下方命令安装<span style="color:#ff0000;">(需要配好<a href="#更新源">pacman的源</a>才能安装)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S synapse</span><br></pre></td></tr></table></figure><p>打开系统监视器，右击进程<code>gnome-shell</code>选择 &gt; <code>Change Priority</code> &gt; <code>Very High</code>，将<code>gnome-shell</code>进程优先级设为最高<span style="color:#ff0000;">(可以解决桌面闪退到gdm的问题)</span>  </p><p>由于gnome3右键没有创建文件的快捷菜单，所以需要手动在<code>~/Templates</code>目录下创建模板文件，下次我们右击创建文件的时候，类似于从该文件夹下复制文件，所以你可以把一些编程模板也加进去  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/Templates  <span class="comment">#进入模板文件夹</span></span><br><span class="line"></span><br><span class="line">gedit text <span class="comment">#创建简单文本</span></span><br><span class="line">gedit markdown.md   <span class="comment">#Markdown文件</span></span><br></pre></td></tr></table></figure><p>除了简单文本文档，最好在其他新建的脚本内加上一行头代码，例如:在 markdown.md 中加入 <code># markdown</code>，js 文件中加入 <code>var a = 0</code>，Python 文件中加入 <code>import os</code></p><h4 id="触摸板"><a href="#触摸板" class="headerlink" title="触摸板"></a>触摸板</h4><p>Arch Linux 默认触摸板是不能触摸双击的，非常鸡肋，首先检查是否安装了 <code>xf86-input-synaptics</code> 这个包（一般是安装好了）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">synclient -l    <span class="comment">#查看当前触摸板设置</span></span><br></pre></td></tr></table></figure><p>会发现 TapButton1、TapButton2、TapButton3 这三个都是 0 ；具体各个参数代表什么请参考 <a href="https://wiki.archlinux.org/index.php/Touchpad_Synaptics_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" rel="external nofollow noopener noreferrer" target="_blank">【Touchpad Synaptics (简体中文)】</a>，编辑 <code>/usr/share/X11/xorg.conf.d/70-synaptics.conf</code> 文件，配置以下内容 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Section <span class="string">"InputClass"</span></span><br><span class="line">        Identifier <span class="string">"touchpad catchall"</span></span><br><span class="line">        Driver <span class="string">"synaptics"</span></span><br><span class="line">        MatchIsTouchpad <span class="string">"on"</span></span><br><span class="line">        Option <span class="string">"TapButton1"</span> <span class="string">"1"</span>     <span class="comment">#一指触摸 单击</span></span><br><span class="line">            Option <span class="string">"TapButton2"</span> <span class="string">"3"</span>     <span class="comment">#双指触摸 右击</span></span><br><span class="line">            Option <span class="string">"TapButton3"</span> <span class="string">"2"</span>     <span class="comment">#三指触摸 粘贴/关闭Tab</span></span><br><span class="line">            Option <span class="string">"VertEdgeScroll"</span> <span class="string">"on"</span>    <span class="comment">#双指滑动 垂直滚动</span></span><br><span class="line">            Option <span class="string">"VertTwoFingerScroll"</span> <span class="string">"on"</span>   <span class="comment">#双指垂直滚动</span></span><br><span class="line">            Option <span class="string">"HorizEdgeScroll"</span> <span class="string">"on"</span>   <span class="comment">#双指滑动 水平滚动</span></span><br><span class="line">            Option <span class="string">"HorizTwoFingerScroll"</span> <span class="string">"on"</span>  <span class="comment">#启用双指水平滚动</span></span><br><span class="line">            Option <span class="string">"CircularScrolling"</span> <span class="string">"on"</span></span><br><span class="line">            Option <span class="string">"CircScrollTrigger"</span> <span class="string">"2"</span></span><br><span class="line">            Option <span class="string">"EmulateTwoFingerMinZ"</span> <span class="string">"40"</span>  <span class="comment">#双指滚动精度调节</span></span><br><span class="line">            Option <span class="string">"EmulateTwoFingerMinW"</span> <span class="string">"8"</span></span><br><span class="line">            Option <span class="string">"FingerLow"</span> <span class="string">"30"</span>     <span class="comment">#手指压力低于此数值时视为手指移开</span></span><br><span class="line">            Option <span class="string">"FingerHigh"</span> <span class="string">"50"</span>    <span class="comment">#手指压力高于此数值时视为手指按压</span></span><br><span class="line">            Option <span class="string">"MaxTapTime"</span> <span class="string">"125"</span></span><br><span class="line"><span class="comment"># This option is recommend on all Linux systems using evdev, but cannot be</span></span><br><span class="line"><span class="comment"># enabled by default. See the following link for details:</span></span><br><span class="line"><span class="comment"># http://who-t.blogspot.com/2010/11/how-to-ignore-configuration-errors.html</span></span><br><span class="line"><span class="comment">#       MatchDevicePath "/dev/input/event*"</span></span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><p>建议微调，也可以不调用我这个，最后修改文件后保存  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /usr/share/X11/xorg.conf.d/70-synaptics.conf <span class="comment">#使配置生效</span></span><br></pre></td></tr></table></figure><h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><p>pacman是ArchLinux默认的包管理器，类似于debian系列的apt，pacman会自动安装所需要的依赖包，且下载的软件包存放在<code>/var/cache/pacman/pkg</code>目录下，如果在使用<code>pacman -Syu</code>滚动更新后，某个软件新版本不好用(例如：google Chrome)，可以在此目录找到旧的安装包，使用<code>pacman -U</code>命令安装本地包<code>示例：sudo pacman -U google-chrome-72.0.3626.121-1-x86_64.pkg.tar.xz</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pacman.conf    <span class="comment">#编辑源文件</span></span><br></pre></td></tr></table></figure><p>在末尾追加以下内容：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">SigLevel = Optional TrustAll    <span class="comment">#该SigLevel选项/etc/pacman.conf确定安装程序包所需的信任程度</span></span><br><span class="line">Server = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="variable">$arch</span></span><br><span class="line"></span><br><span class="line">[multilib]</span><br><span class="line">Include = /etc/pacman.d/mirrorlist      <span class="comment">#不添加此项无法安装32位依赖程序</span></span><br></pre></td></tr></table></figure><p>使修改后的源文件生效  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -Sy</span><br></pre></td></tr></table></figure><p>如果由于某种原因，你不希望<code>pacman -Syu</code>滚动更新的时候升级某个软件包，可以在<code>/etc/pacman.conf</code>中加入如下配置<span style="color:#ff0000;">(用的好可以用来防止滚挂)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IgnorePkg = 软件包名字    <span class="comment">#软件包名字(例如：google-chrome eclips)</span></span><br><span class="line">IgnoreGroup = 软件组名字     <span class="comment">#软件组名字(例如：gnome linux)</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：多软件包/软件组可以用空格隔开</span>  </p><p>如果你使用<code>pacman -Syu</code>滚动更新之后，无法正常使用系统<span style="color:#ff0000;">(俗称：滚挂)</span>，你可以进入tty字符界面<code>(ctrl+alt+f[1~7])</code>，使用vim查看<code>/var/log/pacman.log</code>文件，查看更新日志  </p><blockquote><p>例如：滚动更新google-chrome-72.0.3626.121-1-x86_64.pkg.tar.xz后日志如下</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[2018-08-08 04:09] [PACMAN] Running <span class="string">'pacman -Syu'</span></span><br><span class="line">[2018-08-08 04:09] [PACMAN] synchronizing package lists</span><br><span class="line">[2018-08-08 04:10] [PACMAN] starting full system upgrade</span><br><span class="line">[2018-08-08 04:14] [ALPM] transaction started</span><br><span class="line">[2018-08-08 04:14] [ALPM] upgraded google-chrome (72.0.3626.121-1 -&gt; 73.0.3683.103-1)</span><br></pre></td></tr></table></figure><p><code>Running &#39;pacman -Syu&#39;</code>：表示下面的紧接着的日志信息是运行<code>pacman -Syu</code>命令之后的日志输出<br><code>[2018-08-08 04:14]</code>：是你滚动更新的时间，确保这条日志和你滚挂时间匹配<br><code>upgraded</code>：表示更新软件包，如果是安装，则会显示<code>installed</code><br><code>google-chrome</code>：这个不用说都知道是软件名字<br><code>(72.0.3626.121-1 -&gt; 73.0.3683.103-1)</code>：表示版本从<code>72.0.3626.121-1</code>更新为<code>73.0.3683.103-1</code>  </p><p>根据日志信息中的软件和旧版本号，进入<code>/var/cache/pacman/pkg</code>目录下使用上面的<code>sudo pacman -U page1 page2 page3</code>方式，安装回旧版本的软件包即可  </p><details><summary style="color:#ff0000">gnome桌面不更新需要忽略的所有包如下</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IgnorePkg   = gnome* gdm* cheese eog libgweather evolution-data-server evolution libgdm libnautilus-extension mutter nautilus sushi totem</span><br></pre></td></tr></table></figure></details><h4 id="安装缺省的常用网络命令"><a href="#安装缺省的常用网络命令" class="headerlink" title="安装缺省的常用网络命令"></a>安装缺省的常用网络命令</h4><p>以前net-tools属于base组，装base时自动就装上了，现在哪个组都不属于了，这些工具需要单独安装<br>其中ifconfig、route在net-tools包中；nslookup、dig在dnsutils包中；ftp、telnet等在inetutils包中；ip命令在iproute2包中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S net-tools dnsutils inetutils iproute2</span><br></pre></td></tr></table></figure><h4 id="安装AUR软件包"><a href="#安装AUR软件包" class="headerlink" title="安装AUR软件包"></a>安装AUR软件包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S yaourt    <span class="comment">#可以使用aur中的软件，使用方法同pacman一样</span></span><br><span class="line">sudo pacman -S archlinuxcn-keyring  <span class="comment">#安装archlinuxcn-keyring 包以导入 GPG key</span></span><br></pre></td></tr></table></figure><h4 id="安装Git及SSH"><a href="#安装Git及SSH" class="headerlink" title="安装Git及SSH"></a>安装Git及SSH</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S git <span class="comment">#安装git</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span>   <span class="comment">#配置你的git用户名</span></span><br><span class="line">git config --global user.email <span class="string">"youremail@example.com"</span>      <span class="comment">#配置你的git邮箱</span></span><br><span class="line">git config --list   <span class="comment">#查看</span></span><br><span class="line"></span><br><span class="line">sudo pacman -S openssh   <span class="comment">#安装ssh服务</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span>    <span class="comment">#邮箱同上，一路按Enter</span></span><br><span class="line"><span class="built_in">cd</span> ~/.ssh   <span class="comment">#进入.ssh隐藏文件夹</span></span><br><span class="line">gedit id_rsa.pub       <span class="comment">#打开公钥并复制id_rsa.pub文件中的内容</span></span><br></pre></td></tr></table></figure><p>进入你自己的<a href="https://github.com" rel="external nofollow noopener noreferrer" target="_blank">github</a><br>进入<code>Settings</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH key</code><br>新建一个key，名字随便，把复制的内容粘贴上去  </p><p>配置一些git命令别名  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git config --global alias.co checkout</span><br><span class="line">git config --global alias.ci commit</span><br><span class="line">git config --global alias.st status</span><br><span class="line">git config --global alias.br branch</span><br><span class="line"></span><br><span class="line">git config --global alias.psm <span class="string">'push origin master'</span></span><br><span class="line">git config --global alias.plm <span class="string">'pull origin master'</span></span><br><span class="line"></span><br><span class="line">git config --global alias.lg <span class="string">"log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#----------------------ssr socks5 代理------------------------</span></span><br><span class="line">git config --global http.proxy <span class="string">'socks5://127.0.0.1:1080'</span>    <span class="comment">#端口号1080</span></span><br><span class="line">git config --global https.proxy <span class="string">'socks5://127.0.0.1:1080'</span></span><br></pre></td></tr></table></figure><p>还有一个好用的git工具<a href="https://github.com/nvie/gitflow" rel="external nofollow noopener noreferrer" target="_blank">gitflow</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gitflow-avh   <span class="comment">#安装gitflow</span></span><br></pre></td></tr></table></figure><h4 id="Git客户端gitkraken"><a href="#Git客户端gitkraken" class="headerlink" title="Git客户端gitkraken"></a>Git客户端gitkraken</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gitkraken</span><br></pre></td></tr></table></figure><h4 id="版本控制SVN"><a href="#版本控制SVN" class="headerlink" title="版本控制SVN"></a>版本控制SVN</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S svn  <span class="comment">#安装SVN</span></span><br></pre></td></tr></table></figure><h4 id="安装yay"><a href="#安装yay" class="headerlink" title="安装yay"></a>安装yay</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/yay.git</span><br><span class="line"><span class="built_in">cd</span> yay</span><br><span class="line">sudo chmod a＋w /opt/yay</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h4 id="下载numix图标"><a href="#下载numix图标" class="headerlink" title="下载numix图标"></a>下载numix图标</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt numix-circle</span><br></pre></td></tr></table></figure><p>选择第一个安装，注意导入PGP KEY选择Y；然后打开<code>Tweak -&gt; Appearance -&gt; icons</code>中选择你觉得好看的  </p><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.themes     <span class="comment">#创建主题隐藏文件夹</span></span><br><span class="line"><span class="built_in">cd</span> ~/.themes <span class="comment">#进入主题文件夹</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitlab.com/ZhuHan/GNOME-OSX-II-Theme.git  <span class="comment">#克隆主题文件</span></span><br></pre></td></tr></table></figure><p>进入<code>Tweak -&gt; Extensions</code>中启用<code>Application menu</code>；再到<code>Window Titlebars</code>选项卡中启用<code>maximize</code>和<code>minimize</code>以及修改称<code>Left</code>按钮  </p><h4 id="安装Dock状态栏"><a href="#安装Dock状态栏" class="headerlink" title="安装Dock状态栏"></a>安装Dock状态栏</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt dash-to-dock</span><br></pre></td></tr></table></figure><p>选择第一个，安装成功后进入<code>Tweak</code>的<code>Extension</code>启用<code>Dash to dock</code>，如果没有出现请重启电脑</p><h4 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S zsh</span><br><span class="line">sh -c <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)</span>"</span></span><br></pre></td></tr></table></figure><p>右击终端-&gt;配置文件首选项，进行颜色配置(我喜欢<span style="color:#FF5F00">#FF5F00</span>)  </p><p>修改<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes" rel="external nofollow noopener noreferrer" target="_blank">ZSH主题</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.oh-my-zsh/themes   <span class="comment">#列出所有主题</span></span><br><span class="line">sudo gedit ~/.zshrc  <span class="comment">#编辑ZSH配置文件</span></span><br></pre></td></tr></table></figure><p>修改<code>ZSH_THEME=&quot;mortalscumbag&quot;</code>为你想要的主题<code>mortalscumbag.zsh-theme</code>，不知道有什么主题看上面那个<code>ZSH主题</code>链接  </p><p>有些主题会出现字符乱码，需要下载主题<a href="https://github.com/powerline/fonts" rel="external nofollow noopener noreferrer" target="_blank">修补字体</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/powerline/fonts.git --depth=1 </span><br><span class="line"><span class="built_in">cd</span> fonts    <span class="comment">#进入这个字体文件夹</span></span><br><span class="line">./install.sh    <span class="comment">#安装字体</span></span><br></pre></td></tr></table></figure><p><strong>其他主题：</strong><a href="https://github.com/eendroroy/alien" rel="external nofollow noopener noreferrer" target="_blank">alien</a><span style="color:#ff0000;">(强力推荐)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.oh-my-zsh/themes  <span class="comment">#进入主题文件夹</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/eendroroy/alien.git</span><br><span class="line"><span class="built_in">cd</span> alien</span><br><span class="line">git submodule update --init --recursive</span><br><span class="line"></span><br><span class="line">gedit ~/.zshrc <span class="comment">#编写配置文件</span></span><br></pre></td></tr></table></figure><p>在<code>~/.zshrc</code>中<code>source $ZSH/oh-my-zsh.sh</code>后一行添加<code>source ~/.oh-my-zsh/themes/alien/alien.zsh</code>就可以看到效果了<span style="color:#ff0000;">(找不到位置可以Ctrl+F搜source $ZSH/oh-my-zsh.sh)</span></p><p>此外,alien 提供了多种不同的配色方案<span style="color:#ff0000;">(默认为蓝色)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> ALIEN_THEME=<span class="string">"blue"</span>  <span class="comment">#蓝色</span></span><br><span class="line"><span class="built_in">export</span> ALIEN_THEME=<span class="string">"green"</span> <span class="comment">#绿色</span></span><br><span class="line"><span class="built_in">export</span> ALIEN_THEME=<span class="string">"red"</span>    <span class="comment">#红色</span></span><br><span class="line"><span class="built_in">export</span> ALIEN_THEME=<span class="string">"soft"</span>   <span class="comment">#淡蓝色</span></span><br><span class="line"><span class="built_in">export</span> ALIEN_THEME=<span class="string">"gruvbox"</span>    <span class="comment">#灰褐色</span></span><br></pre></td></tr></table></figure><p>只需要在<code>~/.zshrc</code>中的<code>ZSH_THEME=&quot;mortalscumbag&quot;</code>后一行添加上面提供的任意一行<code>export ALIEN_THEME=&quot;red&quot;</code>即可  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g69jlg63s6j30gz017dfr.jpg" alt></p><p>还需要使用修补字体<a href="https://github.com/ryanoasis/nerd-fonts" rel="external nofollow noopener noreferrer" target="_blank">Nerd Fonts</a>，所以需要在 <code>export ALIEN_THEME=&quot;red&quot;</code> 下面添加一条 <code>export ALIEN_USE_NERD_FONT=1</code> 使字体生效<br> Nerd 字体在<a href="https://www.nerdfonts.com/font-downloads" rel="external nofollow noopener noreferrer" target="_blank">这里</a>下载<a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.0.0/Ubuntu.zip" rel="external nofollow noopener noreferrer" target="_blank">Ubuntu Nerd Font</a>，将压缩包解压到新建的 <code>Nerd</code> 文件夹中<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv Nerd /usr/share/fonts  <span class="comment">#将文件夹移动到字体目录</span></span><br></pre></td></tr></table></figure></p><p>为了让你的终端支持彩色输出，把<code>/etc/pacman.conf</code>中的<code>#color</code>的<code>#</code>删除 </p><h4 id="终端透明"><a href="#终端透明" class="headerlink" title="终端透明"></a>终端透明</h4><p>原版的gnome-terminal是不能调透明的，这是因为在早些版本的时候去掉了这个功能，后来Fedora的开发者有把这个透明特性给patch回去了，Arch Linux AUR包里有这个加了patch的版本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yaourt -S gnome-terminal-transparency   <span class="comment">#一路按y回车</span></span><br></pre></td></tr></table></figure><p>安装成功可以在右击终端，在 Preferences 的 color选项卡中拖动透明滑块设置透明度  </p><h3 id="【软件安装篇】"><a href="#【软件安装篇】" class="headerlink" title="【软件安装篇】"></a>【软件安装篇】</h3><h4 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S google-chrome <span class="comment">#直接安装chrome</span></span><br></pre></td></tr></table></figure><p>不过安装之后不能使用flash，所以需要安装一下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S flashplugin   <span class="comment">#flash插件</span></span><br></pre></td></tr></table></figure><h4 id="火狐浏览器"><a href="#火狐浏览器" class="headerlink" title="火狐浏览器"></a>火狐浏览器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S firefox   <span class="comment">#安装火狐浏览器</span></span><br></pre></td></tr></table></figure><h4 id="欧朋浏览器"><a href="#欧朋浏览器" class="headerlink" title="欧朋浏览器"></a>欧朋浏览器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S opera   <span class="comment">#安装欧朋浏览器</span></span><br></pre></td></tr></table></figure><h4 id="安装搜狗输入法"><a href="#安装搜狗输入法" class="headerlink" title="安装搜狗输入法"></a>安装搜狗输入法</h4><p>由于搜狗拼音输入法依赖于Fcitx，在安装搜狗拼音输入法之前，需要先行安装Fcitx  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S fcitx fcitx-configtool fcitx-gtk2  fcitx-gtk3  fcitx-lilydjwg-git  fcitx-qt4  fcitx-qt5  <span class="comment">#安装 fcitx 依赖包</span></span><br><span class="line">sudo pacman -S fcitx-sogoupinyin <span class="comment">#安装 fcitx 搜狗输入法</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：上面的 <code>fcitx-qt4</code> 包已经删库找不到了，官方用了 <code>fcitx-lilydjwg-git</code> 代替 <code>fcitx-qt4</code> 的部分支持，需要的可以点<a href="https://ftp.teaper.dev/fcitx_and_sogoupinyin/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>下载</span>  </p><p>用文本编辑器创建或编辑 <code>~/.xprofile</code> 文件;在其末尾添加以下几行:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br></pre></td></tr></table></figure><p>若你使用的桌面环境比较特殊，可能需要在<code>/etc/environmenet</code>后方也加入<span style="color:#ff0000;">(保险起见也加上)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GTK_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> QT_IM_MODULE=fcitx</span><br><span class="line"><span class="built_in">export</span> XMODIFIERS=<span class="string">"@im=fcitx"</span></span><br></pre></td></tr></table></figure><p>编辑 <code>/etc/xdg/autostart/fcitx-autostart.desktop</code> 文件，将里面这几个参数设置为 <code>true</code>，保存退出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Exec=fcitx-autostart</span><br><span class="line">Icon=fcitx</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Categories=System;Utility;</span><br><span class="line">StartupNotify=<span class="literal">true</span>      <span class="comment">#这里</span></span><br><span class="line">NoDisplay=<span class="literal">true</span>          <span class="comment">#这里</span></span><br><span class="line">X-GNOME-Autostart-Phase=Applications</span><br><span class="line">X-GNOME-AutoRestart=<span class="literal">true</span>        <span class="comment">#这里</span></span><br><span class="line">X-GNOME-Autostart-Notify=<span class="literal">true</span>       <span class="comment">#这里</span></span><br><span class="line">X-KDE-autostart-after=panel</span><br><span class="line">X-KDE-StartupNotify=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>复制 <code>/etc/xdg/autostart/fcitx-autostart.desktop</code> 到 <code>~/.config/autostart/</code>，在开始菜单打开 <code>Fcitx Configuration</code> 将 <code>SogouPinyin</code> 添加到美式英语键盘下面，也就是第二个位置，美式键盘置顶</p><p>创建 <code>~/.pam_environment</code>文件，并且复制到 <code>~/.config/autostart/</code> 文件夹中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GTK_IM_MODULE=fcitx</span><br><span class="line">QT_IM_MODULE=fcitx</span><br><span class="line">XMODIFIERS=@im=fcitx</span><br></pre></td></tr></table></figure><p>终端输入 <code>qtconfig-qt4</code> 会打开一个窗口，找到 <code>interface</code> 选项卡，将最下面 <code>Defult Input Method</code> 的值改为 <code>fcitx</code> 保存</p><details><summary style="color:#ff0000;">常见问题：滚动更新后，搜狗输入法无法启动，也没报错</summary><p>解决方法：首先检查上面的 <code>~/.xprofile</code> 和 <code>/etc/environmenet</code> 中的配置有没有被修改或删除，如果一切正常，使用 <code>source /etc/environmenet</code> 和 <code>source ~/.xprofile</code> 使配置文件生效，然后重启电脑</p></details><details><summary style="color:#ff0000;">常见问题：提示搜狗输入法异常：删除 ~/.config/SogouPY 并重新启动</summary><p>一般按照提示把 ~/.config/SogouPY 删除重启即可，如果按照提示无法解决，则问题出在输入法依赖包不匹配，建议使用我上面提供的所有依赖包，一键全装</p></details><details><summary style="color:#ff0000;">常见问题：Chrome 浏览器中文切换正常，但是 Telegram、Slack、Electron-ssr、youdao-note 等 Electron 软件无法切换中文输入法</summary><p>解决方法：在快捷方式中指定启动程序时使用的输入法框架 <code>fcitx</code> 或 <code>ibus</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /usr/share/applications/telegramdesktop.desktop</span><br></pre></td></tr></table></figure><p>然后在 <code>Exec =</code> 中添加 <code>env QT_IM_MODULE=fcitx</code>，如果是使用<code>ibus</code> 的话就替换为<code>ibus</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Exec=env QT_IM_MODULE=fcitx telegram-desktop -- %u</span><br></pre></td></tr></table></figure><p>同理：<code>QT_IM_MODULE=fcitx</code> 也可以换成 <code>GTK_IM_MODULE=fcitx</code> 和 <code>XMODIFIERS=&quot;@im=fcitx&quot;</code> 对应不同技术的软件，已知可使用此方法的软件如下</p><ul><li><strong>QT_IM_MODULE</strong>：telegram、VScode、megasync、OBS</li><li><strong>GTK_IM_MODULE</strong>：eclipse、MyEclipse、dbeaver、gedit、xmind</li><li><strong>XMODIFIERS</strong>：wps、jstock、Tim</li></ul></details><details><summary style="color:#ff0000;">常见问题：Chrome 浏览器中文切换正常，但是 JetBrains 系列软件无法切换中文输入法</summary><p>解决方法：<code>/opt</code> 目录找到对应软件的安装目录下的 <code>bin/软件名.sh</code>（示例：IDEA）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /opt/intellij-idea-ultimate-edition/bin/idea.sh</span><br></pre></td></tr></table></figure><p>然后在文件<strong>开头</strong>添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS=&quot;@im=fcitx&quot;</span><br></pre></td></tr></table></figure></details><h4 id="互联网小飞机"><a href="#互联网小飞机" class="headerlink" title="互联网小飞机"></a>互联网小飞机</h4><p>富强、民主、文明、和谐、自由、平等、公正、法治、爱国、敬业、诚信、友善  </p><p>先去国外网站买个VCS服务器,这里推荐<a href="https://www.vultr.com/?ref=7539377" rel="external nofollow noopener noreferrer" target="_blank">Vultr</a><br>新用户注册成功是在计费页面,说下Vultr的计费规则,它不像阿里云,一买就是年或月,而是按小时计算金额,金额从Vultr账户中扣除,所以我们需要先给账户充值金额,充值方式可以是paypal/支付宝/网银,我们先冲10美元<br>我们选择一个Vultr云计算(VC2)中的服务器(推荐洛杉矶/日本/新加坡)<br>系统选择CentOS/Ubuntu<br>服务器大小选个便宜的$5/mo $0.007/h1 CPU 1024MB内存1000GB带宽<br><span style="color:#ff0000;">注意:1000GB带宽表示流量,用完我们可以把原来主机销毁,重新换个主机,再搭建一遍,不用加钱</span><br>成功之后.会显示系统正在安装,安装成功,点击进入管理界面,里面有基本IP地址,用户名,密码之类的  </p><p>我们先<a href="http://ping.chinaz.com/" rel="external nofollow noopener noreferrer" target="_blank">ping</a>一下ip(例如：167.179.77.127)能不能通，再检测端口<a href="http://coolaf.com/tool/port" rel="external nofollow noopener noreferrer" target="_blank">国内</a>开放没有，<a href="https://www.yougetsignal.com/tools/open-ports/" rel="external nofollow noopener noreferrer" target="_blank">国外</a>开放没有  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ping 167.179.77.127 <span class="comment">#有连续的输出信息就说明可以通</span></span><br><span class="line">  </span><br><span class="line">PING 167.179.77.127 (167.179.77.127) 56(84) bytes of data.</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=1 ttl=36 time=160 ms</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=2 ttl=36 time=250 ms</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=3 ttl=36 time=247 ms</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=4 ttl=36 time=130 ms</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=5 ttl=36 time=241 ms</span><br><span class="line">64 bytes from 167.179.77.127: icmp_seq=6 ttl=36 time=159 ms</span><br></pre></td></tr></table></figure><p>如果不通就重新创建一个服务器<br>现在我们使用本机终端窗口远程ssh连接服务器  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@167.179.77.127   <span class="comment">#会弹出输入密码,在把管理界面的密码输入进去</span></span><br></pre></td></tr></table></figure><p>顺利进入系统之后,就可以进行ssr安装了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh    <span class="comment">#安装ssh,会显示红色未安装</span></span><br><span class="line"><span class="comment">#------------------------------------------------输出日志-------------------------------------------</span></span><br><span class="line">ShadowsocksR 一键管理脚本 [v2.0.38]</span><br><span class="line">  ---- Toyo | doub.io/ss-jc42 ----</span><br><span class="line"></span><br><span class="line">  1. 安装 ShadowsocksR</span><br><span class="line">  2. 更新 ShadowsocksR</span><br><span class="line">  3. 卸载 ShadowsocksR</span><br><span class="line">  4. 安装 libsodium(chacha20)</span><br><span class="line">————————————</span><br><span class="line">  5. 查看 账号信息</span><br><span class="line">  6. 显示 连接信息</span><br><span class="line">  7. 设置 用户配置</span><br><span class="line">  8. 手动 修改配置</span><br><span class="line">  9. 切换 端口模式</span><br><span class="line">————————————</span><br><span class="line"> 10. 启动 ShadowsocksR</span><br><span class="line"> 11. 停止 ShadowsocksR</span><br><span class="line"> 12. 重启 ShadowsocksR</span><br><span class="line"> 13. 查看 ShadowsocksR 日志</span><br><span class="line">————————————</span><br><span class="line"> 14. 其他功能</span><br><span class="line"> 15. 升级脚本</span><br><span class="line"> </span><br><span class="line"> 当前状态: 未安装</span><br></pre></td></tr></table></figure><p>输入数字1继续安装<br>要求输入端口号:不填默认2333<br>要求输入密码:不填默认doub.io(建议填下)<br>选择加密方式:输入数字10(别的也可以)<br>选择协议插件:2(auth_sha1_v4)<br>选择是否兼容原版ss客户端:n<br>选择混淆插件:1<br>进行混淆插件的设置后，会依次提示你对设备数、单线程限速和端口总限速进行设置，默认值是不进行限制，个人使用的话，选择默认即可，一路敲回车键,安装完成会出现配置信息,稍后使用(也可以通过运行./ssr.sh,输入5查看)  </p><p>安装 bbr 原版 / 魔改 / plus 锐速 四合一脚本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span> &amp;&amp; chmod +x tcp.sh &amp;&amp; bash tcp.sh    <span class="comment">#运行脚本</span></span><br></pre></td></tr></table></figure><p>执行成功之后会有这样一个选择界面  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">TCP加速 一键安装管理脚本 [v1.3.2]</span><br><span class="line">  -- 就是爱生活 | 94ish.me --</span><br><span class="line">  </span><br><span class="line"> 0. 升级脚本</span><br><span class="line">————————————内核管理————————————</span><br><span class="line"> 1. 安装 BBR/BBR魔改版内核</span><br><span class="line"> 2. 安装 BBRplus版内核 </span><br><span class="line"> 3. 安装 Lotserver(锐速)内核</span><br><span class="line">————————————加速管理————————————</span><br><span class="line"> 4. 使用BBR加速</span><br><span class="line"> 5. 使用BBR魔改版加速</span><br><span class="line"> 6. 使用暴力BBR魔改版加速(不支持部分系统)</span><br><span class="line"> 7. 使用BBRplus版加速</span><br><span class="line"> 8. 使用Lotserver(锐速)加速</span><br><span class="line">————————————杂项管理————————————</span><br><span class="line"> 9. 卸载全部加速</span><br><span class="line"> 10. 系统配置优化</span><br><span class="line"> 11. 退出脚本</span><br><span class="line">————————————————————————————————</span><br><span class="line"></span><br><span class="line"> 当前状态: 已安装 BBRplus 加速内核 , BBRplus启动成功</span><br></pre></td></tr></table></figure><p>查看<strong>当前状态</strong>，是否安装加速内核，一般是没有，输入上面<strong>内核管理</strong>模块中的数字<span style="color:#ff0000;">（1～3）</span><br>例如我是安装 <code>BBRplus</code> 版内核，安装过程会询问是否卸载当前内核某某版本，记住<span style="color:#ff0000;">一定要选 No </span><br>然后主机会重启，重启之后重新 <code>ssh</code> 登录，运行 <code>tcp.sh</code> 脚本，如果当前状态没有启动加速，但是内核安装成功<br>那么输入<strong>加速管理</strong>模块中的数字<span style="color:#ff0000;">（4~8）</span>，那么我是对应内核模块，选的使用BBRplus版加速<br>回车之后就会生效，再查看状态就是：<code>当前状态: 已安装 BBRplus 加速内核 , BBRplus启动成功</code></p><p>下载对应的客户端软件<span style="color:#ff0000;">(已被作者删库，邮件<code>erguotou525@gmail.com</code>联系作者获取对应平台最新的安装包)</span>，当然，我这里也有一些删库前的最新版客户端可以用，需要的点<a href="https://ftp.teaper.dev/ssr/" rel="external nofollow noopener noreferrer" target="_blank">这里</a>下载</p><ul><li>ArchLinux系Linux客户端<a href="https://ftp.teaper.dev/ssr/electron-ssr-0.2.6.pacman" rel="external nofollow noopener noreferrer" target="_blank">electron-ssr-0.2.4.pacman </a>  </li><li>Debian系Linux客户端<a href="https://ftp.teaper.dev/ssr/electron-ssr-0.2.5.deb" rel="external nofollow noopener noreferrer" target="_blank">electron-ssr-0.2.5.deb</a>  </li><li>安卓客户端<a href="https://ftp.teaper.dev/ssr/shadowsocksr.apk" rel="external nofollow noopener noreferrer" target="_blank">shadowsocksr.apk</a>  </li><li>IOS 客户端<a href="https://ftp.teaper.dev/ssr/Shadowrocket-2.1.10.ipa" rel="external nofollow noopener noreferrer" target="_blank">shadowrocket.ipa</a><span style="color:#ff0000;"> (借助PC版pp助手安装本地包方式安装到 iPhone 手机，使用<a href="https://shadowsocks-help.github.io/" rel="external nofollow noopener noreferrer" target="_blank">美区 App Store 账号</a>更新成最新版)</span>  </li><li>MAC 客户端<a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases" rel="external nofollow noopener noreferrer" target="_blank">ShadowsocksX-NG-R8.dmg</a>  </li><li>Windows客户端<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases" rel="external nofollow noopener noreferrer" target="_blank">ShadowsocksR-win-4.9.2.zip</a>  </li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U electron-ssr-0.2.4.pacman <span class="comment">#安装本地包</span></span><br></pre></td></tr></table></figure><blockquote><p>然后使用<code>electron-ssr</code>命令启动小飞机，如果无法启动，并且报<code>error while loading shared libraries: libgconf-2.so.4: cannot open shared object file: No such file or directory</code>的error错误，就使用<code>pacman -S gconf</code>命令安装gconf  </p></blockquote><p>启动后提示安装SSR，确定安装，然后配置服务器信息，如果没有出现配置界面，使用编辑器编辑<code>~/.config/electron-ssr/gui-config.json</code>文件手动设置参数  </p><details><summary>gui-config.json</summary><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"configs"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"enable"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"group"</span>: <span class="string">""</span>,</span><br><span class="line"><span class="attr">"id"</span>: <span class="string">"D02C9C64178F5BAD5F5009DFACC33907"</span>,</span><br><span class="line">"method": "aes-256-cfb",  #加密方式</span><br><span class="line">"obfs": "plain",  #混淆方式</span><br><span class="line">"obfsparam": "",</span><br><span class="line">"password": "pawwsord",  #密码</span><br><span class="line">"protocol": "auth_sha1_v4",   #协议</span><br><span class="line">"protocolparam": "",</span><br><span class="line">"remarks": "",</span><br><span class="line">"remarks_base64": "",</span><br><span class="line">"server": "139.175.195.66",  #服务器</span><br><span class="line">"server_port": 2334   #远程端口</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line">"index": 0,</span><br><span class="line">"enable": true,</span><br><span class="line">"autoLaunch": false,</span><br><span class="line">"shareOverLan": false,</span><br><span class="line">"localPort": 1080,</span><br><span class="line">"ssrPath": "/home/teaper/.config/electron-ssr/shadowsocksr/shadowsocks",</span><br><span class="line">"pacPort": 2333,</span><br><span class="line">"sysProxyMode": 1,  #代理方式(1：PAC代理 2：全局 3：不代理)</span><br><span class="line">"serverSubscribes": [],</span><br><span class="line">"httpProxyEnable": true,</span><br><span class="line">"globalShortcuts": &#123;</span><br><span class="line">"toggleWindow": &#123;</span><br><span class="line">"key": "Ctrl+Shift+W",</span><br><span class="line">"enable": true</span><br><span class="line">&#125;,</span><br><span class="line">"switchSystemProxy": &#123;</span><br><span class="line">"key": "",</span><br><span class="line">"enable": false</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"windowShortcuts": &#123;</span><br><span class="line">"toggleMenu": &#123;</span><br><span class="line">"key": "Ctrl+Shift+B",</span><br><span class="line">"enable": true</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">"httpProxyPort": 12333,</span><br><span class="line">"autoUpdateSubscribes": true,</span><br><span class="line">"subscribeUpdateInterval": 24</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>将<code>electron-ssr</code>添加到<strong>开机自启</strong>，这样就不用每次开机都要手动启动它  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp electron-ssr.desktop ~/.config/autostart    <span class="comment">#将快捷方式复制到自启程序目录</span></span><br></pre></td></tr></table></figure><p>最后，分享一个免费获取小飞机节点的网站<a href="https://m.ssrtool.com/tool/recV3?uri=/m/free_ssr" rel="external nofollow noopener noreferrer" target="_blank">SSCAP/SSTAP 小工具/SSR/SS/V2Ray/Vmess/Socks5免费账号</a><span style="color:#ff0000;">(打开网站需要全局代理)</span>，还有两个不错的机场 <a href="https://dashboard.blinkload.org/" rel="external nofollow noopener noreferrer" target="_blank">Blinkload</a>、<a href="https://stc-server.com/" rel="external nofollow noopener noreferrer" target="_blank">STC-Server</a>  </p><details><summary style="color:#ff0000">添加一些国外 DNS 提升速度</summary><p>编辑 <code>/etc/resolv.conf</code> 文件，<strong>追加</strong>以下 <code>DNS</code> 即可，效果立竿见影</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Cloudflare</span></span><br><span class="line">nameserver 1.1.1.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 诺顿</span></span><br><span class="line">nameserver 199.85.126.10</span><br><span class="line">nameserver 199.85.127.10</span><br><span class="line"></span><br><span class="line"><span class="comment"># google</span></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 8.8.4.4</span><br></pre></td></tr></table></figure></details><h4 id="网易云音乐"><a href="#网易云音乐" class="headerlink" title="网易云音乐"></a>网易云音乐</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S netease-cloud-music      <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>安装之后，会发现它无法输入中文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qcef</span><br></pre></td></tr></table></figure><details><summary><span style="color:#ff0000">注意：2019-05-24 08:22 最新版 netease-cloud-music 1.2.1-1 无法输入中文，建议回退旧版本 netease-cloud-music-1.1.3.2-3-x86_64.pkg.tar.xz</span></summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">axel -n 10 https://mirrors.nju.edu.cn/archlinuxcn/x86_64/netease-cloud-music-1.1.3.2-3-x86_64.pkg.tar.xz</span><br><span class="line">sudo pacman -U netease-cloud-music-1.1.3.2-3-x86_64.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>然后在 <code>/etc/pacman.conf</code> 中忽略它的更新  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IgnorePkg = netease-cloud-music</span><br></pre></td></tr></table></figure></details><h4 id="蓝牙配置"><a href="#蓝牙配置" class="headerlink" title="蓝牙配置"></a>蓝牙配置</h4><p>之前我们只安装了网络工具，没有配蓝牙驱动，现在安装一下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S bluez bluez-utils bluez-firmware pulseaudio-bluetooth pavucontrol pulseaudio-alsa <span class="comment">#全装</span></span><br><span class="line"></span><br><span class="line">yay -S pulseaudio-bluetooth-a2dp-gdm-fix    <span class="comment">#从PulseAudio的gdm实例中卸载蓝牙模块。修复了蓝牙耳机的可用性a2dp配置文件(可选)</span></span><br></pre></td></tr></table></figure><blockquote><p>bluez软件包提供蓝牙协议栈<br>bluez-utils软件包提供bluetoothctl工具<br>pulseaudio-bluetooth则为bluez提供了PulseAudio音频服务,若没有安装则蓝牙设备在配对 完成后,连接会失败,提示<br>pavucontrol则提供了pulseaudio的图形化控制界面<br>pulseaudio-alsa(可选)则使pulseaudio和alsa协同使用，之后就可以用alsamixer来管理蓝牙音频了    </p></blockquote><p>启动蓝牙服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> bluetooth.service</span><br><span class="line">sudo systemctl start bluetooth.service</span><br></pre></td></tr></table></figure><p>启动pulseaudio服务(使用非root执行此命令)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pulseaudio -k                   <span class="comment"># 确保没有pulseaudio启动</span></span><br><span class="line">pulseaudio --start              <span class="comment"># 启动pulseaudio服务</span></span><br></pre></td></tr></table></figure><p>将用户加入lp用户组  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G lp <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>默认情况下，蓝牙仅为 lp 用户组中的用户启用 bnep0 设备。如果想要加入蓝牙系统，需确认已将用户加入该组。可以修改/etc/dbus-1/system.d/bluetooth.conf文件中相应的组配置来实现<br>现在就可以使用系统中自带的蓝牙进行连接，连接之后  </p><p>配置蓝牙  </p><blockquote><p>启动bluetoothctl交互命令.可以输入 help 列出所有有效的命令  </p><p>输入 power on 命令打开控制器电源。默认是关闭的<br>输入 devices 命令获取要配对设备的 MAC 地址<br>如果设备未在清单中列出，输入 scan on 命令设置设备发现模式<br>输入 agent on 命令打开代理<br>输入 pair $MAC 开始配对(支持 tab 键补全)<br>如果使用无 PIN 码设备，再次连接可能需要手工认证。输入 trust $MAC 命令<br>用 connect $MAC 命令建立连接  </p></blockquote><p>以下为操作示例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[teaper@Arch ~]$ bluetoothctl </span><br><span class="line">Agent registered</span><br><span class="line">[CHG] Device 5C:7E:6A:EF:81:CB RSSI: -52</span><br><span class="line">[CHG] Device 5C:7E:6A:EF:81:CB RSSI: -30</span><br><span class="line">[小爱音箱-9708]<span class="comment"># agent KeyboardOnly </span></span><br><span class="line">Agent is already registered</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -86</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -77</span><br><span class="line">[小爱音箱-9708]<span class="comment"># default-agent </span></span><br><span class="line">Default agent request successful</span><br><span class="line">[小爱音箱-9708]<span class="comment"># scan on</span></span><br><span class="line">Discovery started</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -85</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[CHG] Device 5C:7E:6A:EF:81:CB RSSI: -52</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -85</span><br><span class="line">[CHG] Device 5C:7E:6A:EF:81:CB RSSI: -30</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -86</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -85</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -84</span><br><span class="line">[小爱音箱-9708]<span class="comment"># pair B8:98:F7:5D:8F:54</span></span><br><span class="line">Attempting to pair with B8:98:F7:5D:8F:54</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 Connected: yes</span><br><span class="line">Request confirmation</span><br><span class="line">[agent] Confirm passkey 853334 (yes/no): yes</span><br><span class="line">Failed to pair: org.bluez.Error.AuthenticationFailed</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 Connected: no</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -85</span><br><span class="line">[NEW] Device 4D:87:74:CB:11:18 小爱音箱-9708</span><br><span class="line">[CHG] Device 4D:87:74:CB:11:18 RSSI: -52</span><br><span class="line">[小爱音箱-9708]<span class="comment"># connect B8:98:F7:5D:8F:54</span></span><br><span class="line">Attempting to connect to B8:98:F7:5D:8F:54</span><br><span class="line">Failed to connect: org.bluez.Error.Failed</span><br><span class="line">[CHG] Device 4D:87:74:CB:11:18 RSSI: -30</span><br><span class="line">[CHG] Device B8:98:F7:5D:8F:54 RSSI: -76</span><br><span class="line">[小爱音箱-9708]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>设置自动启动蓝牙<br>将 <code>/etc/bluetooth/main.conf</code>最后的 <code>AutoEnable</code> 值修改为 <code>true</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/bluetooth/main.conf        <span class="comment">#使用root用户修改，：wq!强制保存退出</span></span><br><span class="line">  </span><br><span class="line">sudo pacman -S ansible  <span class="comment">#安装ansible</span></span><br><span class="line">sudo ansible localhost -m lineinfile -a <span class="string">"path=/etc/bluetooth/main.conf line='AutoEnable=true'"</span> <span class="comment">#设置蓝牙自启</span></span><br></pre></td></tr></table></figure><p>指定使用蓝牙音频输出<br>通过 <code>pavucontrol</code>的<code>Playback</code>和<code>Pecording</code>标签页重定向音频的输入和输出  </p><h4 id="安装打印机"><a href="#安装打印机" class="headerlink" title="安装打印机"></a>安装打印机</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cups ghostscript gsfonts  <span class="comment">#安装打印机组件</span></span><br></pre></td></tr></table></figure><p>如果是hp的打印机，还需要安装<code>pacman -S hplip hpoj</code>组件   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart avahi-daemon.service </span><br><span class="line">sudo systemctl start cups-browsed.service   <span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> cups-browsed.service  <span class="comment">#开机自启</span></span><br></pre></td></tr></table></figure><p>配置打印机：<br>方法一：<br>在浏览器中打开<a href="http://localhost:631" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:631</a><br>选择<code>Administration</code> &gt; <code>Add Printer</code> &gt; <code>Add Printer</code><br>选择<code>LPD/LPR</code>主机或打印机 &gt; <code>Continue</code><br>然后输入打印机的ip地址，这里是<code>1.1.1.1</code><br>然后之后就选择你的打印机型号，名字什么的自己取，设置好后会提示成功  </p><p>方法二：<br>在桌面右上角的设置 &gt; Devices &gt; Printers 中添加打印机  </p><h4 id="安装TIM-QQ"><a href="#安装TIM-QQ" class="headerlink" title="安装TIM/QQ"></a>安装TIM/QQ</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S deepin.com.qq.office  <span class="comment">#TIM</span></span><br><span class="line">sudo pacman -S deepin.com.qq.im  <span class="comment">#QQ</span></span><br></pre></td></tr></table></figure><h4 id="安装微信"><a href="#安装微信" class="headerlink" title="安装微信"></a>安装微信</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S deepin-wine-wechat  <span class="comment">#一路回车</span></span><br></pre></td></tr></table></figure><h4 id="安装微信小程序开发工具"><a href="#安装微信小程序开发工具" class="headerlink" title="安装微信小程序开发工具"></a>安装微信小程序开发工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wechat-devtools      <span class="comment">#需要wine</span></span><br></pre></td></tr></table></figure><h4 id="安装钉钉"><a href="#安装钉钉" class="headerlink" title="安装钉钉"></a>安装钉钉</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S dingtalk-electron</span><br></pre></td></tr></table></figure><h4 id="安装电报Telegram"><a href="#安装电报Telegram" class="headerlink" title="安装电报Telegram"></a>安装电报Telegram</h4><p><a href="https://telegram.org/" rel="external nofollow noopener noreferrer" target="_blank">Telegram</a>是一个高度安全无监控的软件，消息支持自毁  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S telegram-desktop-bin</span><br></pre></td></tr></table></figure><h4 id="安装多线程下载工具"><a href="#安装多线程下载工具" class="headerlink" title="安装多线程下载工具"></a>安装多线程下载工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S wget</span><br><span class="line">sudo pacman -S axel</span><br></pre></td></tr></table></figure><h4 id="BaiduPCS"><a href="#BaiduPCS" class="headerlink" title="BaiduPCS"></a>BaiduPCS</h4><p>百度网盘shell版，开玩笑的，下载请戳<a href="https://github.com/iikira/BaiduPCS-Go/releases" rel="external nofollow noopener noreferrer" target="_blank">BaiduPCS-Go-v3.6.1-linux-amd64.zip</a><br>提取到本地  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo mv BaiduPCS-Go-v3.6.1-linux-amd64 /opt/</span><br><span class="line"><span class="built_in">cd</span> /opt/BaiduPCS-Go-v3.6.1-linux-amd64</span><br><span class="line">./BaiduPCS-Go   <span class="comment">#终端运行该文件</span></span><br><span class="line"></span><br><span class="line">login -bduss=BDUSS值   <span class="comment">#使用BDUSS登录</span></span><br></pre></td></tr></table></figure><p>BDUSS值获取方式戳<a href="https://github.com/iikira/BaiduPCS-Go/wiki/%E5%85%B3%E4%BA%8E-%E8%8E%B7%E5%8F%96%E7%99%BE%E5%BA%A6-BDUSS" rel="external nofollow noopener noreferrer" target="_blank">这里</a><br>登录成功之后就可以进行下载等操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd  文件夹名        #切换目录</span><br><span class="line">config set -savedir /目录     #自定义下载目录</span><br><span class="line">d   [文件或目录1]  [文件或目录2]  #下载</span><br><span class="line">exit        #退出BaiduPCS-Go</span><br><span class="line"></span><br><span class="line">sudo ln -s /opt/BaiduPCS-Go-v3.6.1-linux-amd64/BaiduPCS-Go /usr/bin/baidu    #添加到终端命令,输入BaiduPCS即可打开</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：如果下载提示服务器超时，下载失败，请充值百度网盘超级会员，最近的一个bug，同样下面的百度网盘客户端也不行，下载才几十 KB 每秒</span></p><h4 id="百度网盘客户端"><a href="#百度网盘客户端" class="headerlink" title="百度网盘客户端"></a>百度网盘客户端</h4><p>建议还是使用上面的<a href="#baidupcs">BaiduPCS</a>，感觉更快，毕竟多线程  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S baidunetdisk <span class="comment">#客户端版</span></span><br></pre></td></tr></table></figure><details><summary style="color:#ff0000;">网盘登录不上，一直处于加载状态</summary><p>这种情况首先将 <code>~/.local/share/baidu</code> 下的文件删除，然后重新使用上面的命令安装一遍</p></details><h4 id="MEGAsync"><a href="#MEGAsync" class="headerlink" title="MEGAsync"></a>MEGAsync</h4><p><a href="https://mega.nz" rel="external nofollow noopener noreferrer" target="_blank">MEGAsync</a> 也是一个网盘，我使用百度网盘的时候，无非就是三个需求：存储、分享、同步，百度网盘下载限速成狗，分享链接三分钟失效，还会被监管扫描存储的文件，数据安全性不敢恭维啊！其他的 <a href="https://drive.google.com/drive/my-drive" rel="external nofollow noopener noreferrer" target="_blank">Google Drive</a> 能用是能用，但是你分享东西出来需要放共享文件夹  </p><p>这个网盘我就要吹爆了，支持有所有 <a href="https://mega.nz/sync" rel="external nofollow noopener noreferrer" target="_blank">Linux</a> 系统下的客户端，安卓、MAC、IOS、<a href="https://chrome.google.com/webstore/detail/mega/bigefpfhnfcobdlfbedofhhaibnlghod" rel="external nofollow noopener noreferrer" target="_blank">谷歌插件</a>全齐活，新人注册安装下 APP 就有 70G 存储空间，邀请好友上不封顶，关键是服务器<span style="color:#ff0000;">不限速</span>啊！  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g76rmbg88rj30kp0g0gq6.jpg" alt="Screenshot from 2019-09-21 07-03-39.png"></p><p>直接下载 ArchLinux 的安装包，本地安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -U megasync-x86_64.pkg.tar.xz</span><br></pre></td></tr></table></figure><p>登录客户端可以选择同步的文件夹，我个人习惯这样配置  </p><table><thead><tr><th>本机文件夹</th><th>MEGA文件夹</th><th>上传</th><th>下载</th></tr></thead><tbody><tr><td>/home/teaper/Public</td><td>/</td><td>/</td><td>/home/teaper/Downloads</td></tr></tbody></table><p>虽然访问不需要梯子，但是你也可以配置代理，高级设置还可以制定忽略规则  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*.iso</span><br><span class="line">*~.*</span><br><span class="line">.*</span><br><span class="line">desktop.ini</span><br><span class="line">Thumbs.db</span><br><span class="line">/home/teaper/Public/iso     <span class="comment">#这是我要忽略的系统镜像文件夹，同步的时候就不会上传到云端</span></span><br></pre></td></tr></table></figure><p>在看看它的分享功能，支持<a href="https://mega.nz/#!ZyQjiQoa" rel="external nofollow noopener noreferrer" target="_blank">加密</a>和<a href="https://mega.nz/#!ZyQjiQoa!UzxmcFVbyVUqPJqu8cbg7id_3sud4bYoJZFFlKLuUn0" rel="external nofollow noopener noreferrer" target="_blank">不加密</a>，撤销分享，好用的一匹<br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g76s0ck899j30j509u0te.jpg" alt="Screenshot from 2019-09-21 07-16-34.png"></p><h4 id="录像-直播"><a href="#录像-直播" class="headerlink" title="录像/直播"></a>录像/直播</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S obs-studio    <span class="comment">#OBS</span></span><br><span class="line">yay -S obs-linuxbrowser-bin <span class="comment">#哔哩哔哩弹幕需要这个插件</span></span><br></pre></td></tr></table></figure><p>启动后，obs 会根据你电脑性能自动配置出一套默认设置，但是默认设置下的视频清晰度达不到我们的要求，所以需要在此基础上修改一下  </p><blockquote><p>进入 file &gt; settings 打开设置面板，点击左边列表的 Output 选项卡<br>设置 Video Bitrate 比特率为 <code>5000</code> <span style="color:#ff0000;">(直播比特率 = (上行KB × 8) &lt; 用户下行 &lt; 平台带宽)</span><br>Encoder选择带 <code>NVENC</code> 的N卡驱动<br>勾选 <code>Enable Advanced Encoder Settings</code> 复选框<br>点击左边列表的 Video 选项卡,设置<code>Output(Scaled)Resolution</code>输出像素为<code>1920×1080</code>  </p></blockquote><details><summary style="color:#ff0000;">常见问题：OBS 录制屏幕黑屏，但是可以看见鼠标</summary><p>首先使用终端，输入 <code>obs</code> 命令进行启动，如果第一行日志显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Ignoring XDG_SESSION_TYPE=wayland on Gnome. Use QT_QPA_PLATFORM=wayland to run on Wayland anyway.</span><br></pre></td></tr></table></figure><p>那么输入以下命令，检查你目前使用的是 <code>x11</code> 还是 <code>wayland</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$XDG_SESSION_TYPE</span></span><br></pre></td></tr></table></figure><p>如果是 <code>wayland</code> 的话，那么我们的问题是一致的，编辑 <code>/etc/gdm/custom.conf</code> 文件，取消 <code>WaylandEnable=false</code> 的注释，将强制启动使用 <code>xorg</code> 作为窗口显示</p></details><h4 id="哔哩哔哩弹幕库"><a href="#哔哩哔哩弹幕库" class="headerlink" title="哔哩哔哩弹幕库"></a>哔哩哔哩弹幕库</h4><p><a href="http://bilibili.danmaku.live/#/" rel="external nofollow noopener noreferrer" target="_blank">官网</a>直接下载，解压之后运行其中名叫<code>弹幕库</code>的<code>run</code>脚本即可，唯一差的就一个快捷方式，下载下方图片，重命名为<code>danmuku.png</code>，将其移动到解压的文件夹中，并且将文件夹中的<code>弹幕库.run</code>重命名为<code>danmuku</code>，将整个解压文件夹移动到<code>/opt</code>目录  </p><p><img src="https://i.loli.net/2019/11/21/MZA3mrQsW8OwNYo.png" alt="danmuku.png"></p><p>创建快捷方式  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit danmuku.desktop  <span class="comment">#创建快捷方式，内容如下</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Bilibili Danmuku</span><br><span class="line">Comment=BiliBili live assistant</span><br><span class="line">Exec=/opt/bilibilidanmuku-linux-x64/danmuku</span><br><span class="line">Icon=/opt/bilibilidanmuku-linux-x64/danmuku.png</span><br><span class="line">Categories=Application;</span><br><span class="line">Version=2.1.1</span><br><span class="line">Type=Application</span><br><span class="line">Terminal=0</span><br></pre></td></tr></table></figure><p>添加权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x danmuku.desktop  <span class="comment">#添加运行权限</span></span><br><span class="line">sudo cp danmuku.desktop /usr/share/applications/  <span class="comment">#复制到快捷方式文件夹</span></span><br></pre></td></tr></table></figure><h4 id="Teamviewer远程工具"><a href="#Teamviewer远程工具" class="headerlink" title="Teamviewer远程工具"></a>Teamviewer远程工具</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S teamviewer</span><br></pre></td></tr></table></figure><p>启动后如果出现，未就绪，请检查网络连接，没问题的话运行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> --now teamviewerd</span><br></pre></td></tr></table></figure><h4 id="安装WPS"><a href="#安装WPS" class="headerlink" title="安装WPS"></a>安装WPS</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S wps-office</span><br></pre></td></tr></table></figure><p>安装wps缺失字体  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S ttf-wps-fonts</span><br></pre></td></tr></table></figure><h4 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yay -S jdk8     <span class="comment">#安装jdk8</span></span><br><span class="line">yay -S jdk11     <span class="comment">#安装jdk11</span></span><br><span class="line">archlinux-java status   <span class="comment">#列出所有jdk</span></span><br><span class="line">sudo archlinux-java <span class="built_in">set</span> java-11-jdk <span class="comment">#切换默认jdk,记得切回来</span></span><br></pre></td></tr></table></figure><p>所有 jdk 安装目录在 <code>/usr/lib/jvm</code> ，可以前去检查一下是否存在</p><details><summary style="color:#ff0000">下载失败 ERROR: Failure while downloading manual://jdk-11.0.5_linux-x64_bin.tar.gz    Aborting...</summary><p>因为 Oracle 官网下载 jdk 需要登录 Oracle 账号，所以现在用 yay 安装的时候可能会出现以下问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">==&gt; Retrieving sources...</span><br><span class="line">  -&gt; Downloading jdk-11.0.5_linux-x64_bin.tar.gz...</span><br><span class="line">The <span class="built_in">source</span> file <span class="keyword">for</span> this package needs to be downloaded manually</span><br><span class="line">since it requires a login and is not redistributable.   <span class="comment">#该软件包的源文件需要手动下载，因为它需要登录并且不能重新分发</span></span><br><span class="line">Please visit</span><br><span class="line">  https://www.oracle.com/technetwork/java/javase/downloads/</span><br><span class="line">  Java SE ... JDK, Download v</span><br><span class="line">and download</span><br><span class="line"> jdk-11.0.5_linux-x64_bin.tar.gz    <span class="comment">#包名</span></span><br><span class="line">to your ~/Downloads folder or <span class="keyword">in</span> with the PKGBUILD.</span><br><span class="line"></span><br><span class="line">Please <span class="keyword">do</span> not post alternate sources. They are not legal. Advertising</span><br><span class="line">will get them taken down by Oracle or too much traffic. Keep it a</span><br><span class="line">secret.</span><br><span class="line">==&gt; ERROR: Failure <span class="keyword">while</span> downloading manual://jdk-11.0.5_linux-x64_bin.tar.gz</span><br><span class="line">    Aborting...</span><br><span class="line">Error downloading sources: jdk11</span><br></pre></td></tr></table></figure><p>这种情况下我们就需要手动去官网下载 <code>tar.gz</code> 格式的包 <code>jdk-11.0.5_linux-x64_bin.tar.gz</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/jdk11.git   <span class="comment">#克隆 AUR 源中的 jdk11 仓库</span></span><br></pre></td></tr></table></figure><p>将刚下载的 <code>jdk-11.0.5_linux-x64_bin.tar.gz</code> 移动到克隆的文件夹中，编辑文件夹中的 <code>PKGBUILD</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#                     将</span></span><br><span class="line">https://download.oracle.com/otn-pub/java/jdk/<span class="variable">$&#123;pkgver&#125;</span>+<span class="variable">$&#123;_build&#125;</span>/<span class="variable">$&#123;_hash&#125;</span>/<span class="variable">$&#123;_srcfil&#125;</span></span><br><span class="line"><span class="comment">#                   替换为</span></span><br><span class="line">jdk-11.0.5_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure><p>保存修改之后在该目录中进行构建和安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg -sric</span><br></pre></td></tr></table></figure></details><h4 id="安装xmind"><a href="#安装xmind" class="headerlink" title="安装xmind"></a>安装xmind</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S xmind        <span class="comment">#一路回车</span></span><br></pre></td></tr></table></figure><p>如果出现打不开，并且弹出一个错误弹窗，则编辑<code>XMind.ini</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /usr/share/xmind/XMind/XMind.ini</span><br><span class="line"><span class="comment">#最后一行--add-modules=java.se.ee修改为</span></span><br><span class="line">-javaagent:/usr/share/xmind/XMind/XMindCrack.jar</span><br></pre></td></tr></table></figure><p>保存修改，下载破解jar包<a href="https://stormxing.oss-cn-beijing.aliyuncs.com/files/XMindCrack.jar" rel="external nofollow noopener noreferrer" target="_blank">XMindCrack.jar</a>；将其移动到XMind.ini同级目录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv XMindCrack.jar /usr/share/xmind/XMind/</span><br></pre></td></tr></table></figure><p>打开XMind, 点击帮助——序列号，然后输入以下序列号，邮箱随便填，可以填自己的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">XAka34A2rVRYJ4XBIU35UZMUEEF64CMMIYZCK2FZZUQNODEKUHGJLFMSLIQMQUCUBX</span><br><span class="line">RENLK6NZL37JXP4PZXQFILMQ2RG5R7G4QNDO3PSOEUBOCDRYSSXZGRARV6MGA33TN2</span><br><span class="line">AMUBHEL4FXMWYTTJDEINJXUAV4BAYKBDCZQWVF3LWYXSDCXY546U3NBGOI3ZPAP2SO</span><br><span class="line">3CSQFNB7VVIY123456789012345</span><br></pre></td></tr></table></figure><h4 id="安装Visual-Paradigm社区版"><a href="#安装Visual-Paradigm社区版" class="headerlink" title="安装Visual Paradigm社区版"></a>安装Visual Paradigm社区版</h4><p>代替Windows下的Visio，我一般拿来画<a href="http://www.umlchina.com/Tools/Newindex1.htm" rel="external nofollow noopener noreferrer" target="_blank">UML</a>图，开发人员常用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S visual-paradigm-community</span><br></pre></td></tr></table></figure><p>如果无法安装，可以进<a href="https://aur.archlinux.org/packages/visual-paradigm-community/" rel="external nofollow noopener noreferrer" target="_blank">ArchLinux Wiki</a>查看它的相关问题，发现它已经修改了新地址<a href="https://www.visual-paradigm.com/downloads/vpce/Visual_Paradigm_CE_Linux64_InstallFree.tar.gz" rel="external nofollow noopener noreferrer" target="_blank">https://www.visual-paradigm.com/downloads/vpce/Visual_Paradigm_CE_Linux64_InstallFree.tar.gz</a>，点击链接下载<code>tar.gz</code>压缩包<br>下载成功解压到本地，出现一个<code>Visual_Paradigm_CE_16.0</code>文件夹，将它移动到<code>/opt</code>目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo mv Visual_Paradigm_CE_16.0 /opt        <span class="comment">#移动到/opt</span></span><br><span class="line"><span class="built_in">cd</span> /opt/Visual_Paradigm_CE_16.0     <span class="comment">#进入文件夹</span></span><br><span class="line">./Visual_Paradigm   <span class="comment">#运行启动脚本</span></span><br></pre></td></tr></table></figure><p>不出意外是启动了(出意外是Java问题)，会提示激活，激活码会发送到你邮箱，没收到请看垃圾箱  </p><p>打开界面之后发现它的语言是英语，修改语言在Window -&gt; Application Options -&gt; Appearance -&gt; User language -&gt; Simplified Chinese，然后Apply，OK即可，重启软件后可以看到效果<br>由于我们是手动移动文件方式安装的，所以没有快捷方式，需要手动创建一个  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit visual_paradigm.desktop  <span class="comment">#创建快捷方式，内容如下</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=Visual Paradigm Community</span><br><span class="line">GenericName=UML design application</span><br><span class="line">Comment=Launch Visual Paradigm Community</span><br><span class="line">Icon=/opt/Visual_Paradigm_CE_16.0/Application/resources/vpuml.ico   <span class="comment">#图标</span></span><br><span class="line">Exec=/opt/Visual_Paradigm_CE_16.0/Visual_Paradigm   <span class="comment">#启动脚本</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Categories=Office;</span><br></pre></td></tr></table></figure><p>附加权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x visual_paradigm.desktop  <span class="comment">#添加运行权限</span></span><br><span class="line">sudo cp visual_paradigm.desktop /usr/share/applications/  <span class="comment">#复制到快捷方式文件夹</span></span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g3dnjcohuhj31hc0u0qaa.jpg" alt></p><h4 id="安装eclipse"><a href="#安装eclipse" class="headerlink" title="安装eclipse"></a>安装eclipse</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S  eclipse-jee     <span class="comment">#安装社区版</span></span><br></pre></td></tr></table></figure><p><strong>配置代码提示</strong>     </p><blockquote><p>进入 Window &gt; preferences &gt; Keys &gt; Content Assist选项卡<br>在列表中找到Content Assist，设置Binding为”Alt+/“<br>设置When 一项为 Ending Text，保存退出<br><a href="https://blog.csdn.net/BrotherDong90/article/details/49614027" rel="external nofollow noopener noreferrer" target="_blank">代码提示配置</a></p></blockquote><p><strong>安装Spring插件</strong>  </p><blockquote><p>需要先查看Eclipse的版本号：Help-&gt;About Eclipse<br>再去Spring<a href="http://spring.io/tools/sts/all" rel="external nofollow noopener noreferrer" target="_blank">插件官网</a>复制与Eclipse版本相对应的Update Sites 网址<br>在Eclipse的Help–&gt;Install New Software..中Add的Work  with地址，名字随便，地址填写上面复制的Update Sites网址<br>勾选四个带/Spring IDE的复选框,finsh完成,静待安装完成,重启Eclipse  </p></blockquote><p><strong>配置MyBatis的DTD</strong>  </p><blockquote><p>下载<a href="http://mybatis.org/dtd/mybatis-3-config.dtd" rel="external nofollow noopener noreferrer" target="_blank">mybatis-3-config.dtd</a>和<a href="http://mybatis.org/dtd/mybatis-3-mapper.dtd" rel="external nofollow noopener noreferrer" target="_blank">mybatis-3-mapper.dtd</a>文件<br>然后打开window -&gt; preferences下搜索xml catalog选项卡<br>点击Add按钮添加dtd文件路径，Key的话，分情况填<br>mybatis-3-config.dtd的Key:<code>-//mybatis.org//DTD Config 3.0//EN</code><br>mybatis-3-mapper.dtd的Key:<code>-//mybatis.org//DTD Mapper 3.0//EN</code>  </p></blockquote><p><strong>配置代码主题</strong>  </p><blockquote><p>进入<a href="http://www.eclipsecolorthemes.org/?q=" rel="external nofollow noopener noreferrer" target="_blank">Eclipse主题官网</a>下载你喜欢的主题的<code>.epf</code>文件，将其存放到一个单独的文件夹里<br>在菜单Windows -&gt; Preference -&gt; General -&gt; Appearance 选择黑色主题(Dark)<br>点击File -&gt; Import -&gt; General -&gt; Preferences -&gt; Next ;<code>Browse...</code>选择<code>.epf</code>文件路径，finish完成</p></blockquote><h4 id="安装和破解MyEclipse"><a href="#安装和破解MyEclipse" class="headerlink" title="安装和破解MyEclipse"></a>安装和破解MyEclipse</h4><p>Linux离线版下载<a href="https://www.myeclipsecn.com/download/" rel="external nofollow noopener noreferrer" target="_blank">myeclipse-ci-2018.12.0-offline-installer-linux.rar</a><br>Windows版+破解文件下载：<a href="https://pan.baidu.com/s/1BwPy91v6Wu1aiF9wvDsvHA" rel="external nofollow noopener noreferrer" target="_blank">https://pan.baidu.com/s/1BwPy91v6Wu1aiF9wvDsvHA</a><br>提取码：<code>i8co</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S rar   <span class="comment">#先安装rar解压程序</span></span><br></pre></td></tr></table></figure><p>右击<code>myeclipse-ci-2018.12.0-offline-installer-linux.rar</code>提取到此处，可以得到一个<code>myeclipse-ci-2018.12.0-offline-installer-linux</code>文件夹，进入文件夹可以看到一个run文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo cp myeclipse-ci-2018.12.0-offline-installer-linux.run /opt <span class="comment">#把run文件移动到/opt目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt  <span class="comment">#进入/opt文件夹</span></span><br><span class="line">mkdir MyEclipse\ CI     <span class="comment">#创建MyEclipes文件夹</span></span><br><span class="line">sudo chmod a+x myeclipse-ci-2018.12.0-offline-installer-linux.run   <span class="comment">#添加运行权限</span></span><br><span class="line">su <span class="comment">#切换root用户</span></span><br><span class="line">./myeclipse-ci-2018.12.0-offline-installer-linux.run    <span class="comment">#运行该文件</span></span><br></pre></td></tr></table></figure><p>安装位置选择<code>/opt/MyEclipse CI</code>下一步，安装完成  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/MyEclipse\ CI   <span class="comment">#进入安装目录</span></span><br><span class="line">sudo chmod -R 777 ./    <span class="comment">#给所有文件加执行权限</span></span><br></pre></td></tr></table></figure><p>双击<code>/opt/MyEclipse CI/myeclipse</code>文件，进行安装，选择项目地址为<code>~/myeclipse-workspace</code>文件夹(手动创建)<br>下一步，破解，进入下载的<code>MyEclipse2018.9.0破解文件/MyEclipse Cracker</code>文件夹打开终端  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo java -jar cracker.jar  <span class="comment">#使用java执行该脚本</span></span><br></pre></td></tr></table></figure><p>随便输入一个<code>Usercode</code>,下拉菜单选择<code>BLUE</code><br>连续点两次<code>Systeml...</code>,再点<code>Active</code><br>点<code>Tools -&gt; SaveProperties</code>,再点<code>Tools -&gt; ReplaceJarFile</code><br>点击<code>ReplaceJarFile</code>后，需要选择<code>myeclipse</code>安装路径下的<code>plugins</code>文件夹<br>最后点击打开按钮，程序会卡顿一会儿，耐心等待，直到出现<code>Done</code>提示，表明破解成功<br>复制<code>MyEclipse2018.9.0破解文件/patch</code>中所以的内容到<code>/opt/MyEclipse CI/plugins</code>，选择全部替换<br>打开<code>myeclipse</code>，选择<code>Windows -&gt; Preferences</code>输入<code>Subscription</code>查看是否破解成功  </p><p><span style="color:#ff0000;">注意：如果激活失败可以手动复制cracker.jar日志信息中的数据到MyEclipse的Enter License弹窗中，Usercode/LICENSEE对应Your subscriber ID输入框，LICENSE_KEY对应Subscription code输入框，Activate，选择I already have an activation code-previously retrieved单选按钮，Activate New，Skip Email跳过邮箱，Activation Code处输入ACTIVATION_KEY</span><br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g1qhhsxfzij30ln0403yn.jpg" alt>  </p><h4 id="Maven安装及配置"><a href="#Maven安装及配置" class="headerlink" title="Maven安装及配置"></a>Maven安装及配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S maven</span><br></pre></td></tr></table></figure><p>检查一下<code>~/.m2</code>文件夹是否存在，不存在则执行  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="built_in">help</span>:system     <span class="comment">#执行该命令的过程中，会生成~/.m2文件夹,并且会从Maven官网下载必要的依赖包</span></span><br></pre></td></tr></table></figure><p>复制settings.xml到<code>.m2</code>文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /opt/maven/conf/settings.xml ~/.m2        </span><br><span class="line">sudo gedit ~/.m2/settings.xml     <span class="comment">#配置maven仓库</span></span><br></pre></td></tr></table></figure><p>配置信息如下：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 本地仓库地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 阿里云镜像地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- 配置maven的jdk版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk-1.8<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Tomcat安装及配置"><a href="#Tomcat安装及配置" class="headerlink" title="Tomcat安装及配置"></a>Tomcat安装及配置</h4><p>下载<a href="https://tomcat.apache.org/download-90.cgi" rel="external nofollow noopener noreferrer" target="_blank">apache-tomcat-9.0.29.tar.gz</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-9.0.29.tar.gz       <span class="comment">#解压缩</span></span><br><span class="line">sudo chmod a+x apache-tomcat-9.0.29          <span class="comment">#添加权限</span></span><br><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/tomcat            <span class="comment">#新建 tomcat 文件夹，可以存放多个tomcat版本</span></span><br><span class="line">sudo mv apache-tomcat-9.0.29 /usr/<span class="built_in">local</span>/tomcat  <span class="comment">#移动</span></span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/tomcat/apache-tomcat-9.0.29/bin/</span><br><span class="line">sudo gedit /etc/profile     <span class="comment">#配置环境变量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> TOMCAT_HOME=/usr/<span class="built_in">local</span>/tomcat/apache-tomcat-9.0.29</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$TOMCAT_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> /etc/profile   <span class="comment">#使环境变量生效</span></span><br><span class="line">sudo /usr/<span class="built_in">local</span>/tomcat/apache-tomcat-9.0.29/bin/startup.sh   <span class="comment">#启动tomcat测试一下</span></span><br></pre></td></tr></table></figure><p>测试端口：<a href="http://localhost:8080/" rel="external nofollow noopener noreferrer" target="_blank"> http://localhost:8080/ </a>  </p><h4 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S redis    <span class="comment">#安装redis</span></span><br></pre></td></tr></table></figure><p>Redis配置文件位于<code>/etc/redis.conf</code><br>启动redis服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start redis.service  <span class="comment">#启动</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> redis.service  <span class="comment">#开机自启</span></span><br></pre></td></tr></table></figure><p>使用<code>redis-server</code>启动试试  </p><h4 id="安装Docker容器"><a href="#安装Docker容器" class="headerlink" title="安装Docker容器"></a>安装Docker容器</h4><p><a href="https://wiki.archlinux.org/index.php/Docker_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" rel="external nofollow noopener noreferrer" target="_blank">Arch Linux Docker</a>提供了两个版本，二选一喽（我选一）  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S docker    <span class="comment">#稳定版</span></span><br><span class="line">yaourt -S docker-git    <span class="comment">#开发版</span></span><br></pre></td></tr></table></figure><p>启动Docker服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker.service</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker.service</span><br></pre></td></tr></table></figure><p>安装完成后，运行下面的命令，验证是否安装成功  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker version     <span class="comment">#由于还没把docker用户加入用户组，所以运行docker命令需要加sudo</span></span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">sudo docker info</span><br></pre></td></tr></table></figure><p><code>Docker</code>需要用户具有<code>sudo</code>权限，为了避免每次命令都输入<code>sudo</code>，可以把用户加入<code>Docker</code>用户组(系统重启后生效)  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker <span class="variable">$USER</span>   <span class="comment">#自动创建docker用户并加入到用户组</span></span><br><span class="line">cat /etc/group  <span class="comment">#查看文件中有没有出现docker</span></span><br></pre></td></tr></table></figure><p>列出本机的镜像  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image ls     <span class="comment">#列出本机的所有image文件</span></span><br><span class="line">docker images       <span class="comment">#列出本机的所有image文件 (等同于docker image ls)</span></span><br></pre></td></tr></table></figure><p>想设置你自己的存储驱动选项和<code>docker</code>源，编辑 <code>/etc/docker/daemon.json</code> (如果不存在就自己创建)  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /etc/docker/daemon.json      #创建daemon.json文件</span><br><span class="line">#内容如下</span><br><span class="line">&#123;</span><br><span class="line">&quot;storage-driver&quot;: &quot;overlay2&quot;,   #存储驱动选项</span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]    #网易163源</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他源如下：  </p><blockquote><p>阿里源：<a href="https://pee6w651.mirror.aliyuncs.com" rel="external nofollow noopener noreferrer" target="_blank">https://pee6w651.mirror.aliyuncs.com</a><br>网易163源：<a href="http://hub-mirror.c.163.com" rel="external nofollow noopener noreferrer" target="_blank">http://hub-mirror.c.163.com</a><br>docker中国区源：<a href="https://registry.docker-cn.com" rel="external nofollow noopener noreferrer" target="_blank">https://registry.docker-cn.com</a><br>中国科技大学：<a href="https://docker.mirrors.ustc.edu.cn" rel="external nofollow noopener noreferrer" target="_blank">https://docker.mirrors.ustc.edu.cn</a>  </p></blockquote><p>修改重新启动<code>docker</code>服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p><strong>测试docker</strong><br>从远程仓库<a href="https://hub.docker.com/" rel="external nofollow noopener noreferrer" target="_blank">docker hub</a><code>pull</code>一个镜像到本地仓库<code>/var/lib/docker</code>，以<a href="https://hub.docker.com/_/hello-world" rel="external nofollow noopener noreferrer" target="_blank">hello-world</a>为例  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull hello-world     <span class="comment">#pull一个镜像</span></span><br><span class="line">docker images     <span class="comment">#查看本地镜像</span></span><br><span class="line">docker [container] run hello-world    <span class="comment">#运行hello-world镜像(本地仓库没有镜像，会自动运行远程仓库中的)</span></span><br></pre></td></tr></table></figure><p><code>hello-world</code>镜像运行之后输出一大段文本，然后进程会自动停止，有的镜像不会自动停止(例如：<code>Ubuntu</code>系统<code>ubuntu bash</code>)，这时候就需要手动杀死进程<code>docker container kill &lt;CONTAINER ID&gt;</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it ubuntu bash  <span class="comment">#使用bash运行ubuntu镜像</span></span><br></pre></td></tr></table></figure><p>再打开一个终端窗口，查看容器运行情况  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker container ls     <span class="comment">#列出本机正在运行的容器</span></span><br><span class="line">docker ps   <span class="comment">#列出本机正在运行的容器，等效于 docker container ls</span></span><br><span class="line">docker container ls --all     <span class="comment">#列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">docker ps --all   <span class="comment">##列出本机所有容器，包括终止运行的容器，等效于 docker container ls --all</span></span><br></pre></td></tr></table></figure><p>可以看到以下内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集装箱ID           图像                命令                   创建               状态                端口                名称</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES</span><br><span class="line">dadf7d24b756        ubuntu              <span class="string">"bash"</span>              6 seconds ago       Up 5 seconds                            hungry_stallman</span><br></pre></td></tr></table></figure><p>手动杀死<code>ubuntu</code>进程  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker [container] <span class="built_in">kill</span> dadf7d24b756    <span class="comment">#dadf7d24b756是上面查出的CONTAINER ID</span></span><br></pre></td></tr></table></figure><p>杀死进程，容器还在，如果容器也不要了，可以删除  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container ls --all     <span class="comment">#列出本机所有容器，包括终止运行的容器</span></span><br><span class="line">docker [container] rm &lt;CONTAINER ID&gt;...      <span class="comment">#删除指定容器</span></span><br></pre></td></tr></table></figure><p>容器是运行镜像之后产生的，你可以理解为镜像是个压缩包，容器就是解压出来的文件夹，如果还要把本地镜像也删除，可以  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker image rm &lt;REPOSITORY&gt;...     <span class="comment">#根据镜像名称删除image文件</span></span><br><span class="line">docker rmi &lt;IMAGE ID&gt;...     <span class="comment">#根据镜像id删除image文件</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：删除镜像之前，必须把该镜像的所有容器删除（包括正在运行的容器和停止使用的容器）才能删除镜像，否则会报错</span>  </p><p><strong>安装docker-compose</strong><br><a href="https://github.com/docker/compose/releases" rel="external nofollow noopener noreferrer" target="_blank">Compose</a> 是用于定义和运行多容器Docker应用程序的工具。通过Compose，您可以使用YAML文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务。要了解有关Compose的所有功能的更多信息，请参阅<a href="https://github.com/docker/docker.github.io/blob/master/compose/index.md#features" rel="external nofollow noopener noreferrer" target="_blank">功能列表</a>。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo -i <span class="comment">#使用 root 账号</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-`uname -s`-`uname -m` -o /usr/<span class="built_in">local</span>/bin/docker-compose  <span class="comment">#直接下载docker-compose文件到/usr/local/bin</span></span><br><span class="line">chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose  <span class="comment">#授权</span></span><br><span class="line"><span class="built_in">exit</span> <span class="comment">#退出root</span></span><br><span class="line">docker-compose --version    <span class="comment">#查看docker-compose版本</span></span><br></pre></td></tr></table></figure><h4 id="安装MySQL-MariaDB"><a href="#安装MySQL-MariaDB" class="headerlink" title="安装MySQL/MariaDB"></a>安装MySQL/MariaDB</h4><p>Archlinux的MySQL被称为MariaDB  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S mariadb      <span class="comment">#安装mariadb及其依赖包</span></span><br></pre></td></tr></table></figure><p>根据shell提示初始化数据目录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mysql_install_db --user=mysql --basedir=/usr --datadir=/var/lib/mysql</span><br></pre></td></tr></table></figure><p>启动MariaDB  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysqld</span><br></pre></td></tr></table></figure><p>为root用户设置一个新密码  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqladmin -u root password <span class="string">'123'</span>    <span class="comment">#设置root密码为123</span></span><br></pre></td></tr></table></figure><p>尝试登录以下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p123</span><br></pre></td></tr></table></figure><p>如果想要<code>MariaDb</code>开机自动启动，那么就运行以下命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> mysqld</span><br></pre></td></tr></table></figure><h4 id="使用Docker安装MySQL8-0"><a href="#使用Docker安装MySQL8-0" class="headerlink" title="使用Docker安装MySQL8.0"></a>使用Docker安装MySQL8.0</h4><p>前面说了<code>MariaDb</code>相当于<code>MySQL5.7</code>以下版本，如果我们要使用原版<code>MySQL8.0</code>，Arch Linux是不可以直接安装的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:8.0   <span class="comment">#拉取MySQL8.0镜像</span></span><br><span class="line">docker run -h <span class="string">"mysqlhost"</span> --name mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123 --restart=always -d mysql:8.0    <span class="comment">#启动镜像生成mysql容器</span></span><br></pre></td></tr></table></figure><p>启动镜像命令也可以参照下方给出参数进行适当调整，如果3306端口被占用，可以使用<code>netstat -tunlp | grep 3306</code>查看端口情况</p><blockquote><p>-h “mysqlhost”：容器主机名<br>–name mysql：容器名<br>-p 3306:3306：端口映射<br>-e MYSQL_ROOT_PASSWORD=123：设置root密码为123<br>-d mysql:8.0：指定镜像<br>–restart=always：docker服务启动时，自动启动容器，并且当容器停止时，尝试重启容器<span style="color:#ff0000;">(可选)</span><br>-v /usr:/var/lib/mysql：初始化数据到<code>/var/lib/mysql</code>目录<span style="color:#ff0000;">(可选)</span><br>–character-set-server=utf8mb4：设置mysql默认编码为utf8mb4 <span style="color:#ff0000;">(mysql8.0默认编码就是utf8mb4，所以无需设置)</span><br>–collation-server=utf8mb4_unicode_ci：设置mysql排序编码为utf8mb4_unicode_ci<span style="color:#ff0000;">(可选)</span>  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it mysql bash     <span class="comment">#进入容器主机</span></span><br></pre></td></tr></table></figure><p>接下来就和本地终端使用<code>mysql</code>一样了，不过<code>mysql8.0</code>的用户的加密方式变成了<code>caching_sha2_password</code>，使用<code>Navicat</code>和<code>DBeaver</code>这样的第三方数据库管理软件会无法连接，需要修改成<code>mysql_native_password</code>    </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">root@mysqlhost:/<span class="comment"># mysql -u root -p123       #使用密码登录MySQL8.0</span></span><br><span class="line">mysql: [Warning] Using a password on the <span class="built_in">command</span> line interface can be insecure.</span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection id is 10</span><br><span class="line">Server version: 8.0.16 MySQL Community Server - GPL</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">'help;'</span> or <span class="string">'\h'</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">'\c'</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; use mysql;   <span class="comment">#选择mysql数据表</span></span><br><span class="line">Reading table information <span class="keyword">for</span> completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; select host,user,plugin from user;   <span class="comment">#查询本地/远程用户及其加密方式(%表示远程用户，localhost表示本地用户)</span></span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| host      | user             | plugin                |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| %         | root             | caching_sha2_password |</span><br><span class="line">| localhost | mysql.infoschema | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | caching_sha2_password |</span><br><span class="line">| localhost | root             | caching_sha2_password |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'%'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123'</span>;     <span class="comment">#修改远程root用户的加密方式为mysql_native_password，并且新密码改为123 (当然，出于数据库安全考虑，我们一般都不会把root用户进行远程登录，而是创建其他用户并分配少量权限，这里我自己用就随便任性一下了)</span></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; ALTER USER <span class="string">'root'</span>@<span class="string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="string">'123'</span>;   <span class="comment">#修改本地root用户的加密方式为mysql_native_password</span></span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select host,user,plugin from user;   <span class="comment">#再次查询本地/远程用户及其加密方式</span></span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| host      | user             | plugin                |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">| %         | root             | mysql_native_password |</span><br><span class="line">| localhost | mysql.infoschema | caching_sha2_password |</span><br><span class="line">| localhost | mysql.session    | caching_sha2_password |</span><br><span class="line">| localhost | mysql.sys        | caching_sha2_password |</span><br><span class="line">| localhost | root             | mysql_native_password |</span><br><span class="line">+-----------+------------------+-----------------------+</span><br><span class="line">5 rows <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; flush privileges;    <span class="comment">#刷新权限</span></span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>这样一来，我们就可以使用<code>DBeaver</code>登录<code>MySQL8.0</code>啦  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g319dovj3zj30ku0m3wga.jpg" alt></p><h4 id="数据库管理神器DataGrip"><a href="#数据库管理神器DataGrip" class="headerlink" title="数据库管理神器DataGrip"></a>数据库管理神器DataGrip</h4><p><code>jetbrains</code>出品的数据库软件，破解同<a href="#安装intellij-idea">安装IntelliJ IDEA</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S datagrip</span><br></pre></td></tr></table></figure><h4 id="数据库管理神器Dbeaver"><a href="#数据库管理神器Dbeaver" class="headerlink" title="数据库管理神器Dbeaver"></a>数据库管理神器Dbeaver</h4><p>Dbeaver是一个免费的多平台数据库管理工具<br>它支持流行的数据库，如MySQL，MariaDB，PostgreSQL，SQLite，Oracle  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S dbeaver dbeaver-plugin-office dbeaver-plugin-svg-format</span><br></pre></td></tr></table></figure><p>打开软件会出现引导，类型选择<code>MariaDB</code>，它会在线下载驱动包，然后填写数据库名<code>mysql</code>，用户名及密码即可登录  </p><p>如果设置软件中文失败，可以手动在<code>/usr/lib/dbeaver/dbeaver.ini</code>追加以下内容：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Duser.language=zh</span><br></pre></td></tr></table></figure><h4 id="数据库管理神器Navicat-Premium"><a href="#数据库管理神器Navicat-Premium" class="headerlink" title="数据库管理神器Navicat Premium"></a>数据库管理神器Navicat Premium</h4><p><strong>安装</strong><br>Linux 下的 Navicat 运行是需要 <code>wine</code> 的，因为之前安装过 <code>deepin-tim</code>，wine 已经默认作为依赖包安装好了，除此之外，Navicat 安装包中也默认封装了一套 wine 组件  </p><p>找到 Linux 的 <code>Navicat Premium</code>，随便找个下载线路，点击<a href="https://www.navicat.com/en/products" rel="external nofollow noopener noreferrer" target="_blank">下载</a>，在 Chrome 中的下载列表复制下载文件的下载路径<code>(例如：http://download.navicat.com.cn/download/navicat121_premium_cs_x64.tar.gz)</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/navicat121_premium_cs_x64.git   <span class="comment">#克隆 Navicat 的 AUR 仓库</span></span><br><span class="line"><span class="built_in">cd</span> navicat121_premium_cs_x64 &amp;&amp; gedit PKGBUILD</span><br></pre></td></tr></table></figure><p>将<code>PKGBUILD</code>中的下载链接 <code>http://dn.navicat.com/download/navicat121_premium_cs_x64.tar.gz</code> 替换为 <code>http://download.navicat.com.cn/download/navicat121_premium_cs_x64.tar.gz</code>，保存修改，在文件夹目录运行一下命令安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">makepkg -sric   <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>安装成功可以在开始菜单启动，如果出现中文乱码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit /opt/navicat/start_navicat  <span class="comment">#编辑start_navicat文件，解决中文乱码</span></span><br></pre></td></tr></table></figure><p>把<code>export LANG=&quot;en_US.UTF-8&quot;</code> 改为 <code>export LANG=&quot;zh_CN.UTF-8&quot;</code>可以解决中文系统下乱码问题</p><p><strong>破解</strong><br>事先检查一下，在你的文件夹下确认是否拥有这些文件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.navicat64    <span class="comment"># navicat 配置文件夹路径</span></span><br><span class="line">~/.navicat64/user.reg   <span class="comment"># navicat 配置文件</span></span><br><span class="line">~/.navicat64/user_backup.reg    <span class="comment"># 配置备份文件 user_backup.reg，稍后我们自己创建</span></span><br></pre></td></tr></table></figure><p>首先打开 navicat，设置数据库连接信息,后面要记录信息并存放到创建的备份文件中，到时候修改数据库连接信息就会比较麻烦  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.navicat64/ &amp;&amp; ls -a  <span class="comment">#进入文件夹</span></span><br><span class="line">cp user.reg user_backup.reg <span class="comment">#复制配置文件 user.reg 为 user_backup.reg</span></span><br><span class="line">gedit user_backup.reg <span class="comment">#编辑 user_backup.reg</span></span><br></pre></td></tr></table></figure><p>把每个<code>[]</code>后的数字和重复性的摸块<code>(以空行为分隔，重复性的小段代码块)</code>这样的重复代码块全部删除,保存<br>最终效果类似于如下示例：  </p><details><summary>示例：user_backup.reg 文件</summary><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><span class="line">WINE REGISTRY Version 2</span><br><span class="line">;; All keys relative to \\User\\S-1-5-21-0-0-0-1000</span><br><span class="line"></span><br><span class="line"><span class="comment">#arch=win64</span></span><br><span class="line"></span><br><span class="line">[AppEvents\\Schemes\\Apps\\Explorer\\Navigating\\.Current] </span><br><span class="line"><span class="comment">#time=1d4b06f4ffe9cec</span></span><br><span class="line">@=<span class="string">""</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Accessibility\\Blind Access] </span><br><span class="line"><span class="comment">#time=1d4b06cc6848bf4</span></span><br><span class="line"><span class="string">"On"</span>=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Accessibility\\Keyboard Preference] </span><br><span class="line"><span class="comment">#time=1d4b06cc684826c</span></span><br><span class="line"><span class="string">"On"</span>=<span class="string">"1"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Accessibility\\ShowSounds] </span><br><span class="line"><span class="comment">#time=1d4b06cc6848df2</span></span><br><span class="line"><span class="string">"On"</span>=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Colors] </span><br><span class="line"><span class="comment">#time=1d4b06cc68cc918</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Desktop] </span><br><span class="line"><span class="comment">#time=1d4b06fa2eb5364</span></span><br><span class="line"><span class="string">"ActiveWndTrackTimeout"</span>=dword:00000000</span><br><span class="line"><span class="string">"BlockSendInputResets"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"CaretWidth"</span>=dword:00000001</span><br><span class="line"><span class="string">"ClickLockTime"</span>=dword:000004b0</span><br><span class="line"><span class="string">"DoubleClickHeight"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"DoubleClickWidth"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"DragFullWindows"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"DragHeight"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"DragWidth"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"FocusBorderHeight"</span>=dword:00000001</span><br><span class="line"><span class="string">"FocusBorderWidth"</span>=dword:00000001</span><br><span class="line"><span class="string">"FontSmoothing"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"FontSmoothingGamma"</span>=dword:00000578</span><br><span class="line"><span class="string">"FontSmoothingOrientation"</span>=dword:00000001</span><br><span class="line"><span class="string">"FontSmoothingType"</span>=dword:00000002</span><br><span class="line"><span class="string">"ForegroundFlashCount"</span>=dword:00000003</span><br><span class="line"><span class="string">"ForegroundLockTimeout"</span>=dword:00000000</span><br><span class="line"><span class="string">"IconTitleWrap"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"LowPowerActive"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"MenuShowDelay"</span>=<span class="string">"400"</span></span><br><span class="line"><span class="string">"UserPreferencesMask"</span>=hex:30,00,00,80,10,00,00,00</span><br><span class="line"><span class="string">"Wallpaper"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"WheelScrollChars"</span>=<span class="string">"3"</span></span><br><span class="line"><span class="string">"WheelScrollLines"</span>=<span class="string">"3"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\International] </span><br><span class="line"><span class="comment">#time=1d4b06f8b78a9b6</span></span><br><span class="line"><span class="string">"iCalendarType"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"iCountry"</span>=<span class="string">"86"</span></span><br><span class="line"><span class="string">"iCurrDigits"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"iCurrency"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"iDate"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"iDigits"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"iFirstDayOfWeek"</span>=<span class="string">"6"</span></span><br><span class="line"><span class="string">"iFirstWeekOfYear"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"iLDate"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"iLZero"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"iMeasure"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"iNegCurr"</span>=<span class="string">"2"</span></span><br><span class="line"><span class="string">"iNegNumber"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"iPaperSize"</span>=<span class="string">"9"</span></span><br><span class="line"><span class="string">"iTime"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"iTimePrefix"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"iTLZero"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"LC_CTYPE"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_MEASUREMENT"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_MONETARY"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_NUMERIC"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_PAPER"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_TELEPHONE"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"LC_TIME"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"Locale"</span>=<span class="string">"00000804"</span></span><br><span class="line"><span class="string">"Numshape"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"s1159"</span>=<span class="string">"\x4e0a\x5348"</span></span><br><span class="line"><span class="string">"s2359"</span>=<span class="string">"\x4e0b\x5348"</span></span><br><span class="line"><span class="string">"sCountry"</span>=<span class="string">"People's Republic of China"</span></span><br><span class="line"><span class="string">"sCurrency"</span>=<span class="string">"\xffe5"</span></span><br><span class="line"><span class="string">"sDate"</span>=<span class="string">"-"</span></span><br><span class="line"><span class="string">"sDecimal"</span>=<span class="string">"."</span></span><br><span class="line"><span class="string">"sGrouping"</span>=<span class="string">"3;0"</span></span><br><span class="line"><span class="string">"sLanguage"</span>=<span class="string">"CHS"</span></span><br><span class="line"><span class="string">"sList"</span>=<span class="string">","</span></span><br><span class="line"><span class="string">"sLongDate"</span>=<span class="string">"yyyy'\x5e74'M'\x6708'd'\x65e5'"</span></span><br><span class="line"><span class="string">"sMonDecimalSep"</span>=<span class="string">"."</span></span><br><span class="line"><span class="string">"sMonGrouping"</span>=<span class="string">"3;0"</span></span><br><span class="line"><span class="string">"sMonThousandSep"</span>=<span class="string">","</span></span><br><span class="line"><span class="string">"sNativeDigits"</span>=<span class="string">"0123456789"</span></span><br><span class="line"><span class="string">"sNegativeSign"</span>=<span class="string">"-"</span></span><br><span class="line"><span class="string">"sPositiveSign"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"sShortDate"</span>=<span class="string">"yyyy-M-d"</span></span><br><span class="line"><span class="string">"sThousand"</span>=<span class="string">","</span></span><br><span class="line"><span class="string">"sTime"</span>=<span class="string">":"</span></span><br><span class="line"><span class="string">"sTimeFormat"</span>=<span class="string">"H:mm:ss"</span></span><br><span class="line"><span class="string">"sYearMonth"</span>=<span class="string">"yyyy'\x5e74'M'\x6708'"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Keyboard] </span><br><span class="line"><span class="comment">#time=1d4b06cc684830c</span></span><br><span class="line"><span class="string">"KeyboardDelay"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"KeyboardSpeed"</span>=<span class="string">"31"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Mouse] </span><br><span class="line"><span class="comment">#time=1d4b06cc6848fa0</span></span><br><span class="line"><span class="string">"ActiveWindowTracking"</span>=dword:00000000</span><br><span class="line"><span class="string">"DoubleClickHeight"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"DoubleClickSpeed"</span>=<span class="string">"500"</span></span><br><span class="line"><span class="string">"DoubleClickWidth"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"MouseHoverHeight"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"MouseHoverTime"</span>=<span class="string">"400"</span></span><br><span class="line"><span class="string">"MouseHoverWidth"</span>=<span class="string">"4"</span></span><br><span class="line"><span class="string">"MouseSensitivity"</span>=<span class="string">"10"</span></span><br><span class="line"><span class="string">"MouseSpeed"</span>=<span class="string">"1"</span></span><br><span class="line"><span class="string">"MouseThreshold1"</span>=<span class="string">"6"</span></span><br><span class="line"><span class="string">"MouseThreshold2"</span>=<span class="string">"10"</span></span><br><span class="line"><span class="string">"SnapToDefaultButton"</span>=<span class="string">"0"</span></span><br><span class="line"><span class="string">"SwapMouseButtons"</span>=<span class="string">"0"</span></span><br><span class="line"></span><br><span class="line">[Control Panel\\Sound] </span><br><span class="line"><span class="comment">#time=1d4b06cc6846ed0</span></span><br><span class="line"><span class="string">"Beep"</span>=<span class="string">"Yes"</span></span><br><span class="line"></span><br><span class="line">[Environment] </span><br><span class="line"><span class="comment">#time=1d4b06cc7108bfe</span></span><br><span class="line"><span class="string">"TEMP"</span>=<span class="string">"C:\\users\\teaper\\Temp"</span></span><br><span class="line"><span class="string">"TMP"</span>=<span class="string">"C:\\users\\teaper\\Temp"</span></span><br><span class="line"></span><br><span class="line">[Keyboard Layout\\Preload] </span><br><span class="line"><span class="comment">#time=1d4b06cc68b598e</span></span><br><span class="line"><span class="string">"1"</span>=<span class="string">"00000409"</span></span><br><span class="line"></span><br><span class="line">[Software\\PremiumSoft\\Navicat\\Servers\\MySQL] </span><br><span class="line"><span class="comment">#time=1d4b47a4056b0cc</span></span><br><span class="line"><span class="string">"AllowInvalidHostName"</span>=dword:00000000</span><br><span class="line"><span class="string">"AltHTTPProxyUserName"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"AltHTTPUserName"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"AltSSHUserName"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"AltUserName"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"AskPassword"</span>=<span class="string">"false"</span></span><br><span class="line"><span class="string">"AutoConnect"</span>=dword:00000000</span><br><span class="line"><span class="string">"CACert"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"Cipher"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"ClientCert"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"ClientKey"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"ClientKeyPassword"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"Codepage"</span>=dword:0000fde9</span><br><span class="line"><span class="string">"Host"</span>=<span class="string">"localhost"</span></span><br><span class="line"><span class="string">"HTTP_Authen"</span>=dword:00000000</span><br><span class="line"><span class="string">"HTTP_CACert"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_CertAuth"</span>=dword:00000000</span><br><span class="line"><span class="string">"HTTP_ClientCert"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_ClientKey"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_EncodeBase64"</span>=dword:00000000</span><br><span class="line"><span class="string">"HTTP_Passphrase"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_Password"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_Proxy"</span>=dword:00000000</span><br><span class="line"><span class="string">"HTTP_ProxyHost"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_ProxyPassword"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_ProxyPort"</span>=dword:00001f90</span><br><span class="line"><span class="string">"HTTP_ProxyUsername"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_URL"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HTTP_Username"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"HttpProxySavePassword"</span>=dword:00000001</span><br><span class="line"><span class="string">"HttpSavePassword"</span>=dword:00000001</span><br><span class="line"><span class="string">"NamedPipeSocket"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"NSYDirtyFlag"</span>=dword:00000000</span><br><span class="line"><span class="string">"NSYHash"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"NSYID"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"NSYProjectUUID"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"NSYSyncHTTPProxyUserName"</span>=dword:00000001</span><br><span class="line"><span class="string">"NSYSyncHTTPUserName"</span>=dword:00000001</span><br><span class="line"><span class="string">"NSYSyncSSHUserName"</span>=dword:00000001</span><br><span class="line"><span class="string">"NSYSyncUserName"</span>=dword:00000001</span><br><span class="line"><span class="string">"PGSSLCRL"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"PGSSLMode"</span>=<span class="string">"smRequire"</span></span><br><span class="line"><span class="string">"PingInterval"</span>=dword:000000f0</span><br><span class="line"><span class="string">"Port"</span>=dword:00000cea</span><br><span class="line"><span class="string">"Pwd"</span>=<span class="string">"15057D7BA390"</span></span><br><span class="line"><span class="string">"QuerySavePath"</span>=<span class="string">"C:\\users\\teaper\\\x6211\x7684\x6587\x6863\\Navicat\\MySQL\\Servers\\MySQL"</span></span><br><span class="line"><span class="string">"RootCert"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"SaveClientKeyPassword"</span>=dword:00000000</span><br><span class="line"><span class="string">"ServerVersion"</span>=dword:00018729</span><br><span class="line"><span class="string">"ServerVersionStr"</span>=<span class="string">"10.1.37-MariaDB"</span></span><br><span class="line"><span class="string">"ServiceProvider"</span>=<span class="string">"spDefault"</span></span><br><span class="line"><span class="string">"SessionLimit"</span>=dword:00000000</span><br><span class="line"><span class="string">"SSH_AuthenMethod"</span>=<span class="string">"saPassword"</span></span><br><span class="line"><span class="string">"SSH_Host"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"SSH_Passphrase"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"SSH_Password"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"SSH_Port"</span>=dword:00000016</span><br><span class="line"><span class="string">"SSH_PrivateKey"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"SSH_SavePassphrase"</span>=dword:00000001</span><br><span class="line"><span class="string">"SSH_SavePassword"</span>=dword:00000001</span><br><span class="line"><span class="string">"SSH_UserName"</span>=<span class="string">""</span></span><br><span class="line"><span class="string">"UseAdvSettings"</span>=<span class="string">"false"</span></span><br><span class="line"><span class="string">"UseCharacterSet"</span>=dword:00000001</span><br><span class="line"><span class="string">"UseCompression"</span>=dword:00000000</span><br><span class="line"><span class="string">"UseHTTP"</span>=dword:00000000</span><br><span class="line"><span class="string">"UseNamedPipe"</span>=dword:00000000</span><br><span class="line"><span class="string">"UsePingInterval"</span>=dword:00000000</span><br><span class="line"><span class="string">"UserName"</span>=<span class="string">"root"</span></span><br><span class="line"><span class="string">"UseSSH"</span>=dword:00000000</span><br><span class="line"><span class="string">"UseSSL"</span>=dword:00000000</span><br><span class="line"><span class="string">"UseSSLAuthen"</span>=dword:00000000</span><br><span class="line"><span class="string">"VerifyCACert"</span>=dword:00000000</span><br><span class="line"><span class="string">"WeakCertValidation"</span>=dword:00000000</span><br><span class="line"></span><br><span class="line">[Software\\PremiumSoft\\NavicatPremium] </span><br><span class="line"><span class="comment">#time=1d4b479b4fb125c</span></span><br><span class="line"><span class="string">"AlreadyShowNavicateV121WelcomeScreen"</span>=dword:00000001</span><br><span class="line"><span class="string">"FirstFileAssociation"</span>=dword:00000001</span><br><span class="line"></span><br><span class="line">[Software\\Wine\\Fonts] </span><br><span class="line"><span class="comment">#time=1d4b479b3066690</span></span><br><span class="line"><span class="string">"Codepages"</span>=<span class="string">"936,936"</span></span><br><span class="line"><span class="string">"LogPixels"</span>=dword:00000060</span><br><span class="line"></span><br><span class="line">[Software\\Wine\\Fonts\\External Fonts] </span><br><span class="line"><span class="comment">#time=1d4b479b3066690</span></span><br><span class="line"></span><br><span class="line">[Software\\Wine\\MenuFiles] </span><br><span class="line"><span class="comment">#time=1d4b479b40c2732</span></span><br></pre></td></tr></table></figure></details><p>创建开机自动替换文件的脚本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit reset_navicat.sh</span><br></pre></td></tr></table></figure><p>内容如下,<code>teaper</code>是我的系统用户名,你自己替换为你自己的  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment">#！每次开机删除user.reg</span></span><br><span class="line">rm /home/teaper/.navicat64/user.reg</span><br><span class="line"><span class="comment">#！将备份脚本中的内容换成navicat读取的配置</span></span><br><span class="line">cp /home/teaper/.navicat64/user_backup.reg /home/teaper/.navicat64/user.reg</span><br></pre></td></tr></table></figure><p>给文件添加权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x reset_navicat.sh</span><br><span class="line">bash ~/.navicat64/reset_navicat.sh   <span class="comment">#24小时后运行一下试试有没有推迟试用时间</span></span><br></pre></td></tr></table></figure><p>以后增加数据库链接，只需在 user.reg 中把新增加的数据库链接添加到 user_backup.reg 文件中即可  </p><p><strong>脚本开机自启服务</strong><br>如果 24 小时候运行 <code>reset_navicat.sh</code> 没问题，就可以把 <code>reset_navicat.sh</code> 添加到开机自启的服务中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system  <span class="comment">#进入文件夹</span></span><br><span class="line">sudo gedit autonavicat.service <span class="comment">#创建autonavicat.service文件</span></span><br></pre></td></tr></table></figure><p><code>autonavicat.service</code>中内容如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=autonavicat </span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/home/teaper/.navicat64/reset_navicat.sh</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>添加权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod 644 autonavicat.service</span><br></pre></td></tr></table></figure><p>设置开机自启  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start autonavicat.service  <span class="comment">#启动一下试试</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> autonavicat.service <span class="comment">#添加到开机自启服务</span></span><br></pre></td></tr></table></figure><p>这样你每次开机都会重新计算试用天数，就可以<code>永远试用</code>下去啦！</p><details><summary style="color:#ff0000">问题：创建 Oracle 数据库链接时间提示 oarcle libray is not loaded</summary><p>首先下载对应 Oracle 数据库版本 <code>11.2.0.2.0 - 64bit</code> 的 <a href="https://www.oracle.com/database/technologies/instant-client/downloads.html" rel="external nofollow noopener noreferrer" target="_blank">instantclient-basic-windows.x64-11.2.0.2.0dbru.zip</a> 文件并解压，将解压得到的 <code>instantclient_11_2</code> 文件夹移动到 <code>/opt/navicat/Navicat</code> 目录中  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv instantclient_19_3 /opt/navicat/Navicat</span><br></pre></td></tr></table></figure><p>然后 Navicat 工具菜单的选项中，设置环境为 <code>instantclient_11_2</code> 文件夹下的 <code>oci.ddl</code><br>温馨提示： Navicat 连 Oracle 还是太鸡肋了，建议换上面的 DBeaver 或 DataGrip 吧！</p></details><h4 id="使用Docker安装oracle-11g数据库"><a href="#使用Docker安装oracle-11g数据库" class="headerlink" title="使用Docker安装oracle 11g数据库"></a>使用Docker安装oracle 11g数据库</h4><p>安装 Oracle 数据库之前，需要先<a href="#安装docker容器">安装Docker容器</a>和<a href="#数据库管理神器dbeaver">数据库管理神器Dbeaver</a>客户端  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker search oracle    <span class="comment">#搜索oracle相关的镜像，找到alexeiled/docker-oracle-xe-11g </span></span><br><span class="line">docker pull alexeiled/docker-oracle-xe-11g      <span class="comment">#拉取镜像</span></span><br><span class="line">docker images   <span class="comment">#查看镜像文件</span></span><br><span class="line"><span class="comment">#docker run -d --shm-size=2g -p 1521:1521 -p 8080:8080 alexeiled/docker-oracle-xe-11g  #启动镜像(官方方式)</span></span><br><span class="line">docker run -h <span class="string">"oraclehost"</span> --name <span class="string">"oracle"</span> -d -p 1521:1521 alexeiled/docker-oracle-xe-11g  <span class="comment">#启动镜像</span></span><br></pre></td></tr></table></figure><p><code>docker run -d --shm-size=2g -p 1521:1521 -p 8080:8080 alexeiled/docker-oracle-xe-11g</code>  是官方提供的启动镜像方式，容器NAMES是自动生成的，bash系统名是CONTAINER ID，特别不美观，所以使用<code>-h &quot;oraclehost&quot; --name &quot;oracle&quot;</code>方式启动镜像  </p><p>这里需要说明一下上面的参数：  </p><blockquote><p>-h “oraclehost”：指定容器的hostname为oracle<br>–name “oracle”：将容器命名为oracle<br>-d：在后台运行<br>-p: 端口映射，格式为：主机(宿主)端口:容器端口  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker ps   <span class="comment">#查看正在运行的容器</span></span><br><span class="line"><span class="comment">#-----------------结果如下------------------------</span></span><br><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">58d94af5df82        alexeiled/docker-oracle-xe-11g   <span class="string">"/bin/sh -c /start.sh"</span>   9 seconds ago       Up 8 seconds        0.0.0.0:1521-&gt;1521/tcp, 8080/tcp   oracle</span><br><span class="line"><span class="comment">#--------------------------------------------------</span></span><br><span class="line"><span class="comment">#docker rename brave_perlman oracle    #官方方式启动镜像，修改查出的NAMES容器名字brave_perlman为oracle(这里不需要修改)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it 58d94af5df82 bash   <span class="comment">#在bash终端中进入容器：58d94af5df82为容器CONTAINER ID，也可使用容器名oracle</span></span><br></pre></td></tr></table></figure><p>不出意外的话，我们可以看到是一个容器主机，以<code>root</code>用户登录的，主机名为<code>oraclehost</code>，我们可以使用<code>ps aux</code>命令查看容器中启动的进程  </p><p>接下来就直接使用内部虚拟<code>bash</code>登录<code>oracle</code>数据库  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">su oracle   <span class="comment">#容器中切换为oracle用户</span></span><br><span class="line"></span><br><span class="line">oracle@oraclehost:/$ sqlplus system/oracle      <span class="comment">#以普通用户登录，system是用户名，oracle是容器默认密码</span></span><br><span class="line">SQL*Plus: Release 11.2.0.2.0 Production on Sun May 12 13:37:11 2019</span><br><span class="line">Copyright (c) 1982, 2011, Oracle.  All rights reserved.</span><br><span class="line"></span><br><span class="line">ERROR:</span><br><span class="line">ORA-28002: the password will expire within 7 days   <span class="comment">#提示密码有效期7天</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Connected to:</span><br><span class="line">Oracle Database 11g Express Edition Release 11.2.0.2.0 - 64bit Production</span><br><span class="line">SQL&gt; alter user system identified by 123;      <span class="comment">#修改system用户的密码为123                     </span></span><br><span class="line">User altered.</span><br><span class="line">SQL&gt;</span><br></pre></td></tr></table></figure><p>修改成功，使用<code>exit</code>退出<code>oracle</code>，然后重新使用<code>sqlplus system/123</code>命令登录试试  </p><p>确定没问题，使用<code>exit</code>退出<code>oracle</code>，再使用<code>exit</code>退出容器主机，回到本机<br>我们暂时不需要使用oracle，所以先关闭oracle容器，需要的时候再启动  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps   <span class="comment">#查看正在运行的容器      </span></span><br><span class="line"><span class="comment">#--------------------------效果如下-----------------------------</span></span><br><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                              NAMES</span><br><span class="line">58d94af5df82        alexeiled/docker-oracle-xe-11g   <span class="string">"/bin/sh -c /start.sh"</span>   15 minutes ago      Up 15 minutes       0.0.0.0:1521-&gt;1521/tcp, 8080/tcp   oracle</span><br><span class="line">----------------------------------------------------------------</span><br><span class="line">docker stop 58d94af5df82    <span class="comment">#关闭CONTAINER ID为58d94af5df82的Oracle容器</span></span><br></pre></td></tr></table></figure><p><strong>下次使用oracle数据库</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -all      <span class="comment">#第一步：查看已关闭的容器</span></span><br><span class="line">docker start oracle   <span class="comment">#第二步：启动NAMES为oracle的容器 (也可以把NAMES换成CONTAINER ID)</span></span><br><span class="line">docker <span class="built_in">exec</span> -it oracle bash   <span class="comment">#第三步：在bash终端中进入容器</span></span><br><span class="line">su oracle   <span class="comment">#第四步：切换容器用户为oracle</span></span><br><span class="line">sqlplus system/123  <span class="comment">#第五步：使用123密码登录system用户的Oracle数据库</span></span><br></pre></td></tr></table></figure><p><strong>客户端软件连接Oracle数据库</strong><br>点击<code>DBeaver</code>左边的<code>新建连接</code>按钮，选择<code>Oracle</code>数据库，填写连接信息如图所示<br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2yuh7blg8j30kt0m0q4r.jpg" alt><br>单击<code>编辑驱动设置</code>按钮，单击窗口中的网址，进入oracl官网下载<a href="https://www.oracle.com/technetwork/cn/database/enterprise-edition/jdbc-112010-094555-zhs.html" rel="external nofollow noopener noreferrer" target="_blank">ojdbc6.jar</a>驱动包，单击<code>添加文件</code>按钮将其导入，导入成功点<code>ok</code><br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2yuh794a3j30dw0kogna.jpg" alt><br>最后就是测试连接信息<br><span style="color:#ff0000;">注意：如果测试连接报<code>Locale not recognized</code>错,手动在<code>/usr/lib/dbeaver/dbeaver.ini</code>追加以下内容：</span></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Duser.language=zh 或 -Duser.language=en</span><br></pre></td></tr></table></figure><h4 id="使用Docker安装SqlServer数据库"><a href="#使用Docker安装SqlServer数据库" class="headerlink" title="使用Docker安装SqlServer数据库"></a>使用Docker安装SqlServer数据库</h4><p>教程参照官方手册<a href="https://docs.microsoft.com/zh-cn/sql/linux/quickstart-install-connect-docker?view=sql-server-2017&pivots=cs1-bash" rel="external nofollow noopener noreferrer" target="_blank">【快速入门：使用 Docker 运行 SQL Server 容器映像】</a>，使用最新版的<a href="https://hub.docker.com/_/microsoft-mssql-server" rel="external nofollow noopener noreferrer" target="_blank">mssql server linux</a>镜像  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server  <span class="comment">#pull镜像</span></span><br></pre></td></tr></table></figure><p>如果想指定<code>pull</code>某个版本的镜像，例如：<code>2017-latest-ubuntu</code>或<code>2019-CTP2.2-ubuntu</code>，可在后面追加<code>:版本</code>，不指定则选择最新版本<span style="color:#ff0000;">(我是最新版)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/mssql/server:2017-latest-ubuntu   <span class="comment">#2017-latest-ubuntu版</span></span><br><span class="line">docker pull mcr.microsoft.com/mssql/server:2019-CTP2.2-ubuntu   <span class="comment">#2019-CTP2.2-ubuntu版</span></span><br></pre></td></tr></table></figure><p>使用<code>SQL Server 2019</code>的最新更新启动mssql-server实例，官方提供了一个<code>docker run -e &#39;ACCEPT_EULA=Y&#39; -e &#39;SA_PASSWORD=yourStrong(!)Password&#39; -p 1433:1433 -d mcr.microsoft.com/mssql/server:2017-latest</code>命令  </p><p>其中<code>:2017-latest</code>我不要<span style="color:#ff0000;">(如果是安装指定版本的需要)</span>，<code>yourStrong(!)Password</code>是数据库<code>SA</code>用户的密码，该密码必须符合8位以上大小写字母数字组合，这里我们用密码<code>Zxcvbnm%</code>将其替换，然后参照<a href="#使用docker安装oracle-11g数据库">使用Docker安装oracle 11g数据库</a>，给容器初始名字为<code>MSSQL_1433</code>，主机名为<code>mssqlhost</code>，修改后命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -h <span class="string">"mssqlhost"</span> --name MSSQL_1433 -e <span class="string">'ACCEPT_EULA=Y'</span> -e <span class="string">'SA_PASSWORD=Zxcvbnm%'</span> -p 1433:1433 -d mcr.microsoft.com/mssql/server</span><br></pre></td></tr></table></figure><p>查看正在运行的容器，<code>NAMES</code>自动变成我们指定的<code>MSSQL_1433</code>了  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker ps   <span class="comment">#查看正在运行的容器</span></span><br><span class="line">---------------------------------运行结果如下----------------------------</span><br><span class="line">CONTAINER ID        IMAGE                            COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">9054ca89f526        mcr.microsoft.com/mssql/server   <span class="string">"/opt/mssql/bin/sqls…"</span>   28 seconds ago      Up 27 seconds       0.0.0.0:1433-&gt;1433/tcp   MSSQL_1433</span><br><span class="line">------------------------------------------------------------------------</span><br><span class="line">docker <span class="built_in">exec</span> -it MSSQL_1433 bash        <span class="comment">#登录容器</span></span><br></pre></td></tr></table></figure><p>我们可以看到<code>root@mssqlhost:/#</code>这样一个容器主机，其中容器主机名自动变为指定的<code>mssqlhost</code>，接下来使用主机内部的<code>sqlcmd</code>工具登录<code>SQL Server</code>，方法是在容器主机上使用以下命令  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P <span class="string">'Zxcvbnm%'</span>    <span class="comment">#使用SA用户登录SQLserve数据库</span></span><br></pre></td></tr></table></figure><p>你也可以使用官方的命令，把上面两步(登录容器和登录SQLServer)合并一步到位  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it MSSQL_1433 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <span class="string">'Zxcvbnm%'</span></span><br></pre></td></tr></table></figure><p>使用<code>DBeaver</code>新建<code>SQL Server</code>登录连接，它会自动下载驱动包，登录信息如下 </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2zlhiyhfwj30i90k7abm.jpg" alt>  </p><p>确定没问题，使用<code>exit</code>直接退回本机，<br>我们暂时不需要使用<code>SqlServer</code>，所以先关闭<code>MSSQL_1433</code>容器，需要的时候再启动  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop MSSQL_1433    <span class="comment">#关闭MSSQL_1433容器</span></span><br></pre></td></tr></table></figure><p><strong>下次使用oracle数据库</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps -all      <span class="comment">#第一步：查看已关闭的MSSQL_1433容器</span></span><br><span class="line">docker start MSSQL_1433   <span class="comment">#第二步：启动MSSQL_1433容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it MSSQL_1433 /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P <span class="string">'Zxcvbnm%'</span>   <span class="comment">#第三步：一步到位登录SQL Server数据库</span></span><br></pre></td></tr></table></figure><h4 id="安装IntelliJ-IDEA"><a href="#安装IntelliJ-IDEA" class="headerlink" title="安装IntelliJ IDEA"></a>安装IntelliJ IDEA</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S intellij-idea-ultimate-edition</span><br></pre></td></tr></table></figure><p>下载成功之后执行运行程序，会进入安装页面<br>点击 <code>next</code> 下一步，选择 <code>Do not import settings</code> 单选按钮，点击 <code>ok</code><br>阅读条款，将滑块拉到最下面，点击 <code>Accept</code> 接受<br>选择你喜欢的 UI 主题，点击 <code>Next:Desktop Entry</code><br>选择启动方式，点击 <code>Next:Launcher Script</code><br>自定义一个路径，一般默认即可，点击 <code>Next:Default plugins</code><br>然后会进入一个功能选择界面，去勾选你需要的功能模块  </p><ul><li><strong>Java Frameworks</strong>：Hibernate、Spring、Struts、JavaEE、Velocity</li><li><strong>Build Tools</strong>：Maven</li><li><strong>Web Developent</strong>：HTML、JavaScript、CSS</li><li><strong>Version Controls</strong>：Git、GitHub</li><li><strong>Test Tools</strong>：JUnit</li><li><strong>Application Servers</strong>：Tomcat and TomEE</li><li><strong>Clouds</strong>：DisableAll (一个都不勾)</li><li><strong>Swing</strong>：Disable</li><li><strong>Android</strong>：Disable</li><li><strong>Other Tools</strong>：UML</li></ul><p>选择完记得重新点开确认一遍，有时候它会自己改回去，确认之后点击 <code>Next:Featured plugins</code><br>等待安装完成就可以点击 <code>Start using IntelliJ IDEA</code> 启动啦！  </p><h5 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h5><p>启动之后，如果是完整版，会提示需要许可协议，我的建议是去淘宝买一个号，一年才 15 元<span style="color:#ff0099;">（+微信：wobupeilianai）</span>，而且软件更新不用担心破解失效，大学生的话可以通过校园邮箱去申请，有点麻烦！  </p><p>不舍得花钱的，就只能通过 <a href="http://idea.lanyus.com/" rel="external nofollow noopener noreferrer" target="_blank">idea.lanyus.com</a> 去获取一个破解码  </p><blockquote><p>注意：激活前清除hosts中屏蔽域名, 激活后请将“0.0.0.0 account.jetbrains.com”及“0.0.0.0 <a href="http://www.jetbrains.com”添加到hosts文件中" rel="external nofollow noopener noreferrer" target="_blank">www.jetbrains.com”添加到hosts文件中</a></p></blockquote><h5 id="配置编辑器主题"><a href="#配置编辑器主题" class="headerlink" title="配置编辑器主题"></a>配置编辑器主题</h5><p>安装成功之后我们可以启动一下，随便创建个项目，打开之后会发现它的字体不太好看，然后我个人喜欢白色的 UI 主题，看着精神一点   </p><p>进入 <a href="http://color-themes.com/" rel="external nofollow noopener noreferrer" target="_blank">Color Themes</a> 下载你喜欢的编辑器代码高亮主题的 <code>.jar</code> 文件，将其存放到一个单独的文件夹里<br>在菜单 File -&gt; Import Settings 中导入 <code>.jar</code> 文件选择黑色主题（<strong>Tangid</strong>）或白色主题（<strong>Notepad++ Like</strong>）  </p><ul><li>Appearance&amp;Behavior -&gt; Appearance：字体（<strong>Open sans</strong>），字号<strong>15</strong>  </li><li>Editor -&gt; Font：字体（<strong>MonoSpaced</strong>），字号<strong>15</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Color Scheme -&gt; Color Scheme Font：字体（<strong>MonoSpaced</strong>），字号<strong>15</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Color Scheme -&gt; Console Font：字体（<strong>MonoSpaced</strong>），字号<strong>13</strong>，行高<strong>1.1</strong></li><li>Editor -&gt; Code Style -&gt; Java 中，选中 Wrapping and Braces 选项卡，在 Keep when reformatting 中勾选 <strong>Ensure rigth margin is not exceeded</strong> 实现代码自动换行</li><li>Editor -&gt; General -&gt; Code Completion 中，取消勾选 <strong>Match case</strong> 实现代码提示不区分大小写</li><li>Editor -&gt; General -&gt; Appearance 中勾选 <strong>Show line numbers</strong> 复选框显示行号</li><li>Editor –&gt; General –&gt; Editor Tabs 中勾选 <strong>Mark modified(×)</strong>  复选框，可以将修改过的文件标星</li></ul><p>UI 主题选择 File -&gt; Settings -&gt; Plugins，MarketPlace 选项卡，搜 Material Theme UI 安装即可或者使用<a href="https://blog.jetbrains.com/idea/2019/03/brighten-up-your-day-add-color-to-intellij-idea/" rel="external nofollow noopener noreferrer" target="_blank">自定义 UI 主题 Gray</a> <span style="color:#E98B2A">（也可以在 Plugins 选项卡点击右边设置 -&gt; Install plugin from disk -&gt; 你下载的 jar 包文件）</span></p><p><span style="color:#ff0000;">注意：上面的 MonoSpaced 字体是个人安装的，Windows 用户没有可以想办法去下载，或者换成别的字体也可以，这里就仁者见仁智者见智了</span>  </p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g688ka5lvij31hc0u0jwl.jpg" alt></p><h4 id="安装Pycharm"><a href="#安装Pycharm" class="headerlink" title="安装Pycharm"></a>安装Pycharm</h4><p>这个 <code>ide</code> 工具也是 <code>jetbrains</code> 全家桶中的，主要用来写 <code>Python</code> 代码，破解参照 <a href="#安装intellij-idea">IDEA</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S pycharm-professional      #pycharm-professional 是专业版</span><br></pre></td></tr></table></figure><h4 id="安装Android-Studio"><a href="#安装Android-Studio" class="headerlink" title="安装Android Studio"></a>安装Android Studio</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S android-studio</span><br></pre></td></tr></table></figure><h4 id="安装虚拟机-VMware"><a href="#安装虚拟机-VMware" class="headerlink" title="安装虚拟机 VMware"></a>安装虚拟机 VMware</h4><p>虚拟机需要Linux-headers头文件来支持虚拟化  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S linux-headers</span><br></pre></td></tr></table></figure><p>开始安装虚拟机软件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay vmware  <span class="comment"># 选择11 archlinuxcn/vmware-workstation 15.0.2-3 (400.9 MiB 829.2 MiB)</span></span><br></pre></td></tr></table></figure><p>输入编号11，按照提示操作即可；安装成功启动输入以下序列号  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GV7N2-DQZ00-4897Y-27ZNX-NV0TD</span><br></pre></td></tr></table></figure><p>如果虚拟机中的镜像系统无法联网，并且打开<code>虚拟网络编辑器</code>出现<code>network configuration is missing. ensure that /etc/vmware/networking exists</code>的 <code>error</code>弹框<br>则选择<code>start</code>或<code>enable</code>以下三个服务  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vmware-networks.service     <span class="comment">#网络服务</span></span><br><span class="line">sudo systemctl start vmware-usbarbitrator.service       </span><br><span class="line">sudo systemctl start vmware-hostd.service     </span><br><span class="line"></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmware-networks.service </span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmware-usbarbitrator.service  </span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmware-hostd.service</span><br></pre></td></tr></table></figure><p>启动完服务记得重新加载VMware模块  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe -a vmw_vmci vmmon</span><br></pre></td></tr></table></figure><p>最后安装虚拟机的一些依赖包，使虚拟机和本机可以复制粘贴，并且窗口自适应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S open-vm-tools <span class="comment">#vm 粘贴工具</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> vmtoolsd.service  <span class="comment">#启动 vmtoolsd 服务</span></span><br><span class="line">sudo pacman -S xf86-video-vmware xf86-input-vmmouse libdnet uriparser libsigc++ libmspack <span class="comment">#窗口自适应依赖包</span></span><br></pre></td></tr></table></figure><h4 id="安装虚拟机-Virtualbox"><a href="#安装虚拟机-Virtualbox" class="headerlink" title="安装虚拟机 Virtualbox"></a>安装虚拟机 Virtualbox</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virtualbox  </span><br><span class="line">正在解决依赖关系...  </span><br><span class="line">      :: 有 2 个软件包可提供 VIRTUALBOX-HOST-MODULES ：  </span><br><span class="line">      :: 软件库 community  </span><br><span class="line">       1) virtualbox-host-dkms  2) virtualbox-host-modules-arch  </span><br><span class="line"></span><br><span class="line">      输入某个数字 ( 默认=1 ): 2</span><br></pre></td></tr></table></figure><p>执行上面安装命令后，有两个选择，按照<a href="https://wiki.archlinux.org/index.php/VirtualBox_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" rel="external nofollow noopener noreferrer" target="_blank">Arch wiki</a>的解释：<br>如果在用默认的 linux 内核，建议安装virtualbox-host-modules-arch<br>如果用了其它的内核，需要安装 virtualbox-host-dkms  </p><p>第一种virtualbox-host-dkms安装：输入1的时候,等待安装完成  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virtualbox   <span class="comment">#再安装virtualbox</span></span><br><span class="line">sudo pacman -S linux-headers    <span class="comment">#安装Linux头文件内核</span></span><br></pre></td></tr></table></figure><p>第二种virtualbox-host-modules-arch安装：输入2的时候，也就是我目前安装的方式  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S virtualbox   <span class="comment">#也要安装virtualbox</span></span><br></pre></td></tr></table></figure><p><span style="color:#ff0000;">注意：如果再创建虚拟机后启动虚拟机时报错，大意是： 不是模块没有加载，就是有权限许可问题，用 /sbin/vboxconfig 解决问题！但是，在 /sbin 目录里面根本没有这条命令，那么可以使用下面这条命令重新加载模块</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vboxreload</span><br></pre></td></tr></table></figure><h4 id="安装-Visual-Studio-Code"><a href="#安装-Visual-Studio-Code" class="headerlink" title="安装 Visual Studio Code"></a>安装 Visual Studio Code</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay vscode</span><br></pre></td></tr></table></figure><p>选择一个下载量最高的<code>aur/visual-studio-code-bin 1.30.1-1 (+781 28.27%)</code>，输入编号，一路回车  </p><blockquote><center>插件列表</center><p><a href="#">Material</a>　　　#一款冷门主题<br><a href="#">One Dark Pro</a>　　　#源于Atom的主题<br><a href="https://marketplace.visualstudio.com/items?itemName=Equinusocio.vsc-material-theme" rel="external nofollow noopener noreferrer" target="_blank">Material Theme</a>　　　#Visual Studio Code现在最神奇的主题<br><a href="#">Power Mode</a>　　　#打字泡沫  </p><p><a href="#">vscode-icon</a>　　　#树目录加上图标<br><a href="#">Path Intellisense</a>　　　#默认路径补全<br><a href="#">Document this</a>　　　#快速注释<br><a href="#">Project Manager</a>　　　#多个项目切换<br><a href="#">vscode-fileheader</a>　　　#顶部注释模板<br><a href="#">filesize</a>　　　#底部显示文件大小  </p><p><a href="#">terminal</a>　　　#终端(右键菜单启动)<br><a href="#">open-in-browser</a> <a href="https://github.com/SudoKillMe/vscode-extensions-open-in-browser/issues/28#issuecomment-425792433" rel="external nofollow noopener noreferrer" target="_blank">【#问题：打开浏览器失败！请检查您是否正确安装了浏览器！】</a>     #打开浏览器插件  </p><p><a href="#">Atuo Rename Tag</a>　　　#同时修改html标签首  </p><p><a href="https://github.com/jdneo/vscode-leetcode/blob/master/docs/README_zh-CN.md" rel="external nofollow noopener noreferrer" target="_blank">vscode-leetcode</a>　　　#leetcode刷题助手  </p></blockquote><h4 id="安装Node-js及GitBook"><a href="#安装Node-js及GitBook" class="headerlink" title="安装Node.js及GitBook"></a>安装Node.js及GitBook</h4><p>安装<strong>Node.js</strong>及<strong>npm</strong>包  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yay -S nodejs npm       <span class="comment">#安装</span></span><br><span class="line">  </span><br><span class="line">node -v     <span class="comment">#查看node.js版本</span></span><br><span class="line">npm -v      <span class="comment">#查看npm版本</span></span><br><span class="line"></span><br><span class="line">sudo npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org    <span class="comment">#更换npn镜像为淘宝镜像</span></span><br><span class="line">sudo npm config list    <span class="comment">#查看下配置是否生效</span></span><br></pre></td></tr></table></figure><p><strong>安装gitbook</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install gitbook-cli -g      <span class="comment">#使用npm安装,前提是你先安装了Node.js</span></span><br></pre></td></tr></table></figure><p>gitbook使用方式可以使用<code>gitbook -help</code>命令查看  </p><p>安装<strong>PDF</strong>输出  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -v &amp;&amp; wget -nv -O- https://download.calibre-ebook.com/linux-installer.sh | sudo sh /dev/stdin  <span class="comment">#安装PDF阅读器calibre-ebook</span></span><br><span class="line">sudo npm install gitbook-pdf -g  <span class="comment">#安装gitbook pdf插件</span></span><br></pre></td></tr></table></figure><p>使用 <code>gibook pdf</code> 命令输出为PDF文件  </p><p><strong>发布</strong>到<a href="https://pages.github.com/" rel="external nofollow noopener noreferrer" target="_blank">github Pages</a>上，首先需要先安装 gh-pages  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i gh-pages -g   <span class="comment">#安装gh-pages</span></span><br><span class="line">gh-pages --<span class="built_in">help</span>     <span class="comment">#查看帮助</span></span><br></pre></td></tr></table></figure><p>如已经通过 <code>gitbook build</code>或者<code>gitbook init + gitbook seve</code> 命令构建好了书籍，则会在目录下有个<code>_book</code> 子目录，该目录存放着本书籍的静态网页<br>上传之前需要先<code>git init</code>初始化本目录，然后<code>git add .</code>添加到git暂存区，紧接着<code>git commit</code>，<code>git remote add origin</code>加入仓库地址，最后一步使用以下命令代替<code>git push</code>提交  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gh-pages -d _book</span><br></pre></td></tr></table></figure><p>提交成功后，github远程仓库会有一个<code>gh-pages</code>分支  </p><blockquote><p>gh-pages 分支：保存书籍编译以后的静态网页  </p></blockquote><p>通过上面的<code>gh-pages -d _book</code>命令，静态网页就已经部署在<code>github page</code>上了，但是.md的源文件还没上传，这里我们创建一个忽略文件<code>.gitignore</code>，内容如下：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_book       <span class="comment">#忽略_book文件夹</span></span><br></pre></td></tr></table></figure><p>然后使用git的<code>git add .</code>，<code>git commit</code>，<code>git push -u origin master</code>提交，这样远程就会有一个master分支  </p><blockquote><p>master 分支：保存书籍的.md源码  </p></blockquote><h4 id="命令行手册tldr"><a href="#命令行手册tldr" class="headerlink" title="命令行手册tldr"></a>命令行手册tldr</h4><p>Linux那么多命令的用法记不住怎么办？<code>例如：tar具体参数</code>不知道是什么了？每次上网查太麻烦，这里就推荐<a href="https://github.com/tldr-pages/tldr" rel="external nofollow noopener noreferrer" target="_blank">tldr</a>工具，还有<a href="https://tldr.ostera.io/" rel="external nofollow noopener noreferrer" target="_blank">tldr网页版</a>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g tldr    <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>使用方法，例如：例如：tar具体使用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">tldr tar    <span class="comment">#tldr 命令</span></span><br><span class="line">-----------------------------------显示结果如下------------------------------</span><br><span class="line">tar</span><br><span class="line"></span><br><span class="line">  Archiving utility.</span><br><span class="line">  Often combined with a compression method, such as gzip or bzip.</span><br><span class="line"></span><br><span class="line">  - Create an archive from files:</span><br><span class="line">    tar -cf target.tar file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - Create a gzipped archive:</span><br><span class="line">    tar -czf target.tar.gz file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - Extract an archive <span class="keyword">in</span> a target directory:</span><br><span class="line">    tar -xf source.tar -C directory</span><br><span class="line"></span><br><span class="line">  - Extract a gzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">    tar -xzf source.tar.gz</span><br><span class="line"></span><br><span class="line">  - Extract a bzipped archive <span class="keyword">in</span> the current directory:</span><br><span class="line">    tar -xjf source.tar.bz2</span><br><span class="line"></span><br><span class="line">  - Create a compressed archive, using archive suffix to determine the compression program:</span><br><span class="line">    tar -caf target.tar.xz file1 file2 file3</span><br><span class="line"></span><br><span class="line">  - List the contents of a tar file:</span><br><span class="line">    tar -tvf source.tar</span><br><span class="line"></span><br><span class="line">  - Extract files matching a pattern:</span><br><span class="line">    tar -xf source.tar --wildcards <span class="string">"*.html"</span></span><br></pre></td></tr></table></figure><h4 id="安装kchmviewer-xchm"><a href="#安装kchmviewer-xchm" class="headerlink" title="安装kchmviewer / xchm"></a>安装kchmviewer / xchm</h4><p>做开发的经常看一些类似于<a href="http://doc.d8jd.com/" rel="external nofollow noopener noreferrer" target="_blank">Java+API文档中文版.chm</a>的<code>.chm</code>文件，就需要这个软件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S kchmviewer</span><br></pre></td></tr></table></figure><p><span style="color:#ff0000">注意：如果打开的文档乱码，可能是文件路径存在中文的原因</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-------------------------其他类似软件-----------------</span><br><span class="line">sudo pacman -S xchm</span><br></pre></td></tr></table></figure><h4 id="安装krita绘图软件"><a href="#安装krita绘图软件" class="headerlink" title="安装krita绘图软件"></a>安装krita绘图软件</h4><p><a href="https://krita.org" rel="external nofollow noopener noreferrer" target="_blank">Krita</a> 是一款自由、免费、开源的数字绘画软件，针对概念美术、插图、布景、材质和电影特效行业的需求而设计，我主要是作为Linux下Photo Shop的替代品来使用  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S krita</span><br></pre></td></tr></table></figure><h4 id="图片处理软件GIMP"><a href="#图片处理软件GIMP" class="headerlink" title="图片处理软件GIMP"></a>图片处理软件GIMP</h4><p>Linux下的photoshop解决方案  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gimp</span><br></pre></td></tr></table></figure><h4 id="团队协作工具slack"><a href="#团队协作工具slack" class="headerlink" title="团队协作工具slack"></a>团队协作工具slack</h4><p><a href="https://slack.com/features" rel="external nofollow noopener noreferrer" target="_blank">slack</a>采用聊天群组+大规模工具集成+文件整合+统一搜索四大功能，帮团队打造了一条流畅的消息总线，弥补了团队协作中的沟通断层</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S slack-desktop</span><br></pre></td></tr></table></figure><h4 id="翻译神器Goldendict"><a href="#翻译神器Goldendict" class="headerlink" title="翻译神器Goldendict"></a>翻译神器Goldendict</h4><p><a href="http://goldendict.org/" rel="external nofollow noopener noreferrer" target="_blank">Goldendict</a>是Linux下开源的翻译软件，支持屏幕取词/选词，还可以集成谷歌翻译，有道翻译，百度翻译的词库<br><a href="https://aur.archlinux.org/packages/youdao-dict/" rel="external nofollow noopener noreferrer" target="_blank">有道翻译</a>也有Linux版，但是好久没更新，启动也特别慢，还有各种广告</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S goldendict   <span class="comment">#默认社区版，一路回车即可</span></span><br></pre></td></tr></table></figure><p>安装成功之后，启动<code>Goldendict</code>，我们会发现它是英文的，而且只有维基百科的翻译<br>先配置软件语言，单击<code>Edit</code> -&gt; <code>Preferences</code>，在<code>Inteface</code>选项卡中<br>勾选<code>Start with System</code>复选框，选择<code>Inteface language</code>为中文，<code>Display style</code>为<code>Modern</code>，重启软件后生效<br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2bv50knftj30ii0drq4x.jpg" alt><br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2bs3ca42rj30if0ds75h.jpg" alt><br>默认只有维基百科一个搜索，现在给它添加谷歌翻译，需要安装<code>translate-shell</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:soimort/translate-shell.git</span><br><span class="line"><span class="built_in">cd</span> translate-shell/</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>打开<code>GoldenDict</code>，在菜单编辑 -&gt; 词典 -&gt; 词典来源 -&gt; 程序中，点击添加，勾上已启用，在类型中选<code>Plain</code> Text，在名称填写google，在命令中输入  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">trans -e google -s auto -t zh-CN -show-original y -show-original-phonetics n -show-translation y -no-ansi -show-translation -phonetics n -show-prompt-message n -show-languages n -show-original-dictionary n -show-dictionary n -show-alternatives n <span class="string">"%GDWORD%"</span></span><br></pre></td></tr></table></figure><p>最终效果如下图所示，命令中每个参数的具体含义可以在<a href="https://github.com/soimort/translate-shell" rel="external nofollow noopener noreferrer" target="_blank">translate-shell</a>的<code>README.md</code>中找到说明<br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g2bs3s0r00j30qc0fg403.jpg" alt><br>最后，你可以在<code>Tweaks</code>中把它添加到自启程序  </p><h4 id="有道云笔记"><a href="#有道云笔记" class="headerlink" title="有道云笔记"></a>有道云笔记</h4><p>使用npm打包的跨平台<a href="https://github.com/jamasBian/youdao-note-electron" rel="external nofollow noopener noreferrer" target="_blank">有道云笔记</a>，在Downloads目录打开终端  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/jamasBian/youdao-note-electron.git     <span class="comment">#克隆仓库</span></span><br><span class="line"><span class="built_in">cd</span> youdao-note-electron     <span class="comment">#进入文件夹</span></span><br><span class="line">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org  <span class="comment">#安装依赖和运行应用程序 </span></span><br><span class="line">cnpm install    <span class="comment">#安装cnpm</span></span><br><span class="line">cp ./assets/icon.png ./node_modules/_electron@4.1.1@electron/dist/resources/</span><br><span class="line">npm start   <span class="comment">#运行有道云笔记</span></span><br></pre></td></tr></table></figure><p>不出意外应该可以运行有道云笔记，不过这还不是一个应用程序，这只相当于调试代码，还没打包成软件  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build:linux   <span class="comment">#打包成Linux应用程序</span></span><br></pre></td></tr></table></figure><p>终端显示应用程序打到了<code>dist/Youdao-Note-Electron-linux-x64</code>文件夹，该文件夹下有一个<code>Youdao-Note-Electron</code>的run文件，接下来我们需要把<code>Youdao-Note-Electron-linux-x64</code>文件夹移动到指定目录，再创建一个快捷方式即可  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r dist/Youdao-Note-Electron-linux-x64 /opt     <span class="comment">#将文件夹复制到opt目录</span></span><br><span class="line"><span class="built_in">cd</span> /opt/Youdao-Note-Electron-linux-x64  <span class="comment">#进入文件夹</span></span><br><span class="line">sudo gedit youdao-note.desktop     <span class="comment">#创建快捷方式</span></span><br></pre></td></tr></table></figure><p>在<code>youdao-note.desktop</code>填入如下内容  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Name=youdao-note</span><br><span class="line">Comment=Cross platform ShadowsocksR GUI client built with electron</span><br><span class="line">Exec=<span class="string">"/opt/Youdao-Note-Electron-linux-x64/Youdao-Note-Electron"</span> %U</span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line">Type=Application</span><br><span class="line">Icon=/opt/Youdao-Note-Electron-linux-x64/resources/icon.png</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">StartupWMClass=youdao-note</span><br><span class="line">Categories=Development;</span><br></pre></td></tr></table></figure><p>附加运行权限  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod a+x youdao-note.desktop  <span class="comment">#添加运行权限</span></span><br><span class="line">sudo cp youdao-note.desktop /usr/share/applications/  <span class="comment">#复制到快捷方式文件夹</span></span><br></pre></td></tr></table></figure><h4 id="免费的股市软件JStock"><a href="#免费的股市软件JStock" class="headerlink" title="免费的股市软件JStock"></a>免费的股市软件JStock</h4><p><a href="https://jstock.org/" rel="external nofollow noopener noreferrer" target="_blank">JStock</a>可以轻松跟踪您的库存投资。它提供组织良好的股票市场信息，帮助您确定最佳投资策略。  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S jstock</span><br></pre></td></tr></table></figure><h3 id="【Mac美化篇】"><a href="#【Mac美化篇】" class="headerlink" title="【Mac美化篇】"></a>【Mac美化篇】</h3><p>之前的美化是不是意犹未尽，由于还没安装基本的软件Chrome以及git之类的，所以美化不得已排在软件安装篇后面  </p><h4 id="窗口主题"><a href="#窗口主题" class="headerlink" title="窗口主题"></a>窗口主题</h4><p><strong>主题一：</strong> <a href="https://github.com/vinceliuice/vimix-gtk-themes" rel="external nofollow noopener noreferrer" target="_blank">VimixDark-Gtk-Theme</a>(推荐)<br>下载之后解压，进入目录有一个shell执行文件，进入终端输入安装命令：  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./Vimix-installer.sh</span><br></pre></td></tr></table></figure><p>安装成功，可以在gnome-tweak-tool中的外观处选择主题  </p><p><strong>主题二：</strong> 其他Mac主题<a href="https://github.com/vinceliuice/Mojave-gtk-theme" rel="external nofollow noopener noreferrer" target="_blank">Mac OS Mojave </a>;下载之后解压到<code>~/.themes</code>中即可</p><h4 id="图标主题"><a href="#图标主题" class="headerlink" title="图标主题"></a>图标主题</h4><p><span style="color:#ff0000;">注意：图标主题如果下载慢可以用手机热点</span>  </p><p><strong>主题一：</strong> <a href="https://github.com/keeferrourke/la-capitaine-icon-theme" rel="external nofollow noopener noreferrer" target="_blank">La Capitaine</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/icons</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/keeferrourke/la-capitaine-icon-theme.git</span><br></pre></td></tr></table></figure><p>在gnome-tweak-tool中的外观处选择图标  </p><p><strong>主题二：</strong> MacOS<a href="https://git.opendesktop.org/umayanga/Cupertino-macOS-iCons" rel="external nofollow noopener noreferrer" target="_blank">图标</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/share/icons</span><br><span class="line">git <span class="built_in">clone</span> https://git.opendesktop.org/umayanga/Cupertino-macOS-iCons.git</span><br></pre></td></tr></table></figure><h4 id="指针主题"><a href="#指针主题" class="headerlink" title="指针主题"></a>指针主题</h4><p><strong>主题一：</strong><a href="https://www.opendesktop.org/p/1148692/" rel="external nofollow noopener noreferrer" target="_blank">Capitaine Cursors</a><br>选择一个颜色下载(例如：capitaine-cursors-r3.tar.gz)，右击提取到当前目录  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r capitaine-cursors-r3 /usr/share/icons   <span class="comment">#复制文件夹到icons目录</span></span><br></pre></td></tr></table></figure><p>在gnome-tweak-tool中的Appearance处选择Cursor鼠标指针主题  </p><p><strong>主题二：</strong><a href="https://www.opendesktop.org/p/999999/" rel="external nofollow noopener noreferrer" target="_blank">OpenZone</a><br>直接下载<code>openzone-cursors-1.2.8.tar.xz</code>包，右击提取到当前目录会有一个<code>openzone-cursors-1.2.8</code>文件夹，解压<code>openzone-cursors-1.2.8/openzone-cursors</code>下的<code>OpenZone_*.tar.xz</code>文件，才是需要复制到icons目录的文件夹<br>例如：右击<code>OpenZone_Black.tar.xz</code>提取到此处会得到<code>OpenZone_Black</code>文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp -r OpenZone_Black /usr/share/icons</span><br></pre></td></tr></table></figure><h4 id="安装gnome-shell-extensions"><a href="#安装gnome-shell-extensions" class="headerlink" title="安装gnome-shell-extensions"></a>安装gnome-shell-extensions</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S gnome-shell-extensions</span><br><span class="line">sudo pacman -S chrome-gnome-shell</span><br></pre></td></tr></table></figure><p>然后在谷歌商店直接搜<code>Gnome Shell Integration</code>进行安装，需要更多美化插件，可以通过<a href="https://extensions.gnome.org" rel="external nofollow noopener noreferrer" target="_blank">Gnome Shell Integration</a>下载和安装<br><span style="color:#ff0000;">注意：谷歌商店和Gnome Shell Integration需要翻墙，如果下载慢可以用手机热点</span>  </p><blockquote><p><a href="https://extensions.gnome.org/extension/1217/appfolders-manager/" rel="external nofollow noopener noreferrer" target="_blank">Appfolders管理扩展</a>开始菜单可以创建文件夹管理快捷方式<span style="color:#ff0000;">（gnome3.34已包含此功能）</span><br><a href="https://extensions.gnome.org/extension/750/openweather/" rel="external nofollow noopener noreferrer" target="_blank">状态栏天气插件</a>配置<a href="https://lbs.qq.com/tool/getpoint/index.html" rel="external nofollow noopener noreferrer" target="_blank">坐标</a><br><a href="https://extensions.gnome.org/extension/120/system-monitor/" rel="external nofollow noopener noreferrer" target="_blank">状态栏系统监测插件</a><br><a href="https://extensions.gnome.org/extension/1460/vitals/" rel="external nofollow noopener noreferrer" target="_blank">系统检测插件Vitals</a><br><a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/" rel="external nofollow noopener noreferrer" target="_blank">Coverflow Alt-Tab</a>轮播式切换窗口<br><a href="https://extensions.gnome.org/extension/1251/blyr/" rel="external nofollow noopener noreferrer" target="_blank">Blyr</a>高斯模糊GNOME Shell UI元素<br><a href="https://extensions.gnome.org/extension/1031/topicons/" rel="external nofollow noopener noreferrer" target="_blank">TopIcons Plus</a>类似于windows的系统托盘(Opacity：255；Icon Size：16；Spacing between icons：12；Tray horizontal alignment：Right)<br><a href="https://extensions.gnome.org/extension/1357/notes" rel="external nofollow noopener noreferrer" target="_blank">Notes</a>GNOME Shell桌面的粘滞便笺(番茄工作法利器)<br><a href="https://extensions.gnome.org/extension/1937/window-corner-preview-332/" rel="external nofollow noopener noreferrer" target="_blank">Window Corner Preview</a>在工作时观看您喜欢的视频或电影（视频学习神器）<br><a href="https://extensions.gnome.org/extension/1198/start-overlay-in-application-view/" rel="external nofollow noopener noreferrer" target="_blank">Start Overlay in Application View</a> 按 <code>Super</code> 键时不显示窗口，而显示应用程序，窗口配合 <a href="https://extensions.gnome.org/extension/97/coverflow-alt-tab/" rel="external nofollow noopener noreferrer" target="_blank">Coverflow Alt-Tab</a> 插件使用快捷键进行切换</p></blockquote><h4 id="GRUB主题"><a href="#GRUB主题" class="headerlink" title="GRUB主题"></a>GRUB主题</h4><p>GRUB 是什么？GRUB 是引导程序，负责引导操作系统，开机时那个选择系统的画面<br><span style="color:#ff0000;">注意：下载主题需要翻墙，如果下载慢可以用手机热点</span>  </p><p><strong>主题一：</strong><a href="https://www.opendesktop.org/p/1000140/" rel="external nofollow noopener noreferrer" target="_blank">Breeze GRUB2主题</a><br>下载主题包并解压  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo mv grub2-theme-breeze-5.13.1 /boot/grub/themes/    <span class="comment">#解压文件夹内的 breeze 文件夹复制到 /boot/grub/themes/</span></span><br><span class="line"><span class="built_in">cd</span> /boot/grub/themes/grub2-theme-breeze-5.13.1/breeze/  <span class="comment">#观察是否有theme.txt文件</span></span><br><span class="line"></span><br><span class="line">sudo gedit /etc/default/grub     <span class="comment">#修改该文件</span></span><br></pre></td></tr></table></figure><p>将<code>#GRUB_THEME=&quot;/path/to/gfxtheme&quot;</code>改为<code>GRUB_THEME=&quot;/boot/grub/themes/grub2-theme-breeze-5.13.1/breeze/theme.txt&quot;</code><br>最后还要重新生成grub.cfg文件才能让背景或者主题生效  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure><p><strong>主题二：</strong><a href="https://www.opendesktop.org/p/1009236/" rel="external nofollow noopener noreferrer" target="_blank">蛴螬主题vimix</a><br>下载主题包并解压  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ./Install  <span class="comment">#使用root用户运行里面的安装脚本</span></span><br></pre></td></tr></table></figure><h4 id="自动更换桌面壁纸-锁屏壁纸-可选"><a href="#自动更换桌面壁纸-锁屏壁纸-可选" class="headerlink" title="自动更换桌面壁纸/锁屏壁纸(可选)"></a>自动更换桌面壁纸/锁屏壁纸<span style="color:#ff0000;">(可选)</span></h4><p>gnome的默认壁纸存放在<code>/usr/share/backgrounds/gnome/</code>下，同时该目录下有个<code>adwaita-timed.xml</code>文件，记录了桌面背景信息<br>为了不会搞乱，我们就把背景图全部复制到此目录，然后再新建个xml文件<code>adwaita-ppt.xml</code>；样式如下：  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">background</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">starttime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">year</span>&gt;</span>2011<span class="tag">&lt;/<span class="name">year</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">month</span>&gt;</span>11<span class="tag">&lt;/<span class="name">month</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">day</span>&gt;</span>24<span class="tag">&lt;/<span class="name">day</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hour</span>&gt;</span>7<span class="tag">&lt;/<span class="name">hour</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">minute</span>&gt;</span>00<span class="tag">&lt;/<span class="name">minute</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">second</span>&gt;</span>00<span class="tag">&lt;/<span class="name">second</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">starttime</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">static</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>3600.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">static</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">type</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>18000.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>/picture2.jpg<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">static</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>18000.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span>picture2.jpg<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">static</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition</span> <span class="attr">type</span>=<span class="string">"overlay"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">duration</span>&gt;</span>21600.0<span class="tag">&lt;/<span class="name">duration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">from</span>&gt;</span>picture2.jpg<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">to</span>&gt;</span>picture1.jpg<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">background</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单解释以下这个xml文件的含义：  </p><blockquote><p>starttime ：这个部分规定了壁纸切换起始时间，设置成过去的某个时间即可(设置成2020年就要等到2020年才会有效果)<br>static ：这个部分表示在duration规定的时间(以秒为单位)中壁纸都是file中给定的那张图片<br>transition ：这个部分表示在duration规定的时间内壁纸从from中的图片切换到to中的图片  </p></blockquote><p>你可以添加任意多个static+transition的组合，只需要最后一个transition切换回最初的static那张图片就可以循环更换壁纸了  </p><p>启用这样的xml文件需要使用dconf系统配置编辑器，使用下面命令安装  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S dconf-editor</span><br></pre></td></tr></table></figure><p>首先打开dconf编辑器，展开<code>org–gnome–desktop–background</code>这一项，可以看到其中的<code>icture-uri</code>修这一项的默认值是<code>file:///usr/share/backgrounds/gnome/adwaita-timed.xml</code>，这个就是你刚装好桌面是的默认壁纸啦，将其改成你的xml文件就可以了  </p><p>锁屏界面的壁纸更换方法也一样，只不过把<code>org–gnome–desktop–background</code>改成<code>org–gnome–desktop–screensaver</code>而已  </p><h4 id="视频壁纸Komorebi"><a href="#视频壁纸Komorebi" class="headerlink" title="视频壁纸Komorebi"></a>视频壁纸Komorebi</h4><p><a href="https://github.com/cheesecakeufo/komorebi" rel="external nofollow noopener noreferrer" target="_blank">komorebi</a>是适用于Linux的漂亮且可定制的壁纸管理器，支持普通图片壁纸，视频壁纸<span style="color:#ff0000;">(强力推荐)</span>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay -S komorebi     <span class="comment">#安装</span></span><br></pre></td></tr></table></figure><p>安装之后在开始菜单有两个软件<strong>komorebi</strong>和<strong>wallpaper</strong>  </p><blockquote><p>komorebi负责启动壁纸，和壁纸切换，时钟显示效果<br>wallpaper用于制作壁纸，可以选择图片/视频，制作完成会提示使用命令移动一个文件到<code>/usr/share/Komorebi</code>目录，例如：<code>sudo mv /home/teaper/sx /usr/share/Komorebi</code>  </p></blockquote><h4 id="X窗口系统监视软件Conky"><a href="#X窗口系统监视软件Conky" class="headerlink" title="X窗口系统监视软件Conky"></a>X窗口系统监视软件Conky</h4><p><a href="https://github.com/brndnmtthws/conky" rel="external nofollow noopener noreferrer" target="_blank">Conky</a>是一个用于X窗口系统的系统监视软件，<code>Conky</code> 可以监控许多系统变量，包括 CPU、内存、交换分区、磁盘空间、温度、top、上传、下载、系统消息等<br><span style="color:#ff0000;">注意：<code>Conky</code>和<a href="#视频壁纸komorebi">视频壁纸Komorebi</a>只能选一个，因为<code>Komorebi</code>会遮住<code>Conky</code>，导致显示不出来</span>  </p><p>安装conky的软件包<code>conky-lua</code>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yay conky</span><br></pre></td></tr></table></figure><p>然后会出现多个包，这里就说三个  </p><blockquote><p><code>aur/conky-nvidia 1.11.3-1 (+123 0.27%)</code>支持Nvidia的conky包<br><code>aur/conky-lua 1.11.3-1 (+50 0.71%)</code>支持Lua的conky包<br><code>aur/conky-lua-nv 1.11.3-2 (+118 0.87%)</code>支持Lua和Nvidia的conky包  </p></blockquote><p>这里选择<code>aur/conky-lua 1.11.3-1 (+50 0.71%)</code>这个，输入它的编号回车，输入y回车<br>安装成功之后再安装<code>conky-manager</code>管理器  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S conky-manager</span><br></pre></td></tr></table></figure><p>再开始菜单中运行<code>conky-manager</code>，使用以下命令刷新字体缓存  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">fc</span>-cache -vf</span><br></pre></td></tr></table></figure><p>克隆conky主题<a href="https://github.com/9527tech/conkyrc" rel="external nofollow noopener noreferrer" target="_blank">Conky-Rings</a>到<code>.Conky</code>隐藏文件夹，该主题源文件在<a href="https://www.deviantart.com/trollpunny/art/Conky-Rings-Revamped-591137228" rel="external nofollow noopener noreferrer" target="_blank">deviantart</a>也可以下载到  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:9527tech/conkyrc.git ~/.Conky</span><br><span class="line"><span class="built_in">cd</span> ~/.Conky <span class="comment">#进入文件夹</span></span><br></pre></td></tr></table></figure><p>使用<code>cat /proc/cpuinfo</code>查看CPU信息，核心数<code>core id</code>，线程数<code>processor</code><br>根据自己的CPU核心数和线程数选择对应分支<span style="color:#ff0000;">(例如：我的是4核4线程)</span>   </p><blockquote><p>master分支：4核8线程&amp;&amp;纯粹8线程<br>other_4t分支：4核4线程<br>other_8t分支：8核8线程  </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout other_4t   <span class="comment">#切换到other_4t分支</span></span><br></pre></td></tr></table></figure><p>运行启动脚本  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh startconky.sh</span><br></pre></td></tr></table></figure><p>如果要修改模块位置，开启或者关闭，可以修改同名的文件，例如时钟  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit clock     <span class="comment">#编辑clock文件</span></span><br></pre></td></tr></table></figure><p>把<code>own_window yes</code>改成<code>own_window no</code>即可关闭时间<br>模块的具体参数可以根据<a href="http://conky.sourceforge.net/docs.html" rel="external nofollow noopener noreferrer" target="_blank">参考文档</a>配置  </p><p>运行之后<code>NETWORK</code>和<code>DISK</code>模块无效果，需要分别指定你自己的网卡和硬盘  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------network文件----------</span><br><span class="line">Down:<span class="variable">$alignr</span><span class="variable">$&#123;downspeed wlp2s0&#125;</span>/s   <span class="comment">#wlp2s0就是我的网卡，不知道网卡名字可以使用ifconfig查看</span></span><br><span class="line">Up:<span class="variable">$alignr</span><span class="variable">$&#123;upspeed wlp2s0&#125;</span>/s</span><br><span class="line"><span class="variable">$&#123;downspeedgraph wlp2s0 324D23 77B753&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;upspeedgraph wlp2s0 324D23 77B753&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----------disk文件----------</span><br><span class="line">Read:<span class="variable">$alignr</span><span class="variable">$&#123;diskio_read /dev/sda&#125;</span>/s  <span class="comment">#sda是我固态盘(不是分区),不知道名字使用lsblk查看</span></span><br><span class="line">Write:<span class="variable">$alignr</span><span class="variable">$&#123;diskio_write /dev/sda&#125;</span>/s</span><br><span class="line"><span class="variable">$&#123;diskiograph_read /dev/sda 324D23 77B753&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$&#123;diskiograph_write /dev/sda 324D23 77B753&#125;</span></span><br></pre></td></tr></table></figure><p>还有其他问题，参考——<a href="https://a-wing.top/linux/linux%E7%BE%8E%E5%8C%96/2016/01/05/conky-e9-85-8d-e7-bd-ae-e6-96-87-e4-bb-b6-e8-af-a6-e8-a7-a3.html" rel="external nofollow noopener noreferrer" target="_blank">【conky 配置文件详解】</a>解决  </p><p>设置<strong>开机自启</strong>  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ~/.config/autostart/conky.desktop    <span class="comment">#创建自启快捷方式</span></span><br></pre></td></tr></table></figure><p>内容如下  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line">Type=Application</span><br><span class="line">Name=conky</span><br><span class="line">Exec=/home/teaper/.Conky/startconky.sh --daemonize --pause=5</span><br><span class="line">StartupNotify=<span class="literal">false</span></span><br><span class="line">Terminal=<span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="【游戏安装篇】"><a href="#【游戏安装篇】" class="headerlink" title="【游戏安装篇】"></a>【游戏安装篇】</h3><p>Linux下玩游戏，wine用的比较多，请确保已经安装  </p><h4 id="安装Steam"><a href="#安装Steam" class="headerlink" title="安装Steam"></a>安装Steam</h4><p>安装steam之前，确保已经安装了32位的N卡驱动<code>lib32-nvidia-utils</code>，没有的话使用<code>sudo pacman -S lib32-nvidia-utils</code>命令安装，否则会出现无法启动问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S steam    <span class="comment">#安装steam</span></span><br></pre></td></tr></table></figure><p>另外，由于我教程的<code>/home</code>目录属于机械硬盘，机械盘不适合运行软件，所以需要在<code>/opt</code>目录新建<code>steam</code>文件夹  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/steam   <span class="comment">#创建文件夹</span></span><br><span class="line">sudo chmod a+w /opt/steam   <span class="comment">#加权限</span></span><br></pre></td></tr></table></figure><p>然后在启动steam之后，进入steam设置 &gt; 下载 &gt; steam库文件中添加<code>/opt/steam</code>路径，并且右击设置为默认路径，以后在steam中下载的游戏就会自动进入该文件夹  </p><blockquote><p>STEAM 游戏推荐<br><a href="https://store.steampowered.com/app/466560/Northgard/" rel="external nofollow noopener noreferrer" target="_blank">Northgard</a>（北境之地）<br><a href="https://store.steampowered.com/app/570/Dota_2/" rel="external nofollow noopener noreferrer" target="_blank">Dota 2</a><br><a href="https://store.steampowered.com/app/289070/Sid_Meiers_Civilization_VI/" rel="external nofollow noopener noreferrer" target="_blank">文明 VI</a>  </p></blockquote><h4 id="大灾变"><a href="#大灾变" class="headerlink" title="大灾变"></a>大灾变</h4><p><a href="https://cataclysmdda.org" rel="external nofollow noopener noreferrer" target="_blank">大灾变</a>：Dark Days Ahead是一部基于回合制的生存游戏，设置在后世界末日。努力在一个严酷，持久，程序化的世界中生存。为了食物，设备，或者如果你运气好的话，清除一个死亡文明的残余物，一辆装满油箱的车辆让你彻底逃离道奇。打败或逃脱各种各样强大的怪物，从僵尸到巨型昆虫，到杀手机器人和更加陌生和更致命的东西，以及像你一样的其他人，想要你拥有的……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S cataclysm-dda    #直接安装</span><br><span class="line">cataclysm   #启动</span><br></pre></td></tr></table></figure><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g74ac8bss0j31gn0rtmxx.jpg" alt></p><p><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g25l4i5aupj31hc0u0e83.jpg" alt><br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g25l59vjxnj31hc0u04qp.jpg" alt><br><img src="http://ww1.sinaimg.cn/large/006kWbIoly1g25l6c0oq0j31hc0u0x6p.jpg" alt>  </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arch Linux </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
